
task8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800c5f8  0800c5f8  0000d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca44  0800ca44  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ca44  0800ca44  0000da44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca4c  0800ca4c  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca4c  0800ca4c  0000da4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca50  0800ca50  0000da50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ca54  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          00001cbc  200001d8  200001d8  0000e1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e94  20001e94  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e1ad  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004727  00000000  00000000  0002c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  00030ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131a  00000000  00000000  000323a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259d3  00000000  00000000  000336ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d04  00000000  00000000  0005908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfaa6  00000000  00000000  00079d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159837  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077a8  00000000  00000000  0015987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00161024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5e0 	.word	0x0800c5e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800c5e0 	.word	0x0800c5e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be2:	4b33      	ldr	r3, [pc, #204]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bee:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c22:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c34:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c36:	f000 fec7 	bl	80019c8 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 fb22 	bl	8001288 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c50:	f002 f82a 	bl	8002ca8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c5a:	f000 fb15 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c5e:	2312      	movs	r3, #18
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c7c:	f001 fd2a 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c86:	f000 faff 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <MX_ADC1_Init+0xf8>)
 8000c98:	f001 fd1c 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000ca2:	f000 faf1 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001f4 	.word	0x200001f4

08000cb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cc4:	d13b      	bne.n	8000d3e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <HAL_ADC_MspInit+0x94>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a1f      	ldr	r2, [pc, #124]	@ (8000d48 <HAL_ADC_MspInit+0x94>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <HAL_ADC_MspInit+0x94>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_ADC_MspInit+0x9c>)
 8000ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d08:	2220      	movs	r2, #32
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d14:	f002 fb82 	bl	800341c <HAL_DMA_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d1e:	f000 fab3 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_ADC_MspInit+0x98>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2105      	movs	r1, #5
 8000d32:	2012      	movs	r0, #18
 8000d34:	f002 fb48 	bl	80033c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d38:	2012      	movs	r0, #18
 8000d3a:	f002 fb61 	bl	8003400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	20000244 	.word	0x20000244
 8000d50:	40020008 	.word	0x40020008

08000d54 <waiting_entry>:
    state_waiting,
    state_calculating,
    state_uart
};

void waiting_entry(struct smf_ctx *ctx) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	Vref_cal = *VREFINT_CAL_ADDR;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <waiting_entry+0x24>)
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <waiting_entry+0x28>)
 8000d62:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer, 2);
 8000d64:	2202      	movs	r2, #2
 8000d66:	4906      	ldr	r1, [pc, #24]	@ (8000d80 <waiting_entry+0x2c>)
 8000d68:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <waiting_entry+0x30>)
 8000d6a:	f001 f827 	bl	8001dbc <HAL_ADC_Start_DMA>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	1ffff7ba 	.word	0x1ffff7ba
 8000d7c:	2000029c 	.word	0x2000029c
 8000d80:	200002a0 	.word	0x200002a0
 8000d84:	200001f4 	.word	0x200001f4

08000d88 <waiting_run>:
void waiting_run(struct smf_ctx *ctx) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

	xTaskNotifyWait(0x00, ULONG_MAX, &value, portMAX_DELAY);
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <waiting_run+0x48>)
 8000d96:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f007 fce0 	bl	8008760 <xTaskNotifyWait>
	if(value & adc_value){
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <waiting_run+0x48>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00d      	beq.n	8000dc8 <waiting_run+0x40>
		adc_Vref= buffer[0];
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <waiting_run+0x4c>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <waiting_run+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
	    raw= buffer[1];
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <waiting_run+0x4c>)
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <waiting_run+0x54>)
 8000dbe:	601a      	str	r2, [r3, #0]
		smf_set_state(ctx, &states[state_calculating]);
 8000dc0:	4907      	ldr	r1, [pc, #28]	@ (8000de0 <waiting_run+0x58>)
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 faa4 	bl	8001310 <smf_set_state>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002c4 	.word	0x200002c4
 8000dd4:	200002a0 	.word	0x200002a0
 8000dd8:	20000294 	.word	0x20000294
 8000ddc:	20000298 	.word	0x20000298
 8000de0:	0800c638 	.word	0x0800c638

08000de4 <calculating_entry>:
void calculating_entry(struct smf_ctx *ctx) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	Vref = 3.3f *((float)Vref_cal / (float)adc_Vref);
 8000dec:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <calculating_entry+0x88>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <calculating_entry+0x8c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e08:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000e74 <calculating_entry+0x90>
 8000e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <calculating_entry+0x94>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]
	voltaj= ((float)raw* Vref)/4096.0f;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <calculating_entry+0x98>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <calculating_entry+0x94>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000e80 <calculating_entry+0x9c>
 8000e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <calculating_entry+0xa0>)
 8000e36:	edc3 7a00 	vstr	s15, [r3]
	temp = ((1.43f - voltaj)  /0.0043f) + 25.0f;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <calculating_entry+0xa0>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000e88 <calculating_entry+0xa4>
 8000e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e48:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000e8c <calculating_entry+0xa8>
 8000e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e50:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <calculating_entry+0xac>)
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop_DMA(&hadc1);
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <calculating_entry+0xb0>)
 8000e60:	f001 f8c8 	bl	8001ff4 <HAL_ADC_Stop_DMA>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000029c 	.word	0x2000029c
 8000e70:	20000294 	.word	0x20000294
 8000e74:	40533333 	.word	0x40533333
 8000e78:	20000290 	.word	0x20000290
 8000e7c:	20000298 	.word	0x20000298
 8000e80:	45800000 	.word	0x45800000
 8000e84:	2000028c 	.word	0x2000028c
 8000e88:	3fb70a3d 	.word	0x3fb70a3d
 8000e8c:	3b8ce704 	.word	0x3b8ce704
 8000e90:	20000288 	.word	0x20000288
 8000e94:	200001f4 	.word	0x200001f4

08000e98 <calculating_run>:
void calculating_run(struct smf_ctx *ctx) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	smf_set_state(ctx, &states[state_uart]);
 8000ea0:	4903      	ldr	r1, [pc, #12]	@ (8000eb0 <calculating_run+0x18>)
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fa34 	bl	8001310 <smf_set_state>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	0800c644 	.word	0x0800c644

08000eb4 <uart_entry>:

void uart_entry(struct smf_ctx *ctx) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
	snprintf(text, sizeof(text), "temp: %.2f\n", temp);
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <uart_entry+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb49 	bl	8000558 <__aeabi_f2d>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	e9cd 2300 	strd	r2, r3, [sp]
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <uart_entry+0x44>)
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	480a      	ldr	r0, [pc, #40]	@ (8000efc <uart_entry+0x48>)
 8000ed4:	f009 fa3c 	bl	800a350 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1,  (uint8_t*)text, strlen(text));
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <uart_entry+0x48>)
 8000eda:	f7ff f9d1 	bl	8000280 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4905      	ldr	r1, [pc, #20]	@ (8000efc <uart_entry+0x48>)
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <uart_entry+0x4c>)
 8000ee8:	f004 fde8 	bl	8005abc <HAL_UART_Transmit_DMA>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000288 	.word	0x20000288
 8000ef8:	0800c5f8 	.word	0x0800c5f8
 8000efc:	200002a4 	.word	0x200002a4
 8000f00:	20000330 	.word	0x20000330

08000f04 <uart_run>:
void uart_run(struct smf_ctx *ctx) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	// Wait for tranmission complete ulTaskNotifyTake
	// on sucess go to state waiting smf_set_state(&adcCtx, &states[state_waiting]);
	xTaskNotifyWait(0x00, ULONG_MAX, &value, portMAX_DELAY);
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <uart_run+0x3c>)
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	2000      	movs	r0, #0
 8000f18:	f007 fc22 	bl	8008760 <xTaskNotifyWait>
	if(value & uart_value){
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <uart_run+0x3c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <uart_run+0x32>
	printf(text);
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <uart_run+0x40>)
 8000f2a:	f009 f9ff 	bl	800a32c <iprintf>
	smf_set_state(ctx, &states[state_waiting]);
 8000f2e:	4906      	ldr	r1, [pc, #24]	@ (8000f48 <uart_run+0x44>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f9ed 	bl	8001310 <smf_set_state>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200002c4 	.word	0x200002c4
 8000f44:	200002a4 	.word	0x200002a4
 8000f48:	0800c62c 	.word	0x0800c62c

08000f4c <HAL_ADC_ConvCpltCallback>:
	[state_calculating] = SMF_CREATE_STATE(calculating_entry, calculating_run, NULL, NULL, NULL),
	[state_uart] = SMF_CREATE_STATE(uart_entry, uart_run, NULL, NULL, NULL)
};
struct smf_ctx adcCtx;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(Task2Handle, adc_value , eSetBits, &xHigherPriorityTaskWoken);
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x40>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	f007 fc54 	bl	8008814 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_ADC_ConvCpltCallback+0x36>
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0x44>)
 8000f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	f3bf 8f4f 	dsb	sy
 8000f7e:	f3bf 8f6f 	isb	sy
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002dc 	.word	0x200002dc
 8000f90:	e000ed04 	.word	0xe000ed04

08000f94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(Task2Handle, uart_value  , eSetBits, &xHigherPriorityTaskWoken);
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_UART_TxCpltCallback+0x40>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	2201      	movs	r2, #1
 8000fae:	2102      	movs	r1, #2
 8000fb0:	f007 fc30 	bl	8008814 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_UART_TxCpltCallback+0x36>
 8000fba:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <HAL_UART_TxCpltCallback+0x44>)
 8000fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	f3bf 8f6f 	isb	sy

    // Notify the task
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002dc 	.word	0x200002dc
 8000fd8:	e000ed04 	.word	0xe000ed04

08000fdc <TaskFunction2>:

void TaskFunction2(void *argument) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

    smf_set_initial(&adcCtx, &states[state_waiting]);
 8000fe4:	4903      	ldr	r1, [pc, #12]	@ (8000ff4 <TaskFunction2+0x18>)
 8000fe6:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <TaskFunction2+0x1c>)
 8000fe8:	f000 f975 	bl	80012d6 <smf_set_initial>
	for(;;) {
		smf_run_state(&adcCtx);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <TaskFunction2+0x1c>)
 8000fee:	f000 f9dc 	bl	80013aa <smf_run_state>
 8000ff2:	e7fb      	b.n	8000fec <TaskFunction2+0x10>
 8000ff4:	0800c62c 	.word	0x0800c62c
 8000ff8:	200002c8 	.word	0x200002c8

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_DMA_Init+0x48>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <MX_DMA_Init+0x48>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_DMA_Init+0x48>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	200b      	movs	r0, #11
 8001020:	f002 f9d2 	bl	80033c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001024:	200b      	movs	r0, #11
 8001026:	f002 f9eb 	bl	8003400 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	200e      	movs	r0, #14
 8001030:	f002 f9ca 	bl	80033c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001034:	200e      	movs	r0, #14
 8001036:	f002 f9e3 	bl	8003400 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(TaskFunction1, NULL, &Task1_attributes);
 800104c:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <MX_FREERTOS_Init+0x28>)
 800104e:	2100      	movs	r1, #0
 8001050:	4808      	ldr	r0, [pc, #32]	@ (8001074 <MX_FREERTOS_Init+0x2c>)
 8001052:	f005 fe13 	bl	8006c7c <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <MX_FREERTOS_Init+0x30>)
 800105a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // TODO: Create task here
  Task2Handle = osThreadNew(TaskFunction2, NULL, &Task2_attributes);
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <MX_FREERTOS_Init+0x34>)
 800105e:	2100      	movs	r1, #0
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_FREERTOS_Init+0x38>)
 8001062:	f005 fe0b 	bl	8006c7c <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <MX_FREERTOS_Init+0x3c>)
 800106a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0800c650 	.word	0x0800c650
 8001074:	08001089 	.word	0x08001089
 8001078:	200002d8 	.word	0x200002d8
 800107c:	0800c674 	.word	0x0800c674
 8001080:	08000fdd 	.word	0x08000fdd
 8001084:	200002dc 	.word	0x200002dc

08001088 <TaskFunction1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskFunction1 */
void TaskFunction1(void *argument)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskFunction1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f005 fe9d 	bl	8006dd0 <osDelay>
 8001096:	e7fb      	b.n	8001090 <TaskFunction1+0x8>

08001098 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_GPIO_Init+0x74>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <MX_GPIO_Init+0x74>)
 80010a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_GPIO_Init+0x74>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_GPIO_Init+0x74>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <MX_GPIO_Init+0x74>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_GPIO_Init+0x74>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_GPIO_Init+0x74>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <MX_GPIO_Init+0x74>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_GPIO_Init+0x74>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_GPIO_Init+0x74>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <MX_GPIO_Init+0x74>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_GPIO_Init+0x74>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001118:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800111c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001128:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800112c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001130:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001138:	e000      	b.n	800113c <ITM_SendChar+0x2c>
    {
      __NOP();
 800113a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800113c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001146:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <__io_putchar>:
void TaskFunction3(void *argumnet);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	    ITM_SendChar('A');
 8001166:	2041      	movs	r0, #65	@ 0x41
 8001168:	f7ff ffd2 	bl	8001110 <ITM_SendChar>
	    return ch;
 800116c:	687b      	ldr	r3, [r7, #4]
	}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fbd1 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f810 	bl	80011a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f7ff ff89 	bl	8001098 <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f7ff ff39 	bl	8000ffc <MX_DMA_Init>
  MX_ADC1_Init();
 800118a:	f7ff fd15 	bl	8000bb8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800118e:	f000 faf7 	bl	8001780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001192:	f005 fd0b 	bl	8006bac <osKernelInitialize>
  MX_FREERTOS_Init();
 8001196:	f7ff ff57 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800119a:	f005 fd3b 	bl	8006c14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <main+0x28>

080011a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b0a6      	sub	sp, #152	@ 0x98
 80011a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011ac:	2228      	movs	r2, #40	@ 0x28
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 f946 	bl	800a442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2258      	movs	r2, #88	@ 0x58
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f009 f938 	bl	800a442 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d2:	2302      	movs	r3, #2
 80011d4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2310      	movs	r3, #16
 80011dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80011f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fcc5 	bl	8003b90 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800120c:	f000 f83c 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fcd4 	bl	8004bd8 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001236:	f000 f827 	bl	8001288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800123a:	2381      	movs	r3, #129	@ 0x81
 800123c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f003 ff08 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001256:	f000 f817 	bl	8001288 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3798      	adds	r7, #152	@ 0x98
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001276:	f000 fb69 	bl	800194c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40001400 	.word	0x40001400

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <Error_Handler+0x8>

08001294 <smf_clear_internal_state>:
 * Should be called on entry to smf_set_initial() and smf_set_state().
 *
 * @param ctx State machine context.
 */
static void smf_clear_internal_state(struct smf_ctx *ctx)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	struct internal_ctx *const internal = (void *)&ctx->internal;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	330c      	adds	r3, #12
 80012a0:	60fb      	str	r3, [r7, #12]

	internal->is_exit = false;
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	7813      	ldrb	r3, [r2, #0]
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	7013      	strb	r3, [r2, #0]
	internal->terminate = false;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	7013      	strb	r3, [r2, #0]
	internal->handled = false;
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	7813      	ldrb	r3, [r2, #0]
 80012ba:	f023 0308 	bic.w	r3, r3, #8
 80012be:	7013      	strb	r3, [r2, #0]
	internal->new_state = false;
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	7813      	ldrb	r3, [r2, #0]
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	7013      	strb	r3, [r2, #0]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <smf_set_initial>:

void smf_set_initial(struct smf_ctx *ctx, const struct smf_state *init_state)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	while (init_state->initial) {
		init_state = init_state->initial;
	}
#endif

	smf_clear_internal_state(ctx);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffd7 	bl	8001294 <smf_clear_internal_state>
	ctx->current = init_state;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
	ctx->previous = NULL;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
	ctx->terminate_val = 0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
		/* No need to continue if terminate was set */
		return;
	}
#else
	/* execute entry action if it exists */
	if (init_state->entry) {
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <smf_set_initial+0x32>
		init_state->entry(ctx);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
	}
#endif
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <smf_set_state>:

void smf_set_state(struct smf_ctx *const ctx, const struct smf_state *new_state)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	struct internal_ctx *const internal = (void *)&ctx->internal;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	330c      	adds	r3, #12
 800131e:	60fb      	str	r3, [r7, #12]

	if (new_state == NULL) {
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d039      	beq.n	800139a <smf_set_state+0x8a>
	/*
	 * It does not make sense to call smf_set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->is_exit) {
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d134      	bne.n	800139e <smf_set_state+0x8e>
		/* No need to continue if terminate was set in the entry action */
		return;
	}
#else
	/* Flat state machines have a very simple transition: */
	if (ctx->current->exit) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <smf_set_state+0x5a>
		internal->is_exit = true;
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	7813      	ldrb	r3, [r2, #0]
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	7013      	strb	r3, [r2, #0]
		ctx->current->exit(ctx);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
		/* No need to continue if terminate was set in the exit action */
		if (internal->terminate) {
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d120      	bne.n	80013a2 <smf_set_state+0x92>
			return;
		}
		internal->is_exit = false;
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	7813      	ldrb	r3, [r2, #0]
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	7013      	strb	r3, [r2, #0]
	}
	/* update the state variables */
	ctx->previous = ctx->current;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	605a      	str	r2, [r3, #4]
	ctx->current = new_state;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	601a      	str	r2, [r3, #0]

	if (ctx->current->entry) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <smf_set_state+0x94>
		ctx->current->entry(ctx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
		/* No need to continue if terminate was set in the entry action */
		if (internal->terminate) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	e004      	b.n	80013a4 <smf_set_state+0x94>
		return;
 800139a:	bf00      	nop
 800139c:	e002      	b.n	80013a4 <smf_set_state+0x94>
		return;
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <smf_set_state+0x94>
			return;
 80013a2:	bf00      	nop
			return;
		}
	}
#endif
}
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <smf_run_state>:

	internal->handled = true;
}

int32_t smf_run_state(struct smf_ctx *const ctx)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	struct internal_ctx *const internal = (void *)&ctx->internal;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	330c      	adds	r3, #12
 80013b6:	60fb      	str	r3, [r7, #12]

	/* No need to continue if terminate was set */
	if (internal->terminate) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <smf_run_state+0x22>
		return ctx->terminate_val;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	e00d      	b.n	80013e8 <smf_run_state+0x3e>
	}

	/* Executing a states run function could cause a transition, so clear the
	 * internal state to ensure that the transition is handled correctly.
	 */
	smf_clear_internal_state(ctx);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff61 	bl	8001294 <smf_clear_internal_state>

#ifdef CONFIG_SMF_ANCESTOR_SUPPORT
	ctx->executing = ctx->current;
#endif

	if (ctx->current->run) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <smf_run_state+0x3c>
		ctx->current->run(ctx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
#ifdef CONFIG_SMF_ANCESTOR_SUPPORT
	if (smf_execute_ancestor_run_actions(ctx)) {
		return ctx->terminate_val;
	}
#endif
	return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_MspInit+0x4c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_MspInit+0x4c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_MspInit+0x4c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_MspInit+0x4c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_MspInit+0x4c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	210f      	movs	r1, #15
 800142a:	f06f 0001 	mvn.w	r0, #1
 800142e:	f001 ffcb 	bl	80033c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	@ 0x38
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001450:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <HAL_InitTick+0xe0>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a32      	ldr	r2, [pc, #200]	@ (8001520 <HAL_InitTick+0xe0>)
 8001456:	f043 0320 	orr.w	r3, r3, #32
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <HAL_InitTick+0xe0>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001468:	f107 0210 	add.w	r2, r7, #16
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fdc2 	bl	8004ffc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001482:	f003 fd77 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8001486:	6378      	str	r0, [r7, #52]	@ 0x34
 8001488:	e004      	b.n	8001494 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800148a:	f003 fd73 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 800148e:	4603      	mov	r3, r0
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001496:	4a23      	ldr	r2, [pc, #140]	@ (8001524 <HAL_InitTick+0xe4>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	3b01      	subs	r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_InitTick+0xe8>)
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_InitTick+0xec>)
 80014a6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <HAL_InitTick+0xe8>)
 80014aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ae:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_InitTick+0xe8>)
 80014b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_InitTick+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <HAL_InitTick+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_InitTick+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80014c8:	4817      	ldr	r0, [pc, #92]	@ (8001528 <HAL_InitTick+0xe8>)
 80014ca:	f003 ffe5 	bl	8005498 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11b      	bne.n	8001514 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80014dc:	4812      	ldr	r0, [pc, #72]	@ (8001528 <HAL_InitTick+0xe8>)
 80014de:	f004 f83d 	bl	800555c <HAL_TIM_Base_Start_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014f0:	2037      	movs	r0, #55	@ 0x37
 80014f2:	f001 ff85 	bl	8003400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d808      	bhi.n	800150e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	2037      	movs	r0, #55	@ 0x37
 8001502:	f001 ff61 	bl	80033c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_InitTick+0xf0>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e002      	b.n	8001514 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001514:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001518:	4618      	mov	r0, r3
 800151a:	3738      	adds	r7, #56	@ 0x38
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	200002e0 	.word	0x200002e0
 800152c:	40001400 	.word	0x40001400
 8001530:	20000004 	.word	0x20000004

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <NMI_Handler+0x4>

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <MemManage_Handler+0x4>

0800154c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <UsageFault_Handler+0x4>

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <DMA1_Channel1_IRQHandler+0x10>)
 8001572:	f002 f875 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000244 	.word	0x20000244

08001580 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <DMA1_Channel4_IRQHandler+0x10>)
 8001586:	f002 f86b 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200003b8 	.word	0x200003b8

08001594 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <ADC1_2_IRQHandler+0x10>)
 800159a:	f000 fd8d 	bl	80020b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200001f4 	.word	0x200001f4

080015a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <USART1_IRQHandler+0x10>)
 80015ae:	f004 fb01 	bl	8005bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000330 	.word	0x20000330

080015bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <TIM7_IRQHandler+0x10>)
 80015c2:	f004 f83b 	bl	800563c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002e0 	.word	0x200002e0

080015d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_kill>:

int _kill(int pid, int sig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ea:	f008 ff7d 	bl	800a4e8 <__errno>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2216      	movs	r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_exit>:

void _exit (int status)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffe7 	bl	80015e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <_exit+0x12>

08001616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e00a      	b.n	800163e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001628:	f3af 8000 	nop.w
 800162c:	4601      	mov	r1, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf0      	blt.n	8001628 <_read+0x12>
  }

  return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e009      	b.n	8001676 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd77 	bl	800115e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbf1      	blt.n	8001662 <_write+0x12>
  }
  return len;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_close>:

int _close(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f008 fee2 	bl	800a4e8 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20010000 	.word	0x20010000
 8001750:	00000400 	.word	0x00000400
 8001754:	2000032c 	.word	0x2000032c
 8001758:	20001e98 	.word	0x20001e98

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 8001786:	4a15      	ldr	r2, [pc, #84]	@ (80017dc <MX_USART1_UART_Init+0x5c>)
 8001788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 800178c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_USART1_UART_Init+0x58>)
 80017c4:	f004 f92c 	bl	8005a20 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ce:	f7ff fd5b 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000330 	.word	0x20000330
 80017dc:	40013800 	.word	0x40013800

080017e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2e      	ldr	r2, [pc, #184]	@ (80018b8 <HAL_UART_MspInit+0xd8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d155      	bne.n	80018ae <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a2d      	ldr	r2, [pc, #180]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a27      	ldr	r2, [pc, #156]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 8001820:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <HAL_UART_MspInit+0xdc>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001832:	2330      	movs	r3, #48	@ 0x30
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	481c      	ldr	r0, [pc, #112]	@ (80018c0 <HAL_UART_MspInit+0xe0>)
 800184e:	f002 f815 	bl	800387c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001854:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <HAL_UART_MspInit+0xe8>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 800185a:	2210      	movs	r2, #16
 800185c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001882:	4810      	ldr	r0, [pc, #64]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001884:	f001 fdca 	bl	800341c <HAL_DMA_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800188e:	f7ff fcfb 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 8001896:	671a      	str	r2, [r3, #112]	@ 0x70
 8001898:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_UART_MspInit+0xe4>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2105      	movs	r1, #5
 80018a2:	2025      	movs	r0, #37	@ 0x25
 80018a4:	f001 fd90 	bl	80033c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018a8:	2025      	movs	r0, #37	@ 0x25
 80018aa:	f001 fda9 	bl	8003400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	@ 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000800 	.word	0x48000800
 80018c4:	200003b8 	.word	0x200003b8
 80018c8:	40020044 	.word	0x40020044

080018cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff ff44 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f008 fdfb 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fe:	f7ff fc3a 	bl	8001176 <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001904:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001910:	0800ca54 	.word	0x0800ca54
  ldr r2, =_sbss
 8001914:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001918:	20001e94 	.word	0x20001e94

0800191c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC3_IRQHandler>
	...

08001920 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f001 fd3e 	bl	80033b2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f7ff fd82 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fd58 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	200003fc 	.word	0x200003fc

08001974 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;  
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200003fc 	.word	0x200003fc

0800198c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09a      	sub	sp, #104	@ 0x68
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e1e3      	b.n	8001db0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d176      	bne.n	8001ae8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d152      	bne.n	8001aa8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff f949 	bl	8000cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d13b      	bne.n	8001aa8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f001 faf5 	bl	8003020 <ADC_Disable>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d12f      	bne.n	8001aa8 <HAL_ADC_Init+0xe0>
 8001a48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d12b      	bne.n	8001aa8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	f043 0202 	orr.w	r2, r3, #2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a72:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a82:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a84:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <HAL_ADC_Init+0x308>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a92      	ldr	r2, [pc, #584]	@ (8001cd4 <HAL_ADC_Init+0x30c>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9a      	lsrs	r2, r3, #18
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac4:	d110      	bne.n	8001ae8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f023 0312 	bic.w	r3, r3, #18
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 8150 	bne.w	8001d96 <HAL_ADC_Init+0x3ce>
 8001af6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 814b 	bne.w	8001d96 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 8143 	bne.w	8001d96 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b18:	f043 0202 	orr.w	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b28:	d004      	beq.n	8001b34 <HAL_ADC_Init+0x16c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd8 <HAL_ADC_Init+0x310>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_Init+0x170>
 8001b34:	4b69      	ldr	r3, [pc, #420]	@ (8001cdc <HAL_ADC_Init+0x314>)
 8001b36:	e000      	b.n	8001b3a <HAL_ADC_Init+0x172>
 8001b38:	4b69      	ldr	r3, [pc, #420]	@ (8001ce0 <HAL_ADC_Init+0x318>)
 8001b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_Init+0x184>
 8001b46:	4b64      	ldr	r3, [pc, #400]	@ (8001cd8 <HAL_ADC_Init+0x310>)
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e01a      	b.n	8001b82 <HAL_ADC_Init+0x1ba>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a61      	ldr	r2, [pc, #388]	@ (8001cd8 <HAL_ADC_Init+0x310>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d103      	bne.n	8001b5e <HAL_ADC_Init+0x196>
 8001b56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e011      	b.n	8001b82 <HAL_ADC_Init+0x1ba>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <HAL_ADC_Init+0x31c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <HAL_ADC_Init+0x1a6>
 8001b68:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <HAL_ADC_Init+0x320>)
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e009      	b.n	8001b82 <HAL_ADC_Init+0x1ba>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce8 <HAL_ADC_Init+0x320>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d102      	bne.n	8001b7e <HAL_ADC_Init+0x1b6>
 8001b78:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce4 <HAL_ADC_Init+0x31c>)
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e001      	b.n	8001b82 <HAL_ADC_Init+0x1ba>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_ADC_Init+0x1da>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x1da>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x1dc>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11c      	bne.n	8001be2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Init+0x202>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Init+0x202>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_Init+0x204>
 8001bca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	035b      	lsls	r3, r3, #13
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_Init+0x22e>
 8001bf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_Init+0x230>
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d11b      	bne.n	8001c4e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7e5b      	ldrb	r3, [r3, #25]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	045a      	lsls	r2, r3, #17
 8001c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c30:	e00d      	b.n	8001c4e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d054      	beq.n	8001d00 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_ADC_Init+0x31c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_Init+0x2a2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	@ (8001ce8 <HAL_ADC_Init+0x320>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d140      	bne.n	8001cec <HAL_ADC_Init+0x324>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001c72:	d02a      	beq.n	8001cca <HAL_ADC_Init+0x302>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c7c:	d022      	beq.n	8001cc4 <HAL_ADC_Init+0x2fc>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001c86:	d01a      	beq.n	8001cbe <HAL_ADC_Init+0x2f6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001c90:	d012      	beq.n	8001cb8 <HAL_ADC_Init+0x2f0>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_ADC_Init+0x2ea>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca0:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001ca4:	d002      	beq.n	8001cac <HAL_ADC_Init+0x2e4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001caa:	e023      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cb0:	e020      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cb2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001cb6:	e01d      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cb8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001cbc:	e01a      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc2:	e017      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cc4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001cc8:	e014      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cca:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001cce:	e011      	b.n	8001cf4 <HAL_ADC_Init+0x32c>
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	50000100 	.word	0x50000100
 8001cdc:	50000300 	.word	0x50000300
 8001ce0:	50000700 	.word	0x50000700
 8001ce4:	50000400 	.word	0x50000400
 8001ce8:	50000500 	.word	0x50000500
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d114      	bne.n	8001d38 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d1c:	f023 0302 	bic.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7e1b      	ldrb	r3, [r3, #24]
 8001d26:	039a      	lsls	r2, r3, #14
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4313      	orrs	r3, r2
 8001d32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d34:	4313      	orrs	r3, r2
 8001d36:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <HAL_ADC_Init+0x3f0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f023 010f 	bic.w	r1, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020f 	bic.w	r2, r2, #15
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f023 0303 	bic.w	r3, r3, #3
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d94:	e00a      	b.n	8001dac <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f023 0312 	bic.w	r3, r3, #18
 8001d9e:	f043 0210 	orr.w	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001dac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3768      	adds	r7, #104	@ 0x68
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	fff0c007 	.word	0xfff0c007

08001dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80f7 	bne.w	8001fca <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Start_DMA+0x2e>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0f2      	b.n	8001fd0 <HAL_ADC_Start_DMA+0x214>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Start_DMA+0x4a>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a75      	ldr	r2, [pc, #468]	@ (8001fd8 <HAL_ADC_Start_DMA+0x21c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d109      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x5e>
 8001e06:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_ADC_Start_DMA+0x220>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e008      	b.n	8001e2c <HAL_ADC_Start_DMA+0x70>
 8001e1a:	4b71      	ldr	r3, [pc, #452]	@ (8001fe0 <HAL_ADC_Start_DMA+0x224>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf0c      	ite	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	2300      	movne	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80c5 	beq.w	8001fbc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f001 f890 	bl	8002f58 <ADC_Enable>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80b7 	bne.w	8001fb2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e60:	d004      	beq.n	8001e6c <HAL_ADC_Start_DMA+0xb0>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a5c      	ldr	r2, [pc, #368]	@ (8001fd8 <HAL_ADC_Start_DMA+0x21c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d106      	bne.n	8001e7a <HAL_ADC_Start_DMA+0xbe>
 8001e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_ADC_Start_DMA+0x220>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_ADC_Start_DMA+0xde>
 8001e78:	e005      	b.n	8001e86 <HAL_ADC_Start_DMA+0xca>
 8001e7a:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_ADC_Start_DMA+0x224>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_ADC_Start_DMA+0xde>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e8e:	d004      	beq.n	8001e9a <HAL_ADC_Start_DMA+0xde>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a53      	ldr	r2, [pc, #332]	@ (8001fe4 <HAL_ADC_Start_DMA+0x228>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d115      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d036      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ebc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ec4:	e02d      	b.n	8001f22 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eda:	d004      	beq.n	8001ee6 <HAL_ADC_Start_DMA+0x12a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd8 <HAL_ADC_Start_DMA+0x21c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10a      	bne.n	8001efc <HAL_ADC_Start_DMA+0x140>
 8001ee6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_Start_DMA+0x152>
 8001efc:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <HAL_ADC_Start_DMA+0x228>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2e:	d106      	bne.n	8001f3e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	f023 0206 	bic.w	r2, r3, #6
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f50:	4a25      	ldr	r2, [pc, #148]	@ (8001fe8 <HAL_ADC_Start_DMA+0x22c>)
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f58:	4a24      	ldr	r2, [pc, #144]	@ (8001fec <HAL_ADC_Start_DMA+0x230>)
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f60:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_ADC_Start_DMA+0x234>)
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	221c      	movs	r2, #28
 8001f6a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0210 	orr.w	r2, r2, #16
 8001f7a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3340      	adds	r3, #64	@ 0x40
 8001f96:	4619      	mov	r1, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f001 fa85 	bl	80034aa <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0204 	orr.w	r2, r2, #4
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e00d      	b.n	8001fce <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001fba:	e008      	b.n	8001fce <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001fc8:	e001      	b.n	8001fce <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	50000100 	.word	0x50000100
 8001fdc:	50000300 	.word	0x50000300
 8001fe0:	50000700 	.word	0x50000700
 8001fe4:	50000400 	.word	0x50000400
 8001fe8:	08002e8d 	.word	0x08002e8d
 8001fec:	08002f07 	.word	0x08002f07
 8001ff0:	08002f23 	.word	0x08002f23

08001ff4 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADC_Stop_DMA+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e050      	b.n	80020b0 <HAL_ADC_Stop_DMA+0xbc>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002016:	216c      	movs	r1, #108	@ 0x6c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f001 f867 	bl	80030ec <ADC_ConversionStop>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d13e      	bne.n	80020a6 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002040:	2b02      	cmp	r3, #2
 8002042:	d10f      	bne.n	8002064 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002048:	4618      	mov	r0, r3
 800204a:	f001 fa8d 	bl	8003568 <HAL_DMA_Abort>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0210 	bic.w	r2, r2, #16
 8002072:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 ffd0 	bl	8003020 <ADC_Disable>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e002      	b.n	800208c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 ffca 	bl	8003020 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x38>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80bc 	beq.w	8002274 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80b6 	beq.w	8002274 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002128:	d004      	beq.n	8002134 <HAL_ADC_IRQHandler+0x7c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a90      	ldr	r2, [pc, #576]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d106      	bne.n	8002142 <HAL_ADC_IRQHandler+0x8a>
 8002134:	4b8f      	ldr	r3, [pc, #572]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03e      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 8002140:	e005      	b.n	800214e <HAL_ADC_IRQHandler+0x96>
 8002142:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2b00      	cmp	r3, #0
 800214c:	d037      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002156:	d004      	beq.n	8002162 <HAL_ADC_IRQHandler+0xaa>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a84      	ldr	r2, [pc, #528]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d106      	bne.n	8002170 <HAL_ADC_IRQHandler+0xb8>
 8002162:	4b84      	ldr	r3, [pc, #528]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b05      	cmp	r3, #5
 800216c:	d027      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 800216e:	e005      	b.n	800217c <HAL_ADC_IRQHandler+0xc4>
 8002170:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2b05      	cmp	r3, #5
 800217a:	d020      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002184:	d004      	beq.n	8002190 <HAL_ADC_IRQHandler+0xd8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a79      	ldr	r2, [pc, #484]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d106      	bne.n	800219e <HAL_ADC_IRQHandler+0xe6>
 8002190:	4b78      	ldr	r3, [pc, #480]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2b09      	cmp	r3, #9
 800219a:	d010      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 800219c:	e005      	b.n	80021aa <HAL_ADC_IRQHandler+0xf2>
 800219e:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	d009      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021b2:	d004      	beq.n	80021be <HAL_ADC_IRQHandler+0x106>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a70      	ldr	r2, [pc, #448]	@ (800237c <HAL_ADC_IRQHandler+0x2c4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d104      	bne.n	80021c8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e00f      	b.n	80021e8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_IRQHandler+0x124>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a66      	ldr	r2, [pc, #408]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d102      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x12a>
 80021dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_IRQHandler+0x12c>
 80021e2:	4b66      	ldr	r3, [pc, #408]	@ (800237c <HAL_ADC_IRQHandler+0x2c4>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d137      	bne.n	8002266 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d132      	bne.n	8002266 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02d      	beq.n	8002266 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11a      	bne.n	800224e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020c 	bic.w	r2, r2, #12
 8002226:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d112      	bne.n	8002266 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
 800224c:	e00b      	b.n	8002266 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fe70 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	220c      	movs	r2, #12
 8002272:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_ADC_IRQHandler+0x1d0>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8138 	beq.w	8002504 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8132 	beq.w	8002504 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x208>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d106      	bne.n	80022ce <HAL_ADC_IRQHandler+0x216>
 80022c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03e      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 80022cc:	e005      	b.n	80022da <HAL_ADC_IRQHandler+0x222>
 80022ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d037      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e2:	d004      	beq.n	80022ee <HAL_ADC_IRQHandler+0x236>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d106      	bne.n	80022fc <HAL_ADC_IRQHandler+0x244>
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d027      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 80022fa:	e005      	b.n	8002308 <HAL_ADC_IRQHandler+0x250>
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b05      	cmp	r3, #5
 8002306:	d020      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002310:	d004      	beq.n	800231c <HAL_ADC_IRQHandler+0x264>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d106      	bne.n	800232a <HAL_ADC_IRQHandler+0x272>
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_ADC_IRQHandler+0x2bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2b09      	cmp	r3, #9
 8002326:	d010      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 8002328:	e005      	b.n	8002336 <HAL_ADC_IRQHandler+0x27e>
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_ADC_IRQHandler+0x2c0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2b09      	cmp	r3, #9
 8002334:	d009      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233e:	d004      	beq.n	800234a <HAL_ADC_IRQHandler+0x292>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <HAL_ADC_IRQHandler+0x2c4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d104      	bne.n	8002354 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e018      	b.n	8002386 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_IRQHandler+0x2b0>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a03      	ldr	r2, [pc, #12]	@ (8002370 <HAL_ADC_IRQHandler+0x2b8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d10b      	bne.n	8002380 <HAL_ADC_IRQHandler+0x2c8>
 8002368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800236c:	e009      	b.n	8002382 <HAL_ADC_IRQHandler+0x2ca>
 800236e:	bf00      	nop
 8002370:	50000100 	.word	0x50000100
 8002374:	50000300 	.word	0x50000300
 8002378:	50000700 	.word	0x50000700
 800237c:	50000400 	.word	0x50000400
 8002380:	4b92      	ldr	r3, [pc, #584]	@ (80025cc <HAL_ADC_IRQHandler+0x514>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 80b0 	bne.w	80024f6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80a3 	bne.w	80024f6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 809d 	bne.w	80024f6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8097 	beq.w	80024f6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_IRQHandler+0x324>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7e      	ldr	r2, [pc, #504]	@ (80025d0 <HAL_ADC_IRQHandler+0x518>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <HAL_ADC_IRQHandler+0x332>
 80023dc:	4b7d      	ldr	r3, [pc, #500]	@ (80025d4 <HAL_ADC_IRQHandler+0x51c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d03e      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 80023e8:	e005      	b.n	80023f6 <HAL_ADC_IRQHandler+0x33e>
 80023ea:	4b7b      	ldr	r3, [pc, #492]	@ (80025d8 <HAL_ADC_IRQHandler+0x520>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d037      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023fe:	d004      	beq.n	800240a <HAL_ADC_IRQHandler+0x352>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a72      	ldr	r2, [pc, #456]	@ (80025d0 <HAL_ADC_IRQHandler+0x518>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d106      	bne.n	8002418 <HAL_ADC_IRQHandler+0x360>
 800240a:	4b72      	ldr	r3, [pc, #456]	@ (80025d4 <HAL_ADC_IRQHandler+0x51c>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2b06      	cmp	r3, #6
 8002414:	d027      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 8002416:	e005      	b.n	8002424 <HAL_ADC_IRQHandler+0x36c>
 8002418:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_ADC_IRQHandler+0x520>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2b06      	cmp	r3, #6
 8002422:	d020      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800242c:	d004      	beq.n	8002438 <HAL_ADC_IRQHandler+0x380>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a67      	ldr	r2, [pc, #412]	@ (80025d0 <HAL_ADC_IRQHandler+0x518>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d106      	bne.n	8002446 <HAL_ADC_IRQHandler+0x38e>
 8002438:	4b66      	ldr	r3, [pc, #408]	@ (80025d4 <HAL_ADC_IRQHandler+0x51c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b07      	cmp	r3, #7
 8002442:	d010      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 8002444:	e005      	b.n	8002452 <HAL_ADC_IRQHandler+0x39a>
 8002446:	4b64      	ldr	r3, [pc, #400]	@ (80025d8 <HAL_ADC_IRQHandler+0x520>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2b07      	cmp	r3, #7
 8002450:	d009      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800245a:	d004      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3ae>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5a      	ldr	r2, [pc, #360]	@ (80025cc <HAL_ADC_IRQHandler+0x514>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d104      	bne.n	8002470 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e00f      	b.n	8002490 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002478:	d004      	beq.n	8002484 <HAL_ADC_IRQHandler+0x3cc>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a54      	ldr	r2, [pc, #336]	@ (80025d0 <HAL_ADC_IRQHandler+0x518>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d102      	bne.n	800248a <HAL_ADC_IRQHandler+0x3d2>
 8002484:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002488:	e000      	b.n	800248c <HAL_ADC_IRQHandler+0x3d4>
 800248a:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <HAL_ADC_IRQHandler+0x514>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d12d      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11a      	bne.n	80024de <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024b6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d112      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
 80024dc:	e00b      	b.n	80024f6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8c4 	bl	8002684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2260      	movs	r2, #96	@ 0x60
 8002502:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <HAL_ADC_IRQHandler+0x47a>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00c      	beq.n	8002532 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fa3b 	bl	80019a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2280      	movs	r2, #128	@ 0x80
 8002530:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_ADC_IRQHandler+0x4aa>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f8aa 	bl	80026ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002560:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_ADC_IRQHandler+0x4da>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f89c 	bl	80026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002590:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d04f      	beq.n	800263c <HAL_ADC_IRQHandler+0x584>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04a      	beq.n	800263c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e02d      	b.n	8002610 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025bc:	d004      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x510>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a03      	ldr	r2, [pc, #12]	@ (80025d0 <HAL_ADC_IRQHandler+0x518>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_IRQHandler+0x524>
 80025c8:	4b02      	ldr	r3, [pc, #8]	@ (80025d4 <HAL_ADC_IRQHandler+0x51c>)
 80025ca:	e008      	b.n	80025de <HAL_ADC_IRQHandler+0x526>
 80025cc:	50000400 	.word	0x50000400
 80025d0:	50000100 	.word	0x50000100
 80025d4:	50000300 	.word	0x50000300
 80025d8:	50000700 	.word	0x50000700
 80025dc:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <HAL_ADC_IRQHandler+0x5c8>)
 80025de:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10a      	bne.n	8002610 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80025fa:	2301      	movs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e007      	b.n	8002610 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff f9c0 	bl	80019b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2210      	movs	r2, #16
 800263a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d018      	beq.n	8002678 <HAL_ADC_IRQHandler+0x5c0>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002660:	f043 0208 	orr.w	r2, r3, #8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002670:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f810 	bl	8002698 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	50000700 	.word	0x50000700

08002684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b09b      	sub	sp, #108	@ 0x6c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x22>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e2c8      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x5b4>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 82ac 	bne.w	8002c66 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d81c      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	461a      	mov	r2, r3
 800272a:	231f      	movs	r3, #31
 800272c:	4093      	lsls	r3, r2
 800272e:	43db      	mvns	r3, r3
 8002730:	4019      	ands	r1, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
 800274e:	e063      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d81e      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	3b1e      	subs	r3, #30
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	4019      	ands	r1, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	3b1e      	subs	r3, #30
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34
 8002794:	e040      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0e      	cmp	r3, #14
 800279c:	d81e      	bhi.n	80027dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	3b3c      	subs	r3, #60	@ 0x3c
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4019      	ands	r1, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	3b3c      	subs	r3, #60	@ 0x3c
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80027da:	e01d      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3b5a      	subs	r3, #90	@ 0x5a
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4019      	ands	r1, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	3b5a      	subs	r3, #90	@ 0x5a
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80e5 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d91c      	bls.n	800286a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6999      	ldr	r1, [r3, #24]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	3b1e      	subs	r3, #30
 8002842:	2207      	movs	r2, #7
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	4019      	ands	r1, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6898      	ldr	r0, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	619a      	str	r2, [r3, #24]
 8002868:	e019      	b.n	800289e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	4019      	ands	r1, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6898      	ldr	r0, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d84f      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x28c>
 80028c0:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028fb 	.word	0x080028fb
 80028d0:	0800291d 	.word	0x0800291d
 80028d4:	0800293f 	.word	0x0800293f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028de:	4b99      	ldr	r3, [pc, #612]	@ (8002b44 <HAL_ADC_ConfigChannel+0x470>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	0691      	lsls	r1, r2, #26
 80028e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028ea:	430a      	orrs	r2, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028f6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028f8:	e07b      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002900:	4b90      	ldr	r3, [pc, #576]	@ (8002b44 <HAL_ADC_ConfigChannel+0x470>)
 8002902:	4013      	ands	r3, r2
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	0691      	lsls	r1, r2, #26
 800290a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002918:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800291a:	e06a      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002922:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_ADC_ConfigChannel+0x470>)
 8002924:	4013      	ands	r3, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	0691      	lsls	r1, r2, #26
 800292c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800292e:	430a      	orrs	r2, r1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800293a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800293c:	e059      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002944:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_ADC_ConfigChannel+0x470>)
 8002946:	4013      	ands	r3, r2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	0691      	lsls	r1, r2, #26
 800294e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002950:	430a      	orrs	r2, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800295c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800295e:	e048      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	069b      	lsls	r3, r3, #26
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002982:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800298a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	069b      	lsls	r3, r3, #26
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d107      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80029f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d108      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x33e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x33e>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x340>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 8131 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00f      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43da      	mvns	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002a40:	e049      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d91c      	bls.n	8002a9e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	3b1b      	subs	r3, #27
 8002a76:	2207      	movs	r2, #7
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4019      	ands	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6898      	ldr	r0, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b1b      	subs	r3, #27
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	619a      	str	r2, [r3, #24]
 8002a9c:	e01b      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6959      	ldr	r1, [r3, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4019      	ands	r1, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6898      	ldr	r0, [r3, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x416>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <HAL_ADC_ConfigChannel+0x474>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x41a>
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_ADC_ConfigChannel+0x478>)
 8002aec:	e000      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x41c>
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_ADC_ConfigChannel+0x47c>)
 8002af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b0a:	2b11      	cmp	r3, #17
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b1e:	2b12      	cmp	r3, #18
 8002b20:	f040 80ac 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80a5 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x480>
 8002b3c:	4b02      	ldr	r3, [pc, #8]	@ (8002b48 <HAL_ADC_ConfigChannel+0x474>)
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e023      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4b6>
 8002b42:	bf00      	nop
 8002b44:	83fff000 	.word	0x83fff000
 8002b48:	50000100 	.word	0x50000100
 8002b4c:	50000300 	.word	0x50000300
 8002b50:	50000700 	.word	0x50000700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4e      	ldr	r2, [pc, #312]	@ (8002c94 <HAL_ADC_ConfigChannel+0x5c0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d103      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x492>
 8002b5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e011      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4b6>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002c98 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x4a2>
 8002b70:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_ADC_ConfigChannel+0x5c8>)
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e009      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4b6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a48      	ldr	r2, [pc, #288]	@ (8002c9c <HAL_ADC_ConfigChannel+0x5c8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x4b2>
 8002b80:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e001      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4b6>
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x4d6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x4d6>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4d8>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d150      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x4fe>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x4fe>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x500>
 8002bd2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d13c      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d11d      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x548>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be8:	d118      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	0c9a      	lsrs	r2, r3, #18
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0c:	e002      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c1a:	e02e      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b11      	cmp	r3, #17
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x568>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c2c:	d106      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c38:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c3a:	e01e      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d11a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c50:	e013      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c64:	e00a      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c7a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	376c      	adds	r7, #108	@ 0x6c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000400 	.word	0x50000400
 8002c9c:	50000500 	.word	0x50000500
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b099      	sub	sp, #100	@ 0x64
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc0:	d102      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	e01a      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d103      	bne.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002cd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	e011      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a67      	ldr	r2, [pc, #412]	@ (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d102      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ce4:	4b66      	ldr	r3, [pc, #408]	@ (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	e009      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a64      	ldr	r2, [pc, #400]	@ (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d102      	bne.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cf4:	4b61      	ldr	r3, [pc, #388]	@ (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	e001      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b0      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0a9      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 808d 	bne.w	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 8086 	bne.w	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d44:	d004      	beq.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d50:	4b4c      	ldr	r3, [pc, #304]	@ (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002d52:	e000      	b.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d54:	4b4c      	ldr	r3, [pc, #304]	@ (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002d56:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d040      	beq.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d72:	035b      	lsls	r3, r3, #13
 8002d74:	430b      	orrs	r3, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d15c      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002dbe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d14b      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dcc:	f023 030f 	bic.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6811      	ldr	r1, [r2, #0]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dde:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002de0:	e03c      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d123      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002e30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e3e:	f023 030f 	bic.w	r3, r3, #15
 8002e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e44:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e46:	e009      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e5a:	e000      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3764      	adds	r7, #100	@ 0x64
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	50000100 	.word	0x50000100
 8002e7c:	50000400 	.word	0x50000400
 8002e80:	50000500 	.word	0x50000500
 8002e84:	50000300 	.word	0x50000300
 8002e88:	50000700 	.word	0x50000700

08002e8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d126      	bne.n	8002ef4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d115      	bne.n	8002eec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7fe f82d 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002ef2:	e004      	b.n	8002efe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7fe fd39 	bl	800198c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7fe fd33 	bl	80019b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <ADC_Enable+0x2e>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d143      	bne.n	8003012 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b22      	ldr	r3, [pc, #136]	@ (800301c <ADC_Enable+0xc4>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	f043 0210 	orr.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02f      	b.n	8003014 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fc4:	f7fe fcd6 	bl	8001974 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fca:	e01b      	b.n	8003004 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fcc:	f7fe fcd2 	bl	8001974 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d914      	bls.n	8003004 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d00d      	beq.n	8003004 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d1dc      	bne.n	8002fcc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	8000003f 	.word	0x8000003f

08003020 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d108      	bne.n	800304c <ADC_Disable+0x2c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <ADC_Disable+0x2c>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <ADC_Disable+0x2e>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d047      	beq.n	80030e2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030d 	and.w	r3, r3, #13
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10f      	bne.n	8003080 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0202 	orr.w	r2, r2, #2
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2203      	movs	r2, #3
 8003076:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003078:	f7fe fc7c 	bl	8001974 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800307e:	e029      	b.n	80030d4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e023      	b.n	80030e4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800309c:	f7fe fc6a 	bl	8001974 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d914      	bls.n	80030d4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d0dc      	beq.n	800309c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 809b 	beq.w	8003248 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003120:	d12a      	bne.n	8003178 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003126:	2b01      	cmp	r3, #1
 8003128:	d126      	bne.n	8003178 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800312e:	2b01      	cmp	r3, #1
 8003130:	d122      	bne.n	8003178 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003132:	230c      	movs	r3, #12
 8003134:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003136:	e014      	b.n	8003162 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4a46      	ldr	r2, [pc, #280]	@ (8003254 <ADC_ConversionStop+0x168>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d90d      	bls.n	800315c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e076      	b.n	800324a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3301      	adds	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d1e3      	bne.n	8003138 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2240      	movs	r2, #64	@ 0x40
 8003176:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b60      	cmp	r3, #96	@ 0x60
 800317c:	d015      	beq.n	80031aa <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d10e      	bne.n	80031aa <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0210 	orr.w	r2, r2, #16
 80031a8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d015      	beq.n	80031dc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d10e      	bne.n	80031dc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b60      	cmp	r3, #96	@ 0x60
 80031e0:	d005      	beq.n	80031ee <ADC_ConversionStop+0x102>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b6c      	cmp	r3, #108	@ 0x6c
 80031e6:	d105      	bne.n	80031f4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031e8:	230c      	movs	r3, #12
 80031ea:	617b      	str	r3, [r7, #20]
        break;
 80031ec:	e005      	b.n	80031fa <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031ee:	2308      	movs	r3, #8
 80031f0:	617b      	str	r3, [r7, #20]
        break;
 80031f2:	e002      	b.n	80031fa <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031f4:	2304      	movs	r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
        break;
 80031f8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031fa:	f7fe fbbb 	bl	8001974 <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003200:	e01b      	b.n	800323a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003202:	f7fe fbb7 	bl	8001974 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b0b      	cmp	r3, #11
 800320e:	d914      	bls.n	800323a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e007      	b.n	800324a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1dc      	bne.n	8003202 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	000993ff 	.word	0x000993ff

08003258 <__NVIC_SetPriorityGrouping>:
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4907      	ldr	r1, [pc, #28]	@ (80032f4 <__NVIC_EnableIRQ+0x38>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff4c 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033da:	f7ff ff61 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 80033de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f7ff ffb1 	bl	800334c <NVIC_EncodePriority>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff80 	bl	80032f8 <__NVIC_SetPriority>
}
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff54 	bl	80032bc <__NVIC_EnableIRQ>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e037      	b.n	80034a2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003448:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800344c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f9bd 	bl	8003804 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_DMA_Start_IT+0x20>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e04a      	b.n	8003560 <HAL_DMA_Start_IT+0xb6>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d13a      	bne.n	8003552 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f950 	bl	80037a6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 020e 	orr.w	r2, r2, #14
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00f      	b.n	8003540 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 020a 	orr.w	r2, r2, #10
 800352e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e005      	b.n	800355e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800355e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e02e      	b.n	80035d8 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003580:	2b02      	cmp	r3, #2
 8003582:	d008      	beq.n	8003596 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e020      	b.n	80035d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 020e 	bic.w	r2, r2, #14
 80035a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d005      	beq.n	8003606 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e027      	b.n	8003656 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 020e 	bic.w	r2, r2, #14
 8003614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
    }
  }
  return status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	2204      	movs	r2, #4
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	2104      	movs	r1, #4
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d06a      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	e065      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2202      	movs	r2, #2
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_IRQHandler+0xdc>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d027      	beq.n	800373c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 020a 	bic.w	r2, r2, #10
 8003708:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	2102      	movs	r1, #2
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d035      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800373a:	e030      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2208      	movs	r2, #8
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d028      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d023      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 020e 	bic.w	r2, r2, #14
 8003764:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    }
  }
}
 800379c:	e7ff      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d108      	bne.n	80037e6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e4:	e007      	b.n	80037f6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <DMA_CalcBaseAndBitshift+0x60>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d80f      	bhi.n	8003838 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <DMA_CalcBaseAndBitshift+0x64>)
 8003820:	4413      	add	r3, r2
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <DMA_CalcBaseAndBitshift+0x68>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <DMA_CalcBaseAndBitshift+0x6c>)
 8003834:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003836:	e00e      	b.n	8003856 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <DMA_CalcBaseAndBitshift+0x70>)
 8003840:	4413      	add	r3, r2
 8003842:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <DMA_CalcBaseAndBitshift+0x68>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	009a      	lsls	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <DMA_CalcBaseAndBitshift+0x74>)
 8003854:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40020407 	.word	0x40020407
 8003868:	bffdfff8 	.word	0xbffdfff8
 800386c:	cccccccd 	.word	0xcccccccd
 8003870:	40020000 	.word	0x40020000
 8003874:	bffdfbf8 	.word	0xbffdfbf8
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388a:	e160      	b.n	8003b4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	4013      	ands	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8152 	beq.w	8003b48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d005      	beq.n	80038bc <HAL_GPIO_Init+0x40>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d130      	bne.n	800391e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f2:	2201      	movs	r2, #1
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0201 	and.w	r2, r3, #1
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b03      	cmp	r3, #3
 8003928:	d017      	beq.n	800395a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d123      	bne.n	80039ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	6939      	ldr	r1, [r7, #16]
 80039aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0203 	and.w	r2, r3, #3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80ac 	beq.w	8003b48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b6c <HAL_GPIO_Init+0x2f0>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b6c <HAL_GPIO_Init+0x2f0>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6193      	str	r3, [r2, #24]
 80039fc:	4b5b      	ldr	r3, [pc, #364]	@ (8003b6c <HAL_GPIO_Init+0x2f0>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a08:	4a59      	ldr	r2, [pc, #356]	@ (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a32:	d025      	beq.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a4f      	ldr	r2, [pc, #316]	@ (8003b74 <HAL_GPIO_Init+0x2f8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01f      	beq.n	8003a7c <HAL_GPIO_Init+0x200>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8003b78 <HAL_GPIO_Init+0x2fc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d019      	beq.n	8003a78 <HAL_GPIO_Init+0x1fc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4d      	ldr	r2, [pc, #308]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_GPIO_Init+0x1f8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00d      	beq.n	8003a70 <HAL_GPIO_Init+0x1f4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a4b      	ldr	r2, [pc, #300]	@ (8003b84 <HAL_GPIO_Init+0x308>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1f0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b88 <HAL_GPIO_Init+0x30c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_GPIO_Init+0x1ec>
 8003a64:	2306      	movs	r3, #6
 8003a66:	e00c      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a68:	2307      	movs	r3, #7
 8003a6a:	e00a      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a6c:	2305      	movs	r3, #5
 8003a6e:	e008      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a70:	2304      	movs	r3, #4
 8003a72:	e006      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a74:	2303      	movs	r3, #3
 8003a76:	e004      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e002      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a80:	2300      	movs	r3, #0
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	f002 0203 	and.w	r2, r2, #3
 8003a88:	0092      	lsls	r2, r2, #2
 8003a8a:	4093      	lsls	r3, r2
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a92:	4937      	ldr	r1, [pc, #220]	@ (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	3302      	adds	r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ac4:	4a31      	ldr	r2, [pc, #196]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aca:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003aee:	4a27      	ldr	r2, [pc, #156]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b18:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b42:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f ae97 	bne.w	800388c <HAL_GPIO_Init+0x10>
  }
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40010000 	.word	0x40010000
 8003b74:	48000400 	.word	0x48000400
 8003b78:	48000800 	.word	0x48000800
 8003b7c:	48000c00 	.word	0x48000c00
 8003b80:	48001000 	.word	0x48001000
 8003b84:	48001400 	.word	0x48001400
 8003b88:	48001800 	.word	0x48001800
 8003b8c:	40010400 	.word	0x40010400

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ba0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f001 b80a 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8161 	beq.w	8003e8e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bcc:	4bae      	ldr	r3, [pc, #696]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bd8:	4bab      	ldr	r3, [pc, #684]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x104>
 8003be4:	4ba8      	ldr	r3, [pc, #672]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d150      	bne.n	8003c94 <HAL_RCC_OscConfig+0x104>
 8003bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c12:	d802      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x8a>
 8003c14:	4b9c      	ldr	r3, [pc, #624]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0xb6>
 8003c1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c1e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003c2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c32:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003c36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003c42:	4b91      	ldr	r3, [pc, #580]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c4a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003c4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003c5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c5e:	fab2 f282 	clz	r2, r2
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f042 0220 	orr.w	r2, r2, #32
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8108 	beq.w	8003e8c <HAL_RCC_OscConfig+0x2fc>
 8003c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 80ff 	bne.w	8003e8c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f000 bf9b 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x124>
 8003ca6:	4b78      	ldr	r3, [pc, #480]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a77      	ldr	r2, [pc, #476]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e036      	b.n	8003d22 <HAL_RCC_OscConfig+0x192>
 8003cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0x14e>
 8003cc4:	4b70      	ldr	r3, [pc, #448]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6f      	ldr	r2, [pc, #444]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6c      	ldr	r2, [pc, #432]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e021      	b.n	8003d22 <HAL_RCC_OscConfig+0x192>
 8003cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x17a>
 8003cf0:	4b65      	ldr	r3, [pc, #404]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a64      	ldr	r2, [pc, #400]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b62      	ldr	r3, [pc, #392]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a61      	ldr	r2, [pc, #388]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x192>
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b5c      	ldr	r3, [pc, #368]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d054      	beq.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fd fe1f 	bl	8001974 <HAL_GetTick>
 8003d36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fe1a 	bl	8001974 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d902      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	f000 bf3c 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 8003d52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d56:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003d66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d72:	d802      	bhi.n	8003d7a <HAL_RCC_OscConfig+0x1ea>
 8003d74:	4b44      	ldr	r3, [pc, #272]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x216>
 8003d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d92:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003daa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003dae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003dba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f042 0220 	orr.w	r2, r2, #32
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f002 021f 	and.w	r2, r2, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0b0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1ac>
 8003dda:	e058      	b.n	8003e8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fdca 	bl	8001974 <HAL_GetTick>
 8003de0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de6:	f7fd fdc5 	bl	8001974 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	@ 0x64
 8003df4:	d902      	bls.n	8003dfc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	f000 bee7 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 8003dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e00:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003e10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e1c:	d802      	bhi.n	8003e24 <HAL_RCC_OscConfig+0x294>
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e015      	b.n	8003e50 <HAL_RCC_OscConfig+0x2c0>
 8003e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e28:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e3c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <HAL_RCC_OscConfig+0x2f8>)
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e54:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003e58:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003e5c:	fa92 f2a2 	rbit	r2, r2
 8003e60:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003e64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f002 021f 	and.w	r2, r2, #31
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1b0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x256>
 8003e84:	e003      	b.n	8003e8e <HAL_RCC_OscConfig+0x2fe>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 816d 	beq.w	800417e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ea4:	4bcd      	ldr	r3, [pc, #820]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003eb0:	4bca      	ldr	r3, [pc, #808]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d16e      	bne.n	8003f9a <HAL_RCC_OscConfig+0x40a>
 8003ebc:	4bc7      	ldr	r3, [pc, #796]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec8:	d167      	bne.n	8003f9a <HAL_RCC_OscConfig+0x40a>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003edc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ee8:	d802      	bhi.n	8003ef0 <HAL_RCC_OscConfig+0x360>
 8003eea:	4bbc      	ldr	r3, [pc, #752]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	e013      	b.n	8003f18 <HAL_RCC_OscConfig+0x388>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003f02:	2302      	movs	r3, #2
 8003f04:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003f08:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003f14:	4bb1      	ldr	r3, [pc, #708]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003f1e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003f22:	fa92 f2a2 	rbit	r2, r2
 8003f26:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003f2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f2e:	fab2 f282 	clz	r2, r2
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f002 021f 	and.w	r2, r2, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCC_OscConfig+0x3d0>
 8003f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f000 be35 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b9e      	ldr	r3, [pc, #632]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	21f8      	movs	r1, #248	@ 0xf8
 8003f76:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003f7e:	fa91 f1a1 	rbit	r1, r1
 8003f82:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003f86:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003f8a:	fab1 f181 	clz	r1, r1
 8003f8e:	b2c9      	uxtb	r1, r1
 8003f90:	408b      	lsls	r3, r1
 8003f92:	4992      	ldr	r1, [pc, #584]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f98:	e0f1      	b.n	800417e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8083 	beq.w	80040b2 <HAL_RCC_OscConfig+0x522>
 8003fac:	2301      	movs	r3, #1
 8003fae:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003fbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fccc 	bl	8001974 <HAL_GetTick>
 8003fdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7fd fcc7 	bl	8001974 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d902      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	f000 bde9 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800400a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b3f      	cmp	r3, #63	@ 0x3f
 8004016:	d802      	bhi.n	800401e <HAL_RCC_OscConfig+0x48e>
 8004018:	4b70      	ldr	r3, [pc, #448]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	e013      	b.n	8004046 <HAL_RCC_OscConfig+0x4b6>
 800401e:	2302      	movs	r3, #2
 8004020:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004030:	2302      	movs	r3, #2
 8004032:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004036:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004042:	4b66      	ldr	r3, [pc, #408]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	2202      	movs	r2, #2
 8004048:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800404c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004050:	fa92 f2a2 	rbit	r2, r2
 8004054:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004058:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0b4      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b58      	ldr	r3, [pc, #352]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004084:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	21f8      	movs	r1, #248	@ 0xf8
 800408e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004096:	fa91 f1a1 	rbit	r1, r1
 800409a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800409e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80040a2:	fab1 f181 	clz	r1, r1
 80040a6:	b2c9      	uxtb	r1, r1
 80040a8:	408b      	lsls	r3, r1
 80040aa:	494c      	ldr	r1, [pc, #304]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
 80040b0:	e065      	b.n	800417e <HAL_RCC_OscConfig+0x5ee>
 80040b2:	2301      	movs	r3, #1
 80040b4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80040c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	461a      	mov	r2, r3
 80040da:	2300      	movs	r3, #0
 80040dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fd fc49 	bl	8001974 <HAL_GetTick>
 80040e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fd fc44 	bl	8001974 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	f000 bd66 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 80040fe:	2302      	movs	r3, #2
 8004100:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004110:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b3f      	cmp	r3, #63	@ 0x3f
 800411c:	d802      	bhi.n	8004124 <HAL_RCC_OscConfig+0x594>
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	e013      	b.n	800414c <HAL_RCC_OscConfig+0x5bc>
 8004124:	2302      	movs	r3, #2
 8004126:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004136:	2302      	movs	r3, #2
 8004138:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800413c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004148:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <HAL_RCC_OscConfig+0x64c>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	2202      	movs	r2, #2
 800414e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004152:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004156:	fa92 f2a2 	rbit	r2, r2
 800415a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800415e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004162:	fab2 f282 	clz	r2, r2
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f042 0220 	orr.w	r2, r2, #32
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	f002 021f 	and.w	r2, r2, #31
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1b4      	bne.n	80040e8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004182:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8119 	beq.w	80043c6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8082 	beq.w	80042aa <HAL_RCC_OscConfig+0x71a>
 80041a6:	2301      	movs	r3, #1
 80041a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80041b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCC_OscConfig+0x650>)
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	2301      	movs	r3, #1
 80041ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd fbd0 	bl	8001974 <HAL_GetTick>
 80041d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d8:	e00f      	b.n	80041fa <HAL_RCC_OscConfig+0x66a>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fd fbc6 	bl	8001974 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d902      	bls.n	80041fa <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	f000 bce8 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 80041fa:	2302      	movs	r3, #2
 80041fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004204:	fa93 f2a3 	rbit	r2, r3
 8004208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800420c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800421a:	2202      	movs	r2, #2
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	fa93 f2a3 	rbit	r2, r3
 800422c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800423a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800423e:	2202      	movs	r2, #2
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004246:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004254:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004258:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	4bb0      	ldr	r3, [pc, #704]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 800425c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800425e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004266:	2102      	movs	r1, #2
 8004268:	6019      	str	r1, [r3, #0]
 800426a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800426e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f1a3 	rbit	r1, r3
 8004278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800427c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004280:	6019      	str	r1, [r3, #0]
  return result;
 8004282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004286:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d09d      	beq.n	80041e4 <HAL_RCC_OscConfig+0x654>
 80042a8:	e08d      	b.n	80043c6 <HAL_RCC_OscConfig+0x836>
 80042aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	fa93 f2a3 	rbit	r2, r3
 80042c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042cc:	601a      	str	r2, [r3, #0]
  return result;
 80042ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004520 <HAL_RCC_OscConfig+0x990>)
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fd fb42 	bl	8001974 <HAL_GetTick>
 80042f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fd fb3d 	bl	8001974 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	f000 bc5f 	b.w	8004bca <HAL_RCC_OscConfig+0x103a>
 800430c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004310:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004314:	2202      	movs	r2, #2
 8004316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800431c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800432a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800434e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004358:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004364:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004376:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004378:	4b68      	ldr	r3, [pc, #416]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 800437a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800437c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004380:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004384:	2102      	movs	r1, #2
 8004386:	6019      	str	r1, [r3, #0]
 8004388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800438c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	fa93 f1a3 	rbit	r1, r3
 8004396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800439a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800439e:	6019      	str	r1, [r3, #0]
  return result;
 80043a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d197      	bne.n	80042f6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 819c 	beq.w	8004714 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b4e      	ldr	r3, [pc, #312]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a4a      	ldr	r2, [pc, #296]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]
 80043fa:	4b48      	ldr	r3, [pc, #288]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004414:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <HAL_RCC_OscConfig+0x994>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11a      	bne.n	800445e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004428:	4b3e      	ldr	r3, [pc, #248]	@ (8004524 <HAL_RCC_OscConfig+0x994>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3d      	ldr	r2, [pc, #244]	@ (8004524 <HAL_RCC_OscConfig+0x994>)
 800442e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004432:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004434:	f7fd fa9e 	bl	8001974 <HAL_GetTick>
 8004438:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	e009      	b.n	8004452 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd fa99 	bl	8001974 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e3bb      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b34      	ldr	r3, [pc, #208]	@ (8004524 <HAL_RCC_OscConfig+0x994>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ef      	beq.n	800443e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004462:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d106      	bne.n	800447c <HAL_RCC_OscConfig+0x8ec>
 800446e:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a2a      	ldr	r2, [pc, #168]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6213      	str	r3, [r2, #32]
 800447a:	e035      	b.n	80044e8 <HAL_RCC_OscConfig+0x958>
 800447c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004480:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10c      	bne.n	80044a6 <HAL_RCC_OscConfig+0x916>
 800448c:	4b23      	ldr	r3, [pc, #140]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4a22      	ldr	r2, [pc, #136]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	6213      	str	r3, [r2, #32]
 8004498:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	6213      	str	r3, [r2, #32]
 80044a4:	e020      	b.n	80044e8 <HAL_RCC_OscConfig+0x958>
 80044a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x940>
 80044b6:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b16      	ldr	r3, [pc, #88]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a15      	ldr	r2, [pc, #84]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x958>
 80044d0:	4b12      	ldr	r3, [pc, #72]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <HAL_RCC_OscConfig+0x98c>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8085 	beq.w	8004604 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fa3b 	bl	8001974 <HAL_GetTick>
 80044fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e011      	b.n	8004528 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd fa36 	bl	8001974 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d907      	bls.n	8004528 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e356      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 800451c:	40021000 	.word	0x40021000
 8004520:	10908120 	.word	0x10908120
 8004524:	40007000 	.word	0x40007000
 8004528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800452c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004530:	2202      	movs	r2, #2
 8004532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004538:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004546:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004550:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004554:	2202      	movs	r2, #2
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800455c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	fa93 f2a3 	rbit	r2, r3
 8004566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800456a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800456e:	601a      	str	r2, [r3, #0]
  return result;
 8004570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004574:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004578:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_RCC_OscConfig+0xa00>
 800458a:	4b98      	ldr	r3, [pc, #608]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	e013      	b.n	80045b8 <HAL_RCC_OscConfig+0xa28>
 8004590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004594:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004598:	2202      	movs	r2, #2
 800459a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	fa93 f2a3 	rbit	r2, r3
 80045aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	4b8d      	ldr	r3, [pc, #564]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045c0:	2102      	movs	r1, #2
 80045c2:	6011      	str	r1, [r2, #0]
 80045c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	fa92 f1a2 	rbit	r1, r2
 80045d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045d6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80045da:	6011      	str	r1, [r2, #0]
  return result;
 80045dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	fab2 f282 	clz	r2, r2
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f002 021f 	and.w	r2, r2, #31
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f202 	lsl.w	r2, r1, r2
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d080      	beq.n	8004504 <HAL_RCC_OscConfig+0x974>
 8004602:	e07d      	b.n	8004700 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004604:	f7fd f9b6 	bl	8001974 <HAL_GetTick>
 8004608:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00b      	b.n	8004626 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fd f9b1 	bl	8001974 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e2d1      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 8004626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800462e:	2202      	movs	r2, #2
 8004630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004636:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	fa93 f2a3 	rbit	r2, r3
 8004640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004644:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800464e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004652:	2202      	movs	r2, #2
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800465a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	fa93 f2a3 	rbit	r2, r3
 8004664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004668:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800466c:	601a      	str	r2, [r3, #0]
  return result;
 800466e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004672:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004676:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <HAL_RCC_OscConfig+0xafe>
 8004688:	4b58      	ldr	r3, [pc, #352]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	e013      	b.n	80046b6 <HAL_RCC_OscConfig+0xb26>
 800468e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004692:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004696:	2202      	movs	r2, #2
 8004698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800469e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	fa93 f2a3 	rbit	r2, r3
 80046a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ac:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	4b4e      	ldr	r3, [pc, #312]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046be:	2102      	movs	r1, #2
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	fa92 f1a2 	rbit	r1, r2
 80046d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046d4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80046d8:	6011      	str	r1, [r2, #0]
  return result;
 80046da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046de:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	fab2 f282 	clz	r2, r2
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	f002 021f 	and.w	r2, r2, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f202 	lsl.w	r2, r1, r2
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d186      	bne.n	800460e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004700:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004708:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4a37      	ldr	r2, [pc, #220]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004712:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004718:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8251 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004726:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b08      	cmp	r3, #8
 8004730:	f000 820f 	beq.w	8004b52 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004738:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b02      	cmp	r3, #2
 8004742:	f040 8165 	bne.w	8004a10 <HAL_RCC_OscConfig+0xe80>
 8004746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800474a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800474e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004758:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f2a3 	rbit	r2, r3
 8004762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004766:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800476a:	601a      	str	r2, [r3, #0]
  return result;
 800476c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004770:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004774:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004780:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd f8f2 	bl	8001974 <HAL_GetTick>
 8004790:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004794:	e009      	b.n	80047aa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd f8ed 	bl	8001974 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e20f      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 80047aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047ce:	601a      	str	r2, [r3, #0]
  return result;
 80047d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80047e2:	d805      	bhi.n	80047f0 <HAL_RCC_OscConfig+0xc60>
 80047e4:	4b01      	ldr	r3, [pc, #4]	@ (80047ec <HAL_RCC_OscConfig+0xc5c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	e02a      	b.n	8004840 <HAL_RCC_OscConfig+0xcb0>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80047f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004802:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	fa93 f2a3 	rbit	r2, r3
 800480c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004810:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800481a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800481e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004828:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	fa93 f2a3 	rbit	r2, r3
 8004832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004836:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	4bca      	ldr	r3, [pc, #808]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004844:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004848:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004852:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	fa92 f1a2 	rbit	r1, r2
 800485c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004860:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004864:	6011      	str	r1, [r2, #0]
  return result;
 8004866:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800486a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	fab2 f282 	clz	r2, r2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	f042 0220 	orr.w	r2, r2, #32
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	f002 021f 	and.w	r2, r2, #31
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f202 	lsl.w	r2, r1, r2
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d184      	bne.n	8004796 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800488c:	4bb6      	ldr	r3, [pc, #728]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004898:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	49b1      	ldr	r1, [pc, #708]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80048a6:	4bb0      	ldr	r3, [pc, #704]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80048ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a19      	ldr	r1, [r3, #32]
 80048ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	430b      	orrs	r3, r1
 80048c8:	49a7      	ldr	r1, [pc, #668]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
 80048ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	fa93 f2a3 	rbit	r2, r3
 80048ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80048f2:	601a      	str	r2, [r3, #0]
  return result;
 80048f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80048fc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004908:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	461a      	mov	r2, r3
 8004910:	2301      	movs	r3, #1
 8004912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fd f82e 	bl	8001974 <HAL_GetTick>
 8004918:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800491c:	e009      	b.n	8004932 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491e:	f7fd f829 	bl	8001974 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e14b      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 8004932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004936:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800493a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800493e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004944:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	fa93 f2a3 	rbit	r2, r3
 800494e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004952:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004956:	601a      	str	r2, [r3, #0]
  return result;
 8004958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800495c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b3f      	cmp	r3, #63	@ 0x3f
 800496a:	d802      	bhi.n	8004972 <HAL_RCC_OscConfig+0xde2>
 800496c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	e027      	b.n	80049c2 <HAL_RCC_OscConfig+0xe32>
 8004972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004976:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800497a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800497e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004992:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800499c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	fa93 f2a3 	rbit	r2, r3
 80049b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049b8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049ca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049ce:	6011      	str	r1, [r2, #0]
 80049d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	fa92 f1a2 	rbit	r1, r2
 80049de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049e2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80049e6:	6011      	str	r1, [r2, #0]
  return result;
 80049e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049ec:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	fab2 f282 	clz	r2, r2
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	f042 0220 	orr.w	r2, r2, #32
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	f002 021f 	and.w	r2, r2, #31
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d087      	beq.n	800491e <HAL_RCC_OscConfig+0xd8e>
 8004a0e:	e0db      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1038>
 8004a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fa93 f2a3 	rbit	r2, r3
 8004a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a34:	601a      	str	r2, [r3, #0]
  return result;
 8004a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fc ff8d 	bl	8001974 <HAL_GetTick>
 8004a5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5e:	e009      	b.n	8004a74 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc ff88 	bl	8001974 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0aa      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 8004a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fa93 f2a3 	rbit	r2, r3
 8004a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a98:	601a      	str	r2, [r3, #0]
  return result;
 8004a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004aa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa4:	fab3 f383 	clz	r3, r3
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8004aac:	d802      	bhi.n	8004ab4 <HAL_RCC_OscConfig+0xf24>
 8004aae:	4b2e      	ldr	r3, [pc, #184]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	e027      	b.n	8004b04 <HAL_RCC_OscConfig+0xf74>
 8004ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ab8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ac6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ad4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ade:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	fa93 f2a3 	rbit	r2, r3
 8004af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004afa:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCC_OscConfig+0xfd8>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	fa92 f1a2 	rbit	r1, r2
 8004b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b24:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004b28:	6011      	str	r1, [r2, #0]
  return result;
 8004b2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b2e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	fab2 f282 	clz	r2, r2
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f042 0220 	orr.w	r2, r2, #32
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	f002 021f 	and.w	r2, r2, #31
 8004b44:	2101      	movs	r1, #1
 8004b46:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d187      	bne.n	8004a60 <HAL_RCC_OscConfig+0xed0>
 8004b50:	e03a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d104      	bne.n	8004b6c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e031      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <HAL_RCC_OscConfig+0x1044>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004b74:	4b17      	ldr	r3, [pc, #92]	@ (8004bd4 <HAL_RCC_OscConfig+0x1044>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b80:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d117      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b98:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bb0:	f003 020f 	and.w	r2, r3, #15
 8004bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b09e      	sub	sp, #120	@ 0x78
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e154      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b89      	ldr	r3, [pc, #548]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d910      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b86      	ldr	r3, [pc, #536]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 0207 	bic.w	r2, r3, #7
 8004c06:	4984      	ldr	r1, [pc, #528]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b82      	ldr	r3, [pc, #520]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e13c      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4978      	ldr	r1, [pc, #480]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80cd 	beq.w	8004de6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d137      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xec>
 8004c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c6c:	d802      	bhi.n	8004c74 <HAL_RCC_ClockConfig+0x9c>
 8004c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	e00f      	b.n	8004c94 <HAL_RCC_ClockConfig+0xbc>
 8004c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c86:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c90:	4b62      	ldr	r3, [pc, #392]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c9c:	fa92 f2a2 	rbit	r2, r2
 8004ca0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004ca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ca4:	fab2 f282 	clz	r2, r2
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	f042 0220 	orr.w	r2, r2, #32
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	f002 021f 	and.w	r2, r2, #31
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d171      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0ea      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d137      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x164>
 8004ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ce4:	d802      	bhi.n	8004cec <HAL_RCC_ClockConfig+0x114>
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	e00f      	b.n	8004d0c <HAL_RCC_ClockConfig+0x134>
 8004cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d08:	4b44      	ldr	r3, [pc, #272]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d10:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d14:	fa92 f2a2 	rbit	r2, r2
 8004d18:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d1c:	fab2 f282 	clz	r2, r2
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	f042 0220 	orr.w	r2, r2, #32
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	f002 021f 	and.w	r2, r2, #31
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d135      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0ae      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4a:	fab3 f383 	clz	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d52:	d802      	bhi.n	8004d5a <HAL_RCC_ClockConfig+0x182>
 8004d54:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	e00d      	b.n	8004d76 <HAL_RCC_ClockConfig+0x19e>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d66:	2302      	movs	r3, #2
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	2202      	movs	r2, #2
 8004d78:	61ba      	str	r2, [r7, #24]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	fa92 f2a2 	rbit	r2, r2
 8004d80:	617a      	str	r2, [r7, #20]
  return result;
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	fab2 f282 	clz	r2, r2
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	f042 0220 	orr.w	r2, r2, #32
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f002 021f 	and.w	r2, r2, #31
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f202 	lsl.w	r2, r1, r2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e07a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 0203 	bic.w	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	491a      	ldr	r1, [pc, #104]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db6:	f7fc fddd 	bl	8001974 <HAL_GetTick>
 8004dba:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbe:	f7fc fdd9 	bl	8001974 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e062      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd4:	4b11      	ldr	r3, [pc, #68]	@ (8004e1c <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 020c 	and.w	r2, r3, #12
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d1eb      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d215      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df4:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	4906      	ldr	r1, [pc, #24]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <HAL_RCC_ClockConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d006      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e041      	b.n	8004e9a <HAL_RCC_ClockConfig+0x2c2>
 8004e16:	bf00      	nop
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	491a      	ldr	r1, [pc, #104]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4a:	4b16      	ldr	r3, [pc, #88]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4912      	ldr	r1, [pc, #72]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e5e:	f000 f829 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004e62:	4601      	mov	r1, r0
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e6c:	22f0      	movs	r2, #240	@ 0xf0
 8004e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	fa92 f2a2 	rbit	r2, r2
 8004e76:	60fa      	str	r2, [r7, #12]
  return result;
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	fab2 f282 	clz	r2, r2
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	40d3      	lsrs	r3, r2
 8004e82:	4a09      	ldr	r2, [pc, #36]	@ (8004ea8 <HAL_RCC_ClockConfig+0x2d0>)
 8004e84:	5cd3      	ldrb	r3, [r2, r3]
 8004e86:	fa21 f303 	lsr.w	r3, r1, r3
 8004e8a:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <HAL_RCC_ClockConfig+0x2d4>)
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <HAL_RCC_ClockConfig+0x2d8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fc fad4 	bl	8001440 <HAL_InitTick>
  
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3778      	adds	r7, #120	@ 0x78
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800c698 	.word	0x0800c698
 8004eac:	20000000 	.word	0x20000000
 8004eb0:	20000004 	.word	0x20000004

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ece:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x36>
 8004ee2:	e029      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ee6:	613b      	str	r3, [r7, #16]
      break;
 8004ee8:	e029      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ef8:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f10:	4a0f      	ldr	r2, [pc, #60]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e007      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f22:	4a0b      	ldr	r2, [pc, #44]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	613b      	str	r3, [r7, #16]
      break;
 8004f36:	e002      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f3a:	613b      	str	r3, [r7, #16]
      break;
 8004f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3e:	693b      	ldr	r3, [r7, #16]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	007a1200 	.word	0x007a1200
 8004f54:	0800c6b0 	.word	0x0800c6b0
 8004f58:	0800c6c0 	.word	0x0800c6c0

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000000 	.word	0x20000000

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f7a:	f7ff ffef 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f7e:	4601      	mov	r1, r0
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f88:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	fa92 f2a2 	rbit	r2, r2
 8004f94:	603a      	str	r2, [r7, #0]
  return result;
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	fab2 f282 	clz	r2, r2
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	40d3      	lsrs	r3, r2
 8004fa0:	4a04      	ldr	r2, [pc, #16]	@ (8004fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fa2:	5cd3      	ldrb	r3, [r2, r3]
 8004fa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	0800c6a8 	.word	0x0800c6a8

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004fbe:	f7ff ffcd 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004fcc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	fa92 f2a2 	rbit	r2, r2
 8004fd8:	603a      	str	r2, [r7, #0]
  return result;
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	fab2 f282 	clz	r2, r2
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	40d3      	lsrs	r3, r2
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	0800c6a8 	.word	0x0800c6a8

08004ffc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	220f      	movs	r2, #15
 800500a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800500c:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCC_GetClockConfig+0x5c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0203 	and.w	r2, r3, #3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005018:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <HAL_RCC_GetClockConfig+0x5c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005024:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	08db      	lsrs	r3, r3, #3
 8005036:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <HAL_RCC_GetClockConfig+0x60>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0207 	and.w	r2, r3, #7
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	601a      	str	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	40022000 	.word	0x40022000

08005060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b092      	sub	sp, #72	@ 0x48
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80d2 	beq.w	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005084:	4b4d      	ldr	r3, [pc, #308]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10e      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a49      	ldr	r2, [pc, #292]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	61d3      	str	r3, [r2, #28]
 800509c:	4b47      	ldr	r3, [pc, #284]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b44      	ldr	r3, [pc, #272]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d118      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ba:	4b41      	ldr	r3, [pc, #260]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a40      	ldr	r2, [pc, #256]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c6:	f7fc fc55 	bl	8001974 <HAL_GetTick>
 80050ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	e008      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fc fc51 	bl	8001974 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b64      	cmp	r3, #100	@ 0x64
 80050da:	d901      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e1d4      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	4b37      	ldr	r3, [pc, #220]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ec:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8082 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005108:	429a      	cmp	r2, r3
 800510a:	d07a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510c:	4b2b      	ldr	r3, [pc, #172]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	461a      	mov	r2, r3
 8005136:	2301      	movs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800513e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	461a      	mov	r2, r3
 800515a:	2300      	movs	r3, #0
 800515c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800515e:	4a17      	ldr	r2, [pc, #92]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d049      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fc fc01 	bl	8001974 <HAL_GetTick>
 8005172:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fc fbfd 	bl	8001974 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e17e      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800518c:	2302      	movs	r3, #2
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
 8005198:	2302      	movs	r3, #2
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
  return result;
 80051a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80051b6:	4b01      	ldr	r3, [pc, #4]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	e00d      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40007000 	.word	0x40007000
 80051c4:	10908100 	.word	0x10908100
 80051c8:	2302      	movs	r3, #2
 80051ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	4b9a      	ldr	r3, [pc, #616]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	2202      	movs	r2, #2
 80051da:	613a      	str	r2, [r7, #16]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	fa92 f2a2 	rbit	r2, r2
 80051e2:	60fa      	str	r2, [r7, #12]
  return result;
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	fab2 f282 	clz	r2, r2
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	f002 021f 	and.w	r2, r2, #31
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f202 	lsl.w	r2, r1, r2
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0b9      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005202:	4b8f      	ldr	r3, [pc, #572]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	498c      	ldr	r1, [pc, #560]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005214:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b88      	ldr	r3, [pc, #544]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	4a87      	ldr	r2, [pc, #540]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005226:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005234:	4b82      	ldr	r3, [pc, #520]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	f023 0203 	bic.w	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	497f      	ldr	r1, [pc, #508]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	4313      	orrs	r3, r2
 8005244:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005252:	4b7b      	ldr	r3, [pc, #492]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4978      	ldr	r1, [pc, #480]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005270:	4b73      	ldr	r3, [pc, #460]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	4970      	ldr	r1, [pc, #448]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800528e:	4b6c      	ldr	r3, [pc, #432]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	f023 0210 	bic.w	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4969      	ldr	r1, [pc, #420]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052ac:	4b64      	ldr	r3, [pc, #400]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	4961      	ldr	r1, [pc, #388]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	f023 0220 	bic.w	r2, r3, #32
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	495a      	ldr	r1, [pc, #360]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052e8:	4b55      	ldr	r3, [pc, #340]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	4952      	ldr	r1, [pc, #328]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005306:	4b4e      	ldr	r3, [pc, #312]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	494b      	ldr	r1, [pc, #300]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005314:	4313      	orrs	r3, r2
 8005316:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005324:	4b46      	ldr	r3, [pc, #280]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	4943      	ldr	r1, [pc, #268]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005342:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534e:	493c      	ldr	r1, [pc, #240]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005350:	4313      	orrs	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005360:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	4934      	ldr	r1, [pc, #208]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800537e:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	492d      	ldr	r1, [pc, #180]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538c:	4313      	orrs	r3, r2
 800538e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800539c:	4b28      	ldr	r3, [pc, #160]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a8:	4925      	ldr	r1, [pc, #148]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80053ba:	4b21      	ldr	r3, [pc, #132]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	491e      	ldr	r1, [pc, #120]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80053d8:	4b19      	ldr	r3, [pc, #100]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	4916      	ldr	r1, [pc, #88]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80053f6:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	490f      	ldr	r1, [pc, #60]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005404:	4313      	orrs	r3, r2
 8005406:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005414:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005420:	4907      	ldr	r1, [pc, #28]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	4313      	orrs	r3, r2
 8005424:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005432:	4b03      	ldr	r3, [pc, #12]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005446:	4913      	ldr	r1, [pc, #76]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005448:	4313      	orrs	r3, r2
 800544a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005458:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005464:	490b      	ldr	r1, [pc, #44]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005466:	4313      	orrs	r3, r2
 8005468:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005476:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005482:	4904      	ldr	r1, [pc, #16]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005484:	4313      	orrs	r3, r2
 8005486:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3748      	adds	r7, #72	@ 0x48
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e049      	b.n	800553e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f841 	bl	8005546 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 f9da 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04f      	b.n	8005614 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a23      	ldr	r2, [pc, #140]	@ (8005620 <HAL_TIM_Base_Start_IT+0xc4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005624 <HAL_TIM_Base_Start_IT+0xc8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005628 <HAL_TIM_Base_Start_IT+0xcc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <HAL_TIM_Base_Start_IT+0xd0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005630 <HAL_TIM_Base_Start_IT+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x76>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	@ (8005634 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d115      	bne.n	80055fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	4b17      	ldr	r3, [pc, #92]	@ (8005638 <HAL_TIM_Base_Start_IT+0xdc>)
 80055da:	4013      	ands	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d015      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0xb4>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ea:	d011      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fc:	e008      	b.n	8005610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e000      	b.n	8005612 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40013400 	.word	0x40013400
 8005630:	40014000 	.word	0x40014000
 8005634:	40015000 	.word	0x40015000
 8005638:	00010007 	.word	0x00010007

0800563c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0202 	mvn.w	r2, #2
 8005670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8e4 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8d6 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8e7 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8be 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8b0 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8c1 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0208 	mvn.w	r2, #8
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f898 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f88a 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f89b 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2208      	movs	r2, #8
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f872 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f864 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f875 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0201 	mvn.w	r2, #1
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fd5e 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00c      	beq.n	80057cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f916 	bl	80059f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00c      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f90e 	bl	8005a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f834 	bl	800587c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00c      	beq.n	8005838 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0220 	mvn.w	r2, #32
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f8d6 	bl	80059e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a48      	ldr	r2, [pc, #288]	@ (80059c4 <TIM_Base_SetConfig+0x134>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ae:	d00f      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a45      	ldr	r2, [pc, #276]	@ (80059c8 <TIM_Base_SetConfig+0x138>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a44      	ldr	r2, [pc, #272]	@ (80059cc <TIM_Base_SetConfig+0x13c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a43      	ldr	r2, [pc, #268]	@ (80059d0 <TIM_Base_SetConfig+0x140>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a42      	ldr	r2, [pc, #264]	@ (80059d4 <TIM_Base_SetConfig+0x144>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a37      	ldr	r2, [pc, #220]	@ (80059c4 <TIM_Base_SetConfig+0x134>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01f      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f0:	d01b      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <TIM_Base_SetConfig+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d017      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <TIM_Base_SetConfig+0x13c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a32      	ldr	r2, [pc, #200]	@ (80059d0 <TIM_Base_SetConfig+0x140>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a32      	ldr	r2, [pc, #200]	@ (80059d8 <TIM_Base_SetConfig+0x148>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a31      	ldr	r2, [pc, #196]	@ (80059dc <TIM_Base_SetConfig+0x14c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <TIM_Base_SetConfig+0x150>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2b      	ldr	r2, [pc, #172]	@ (80059d4 <TIM_Base_SetConfig+0x144>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d108      	bne.n	800593c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <TIM_Base_SetConfig+0x134>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <TIM_Base_SetConfig+0x100>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <TIM_Base_SetConfig+0x140>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x100>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <TIM_Base_SetConfig+0x148>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x100>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_Base_SetConfig+0x14c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x100>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <TIM_Base_SetConfig+0x150>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x100>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a12      	ldr	r2, [pc, #72]	@ (80059d4 <TIM_Base_SetConfig+0x144>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d103      	bne.n	8005998 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d105      	bne.n	80059b6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]
  }
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40015000 	.word	0x40015000
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e040      	b.n	8005ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb fecc 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	@ 0x24
 8005a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fd7e 	bl	8006568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fba7 	bl	80061c0 <UART_SetConfig>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e01b      	b.n	8005ab4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fdfd 	bl	80066ac <UART_CheckIdleState>
 8005ab2:	4603      	mov	r3, r0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d165      	bne.n	8005b9e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_Transmit_DMA+0x22>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e05e      	b.n	8005ba0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2221      	movs	r2, #33	@ 0x21
 8005b04:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d027      	beq.n	8005b5e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b12:	4a25      	ldr	r2, [pc, #148]	@ (8005ba8 <HAL_UART_Transmit_DMA+0xec>)
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	4a24      	ldr	r2, [pc, #144]	@ (8005bac <HAL_UART_Transmit_DMA+0xf0>)
 8005b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b22:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <HAL_UART_Transmit_DMA+0xf4>)
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b36:	4619      	mov	r1, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3328      	adds	r3, #40	@ 0x28
 8005b3e:	461a      	mov	r2, r3
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	f7fd fcb2 	bl	80034aa <HAL_DMA_Start_IT>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e020      	b.n	8005ba0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2240      	movs	r2, #64	@ 0x40
 8005b64:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	613b      	str	r3, [r7, #16]
   return(result);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b86:	623a      	str	r2, [r7, #32]
 8005b88:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	6a3a      	ldr	r2, [r7, #32]
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3728      	adds	r7, #40	@ 0x28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	080069eb 	.word	0x080069eb
 8005bac:	08006a7f 	.word	0x08006a7f
 8005bb0:	08006a9b 	.word	0x08006a9b

08005bb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b0ba      	sub	sp, #232	@ 0xe8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005bde:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005be2:	4013      	ands	r3, r2
 8005be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d115      	bne.n	8005c1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 82ab 	beq.w	8006168 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4798      	blx	r3
      }
      return;
 8005c1a:	e2a5      	b.n	8006168 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8117 	beq.w	8005e54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c36:	4b85      	ldr	r3, [pc, #532]	@ (8005e4c <HAL_UART_IRQHandler+0x298>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 810a 	beq.w	8005e54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d011      	beq.n	8005c70 <HAL_UART_IRQHandler+0xbc>
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c66:	f043 0201 	orr.w	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_UART_IRQHandler+0xec>
 8005c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c96:	f043 0204 	orr.w	r2, r3, #4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d011      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x11c>
 8005cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc6:	f043 0202 	orr.w	r2, r3, #2
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d012      	beq.n	8005d3e <HAL_UART_IRQHandler+0x18a>
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8211 	beq.w	800616c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00d      	beq.n	8005d72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b40      	cmp	r3, #64	@ 0x40
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d04f      	beq.n	8005e36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fdc3 	bl	8006922 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d141      	bne.n	8005e2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1d9      	bne.n	8005daa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d013      	beq.n	8005e26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e02:	4a13      	ldr	r2, [pc, #76]	@ (8005e50 <HAL_UART_IRQHandler+0x29c>)
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd fbea 	bl	80035e4 <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e00f      	b.n	8005e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9b4 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e00b      	b.n	8005e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9b0 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e007      	b.n	8005e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9ac 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e44:	e192      	b.n	800616c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e46:	bf00      	nop
    return;
 8005e48:	e190      	b.n	800616c <HAL_UART_IRQHandler+0x5b8>
 8005e4a:	bf00      	nop
 8005e4c:	04000120 	.word	0x04000120
 8005e50:	08006b19 	.word	0x08006b19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 814b 	bne.w	80060f4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8144 	beq.w	80060f4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 813d 	beq.w	80060f4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	f040 80b5 	bne.w	8005ffc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8164 	beq.w	8006170 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f080 815c 	bcs.w	8006170 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	f000 8086 	beq.w	8005fda <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005efc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1da      	bne.n	8005ece <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e1      	bne.n	8005f18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e3      	bne.n	8005f54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005faa:	f023 0310 	bic.w	r3, r3, #16
 8005fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e4      	bne.n	8005f9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fd fac7 	bl	8003568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f8d7 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffa:	e0b9      	b.n	8006170 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006008:	b29b      	uxth	r3, r3
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80ab 	beq.w	8006174 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800601e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80a6 	beq.w	8006174 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604a:	647b      	str	r3, [r7, #68]	@ 0x44
 800604c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006050:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e4      	bne.n	8006028 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	623b      	str	r3, [r7, #32]
   return(result);
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006082:	633a      	str	r2, [r7, #48]	@ 0x30
 8006084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f85b 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f2:	e03f      	b.n	8006174 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00e      	beq.n	800611e <HAL_UART_IRQHandler+0x56a>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006104:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fd3e 	bl	8006b98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800611c:	e02d      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00e      	beq.n	8006148 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01c      	beq.n	8006178 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
    }
    return;
 8006146:	e017      	b.n	8006178 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <HAL_UART_IRQHandler+0x5c6>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00c      	beq.n	800617a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fcef 	bl	8006b44 <UART_EndTransmit_IT>
    return;
 8006166:	e008      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006168:	bf00      	nop
 800616a:	e006      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
    return;
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006178:	bf00      	nop
  }

}
 800617a:	37e8      	adds	r7, #232	@ 0xe8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4b92      	ldr	r3, [pc, #584]	@ (8006434 <UART_SetConfig+0x274>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	6979      	ldr	r1, [r7, #20]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a80      	ldr	r2, [pc, #512]	@ (8006438 <UART_SetConfig+0x278>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d120      	bne.n	800627e <UART_SetConfig+0xbe>
 800623c:	4b7f      	ldr	r3, [pc, #508]	@ (800643c <UART_SetConfig+0x27c>)
 800623e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	2b03      	cmp	r3, #3
 8006246:	d817      	bhi.n	8006278 <UART_SetConfig+0xb8>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0x90>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006261 	.word	0x08006261
 8006254:	0800626d 	.word	0x0800626d
 8006258:	08006273 	.word	0x08006273
 800625c:	08006267 	.word	0x08006267
 8006260:	2301      	movs	r3, #1
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e0b5      	b.n	80063d2 <UART_SetConfig+0x212>
 8006266:	2302      	movs	r3, #2
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e0b2      	b.n	80063d2 <UART_SetConfig+0x212>
 800626c:	2304      	movs	r3, #4
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e0af      	b.n	80063d2 <UART_SetConfig+0x212>
 8006272:	2308      	movs	r3, #8
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e0ac      	b.n	80063d2 <UART_SetConfig+0x212>
 8006278:	2310      	movs	r3, #16
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e0a9      	b.n	80063d2 <UART_SetConfig+0x212>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	@ (8006440 <UART_SetConfig+0x280>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d124      	bne.n	80062d2 <UART_SetConfig+0x112>
 8006288:	4b6c      	ldr	r3, [pc, #432]	@ (800643c <UART_SetConfig+0x27c>)
 800628a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006294:	d011      	beq.n	80062ba <UART_SetConfig+0xfa>
 8006296:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800629a:	d817      	bhi.n	80062cc <UART_SetConfig+0x10c>
 800629c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a0:	d011      	beq.n	80062c6 <UART_SetConfig+0x106>
 80062a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a6:	d811      	bhi.n	80062cc <UART_SetConfig+0x10c>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <UART_SetConfig+0xf4>
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b0:	d006      	beq.n	80062c0 <UART_SetConfig+0x100>
 80062b2:	e00b      	b.n	80062cc <UART_SetConfig+0x10c>
 80062b4:	2300      	movs	r3, #0
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e08b      	b.n	80063d2 <UART_SetConfig+0x212>
 80062ba:	2302      	movs	r3, #2
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e088      	b.n	80063d2 <UART_SetConfig+0x212>
 80062c0:	2304      	movs	r3, #4
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e085      	b.n	80063d2 <UART_SetConfig+0x212>
 80062c6:	2308      	movs	r3, #8
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e082      	b.n	80063d2 <UART_SetConfig+0x212>
 80062cc:	2310      	movs	r3, #16
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e07f      	b.n	80063d2 <UART_SetConfig+0x212>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a5b      	ldr	r2, [pc, #364]	@ (8006444 <UART_SetConfig+0x284>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d124      	bne.n	8006326 <UART_SetConfig+0x166>
 80062dc:	4b57      	ldr	r3, [pc, #348]	@ (800643c <UART_SetConfig+0x27c>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80062e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80062e8:	d011      	beq.n	800630e <UART_SetConfig+0x14e>
 80062ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80062ee:	d817      	bhi.n	8006320 <UART_SetConfig+0x160>
 80062f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062f4:	d011      	beq.n	800631a <UART_SetConfig+0x15a>
 80062f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062fa:	d811      	bhi.n	8006320 <UART_SetConfig+0x160>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <UART_SetConfig+0x148>
 8006300:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006304:	d006      	beq.n	8006314 <UART_SetConfig+0x154>
 8006306:	e00b      	b.n	8006320 <UART_SetConfig+0x160>
 8006308:	2300      	movs	r3, #0
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e061      	b.n	80063d2 <UART_SetConfig+0x212>
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e05e      	b.n	80063d2 <UART_SetConfig+0x212>
 8006314:	2304      	movs	r3, #4
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e05b      	b.n	80063d2 <UART_SetConfig+0x212>
 800631a:	2308      	movs	r3, #8
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e058      	b.n	80063d2 <UART_SetConfig+0x212>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e055      	b.n	80063d2 <UART_SetConfig+0x212>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a47      	ldr	r2, [pc, #284]	@ (8006448 <UART_SetConfig+0x288>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d124      	bne.n	800637a <UART_SetConfig+0x1ba>
 8006330:	4b42      	ldr	r3, [pc, #264]	@ (800643c <UART_SetConfig+0x27c>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006334:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006338:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800633c:	d011      	beq.n	8006362 <UART_SetConfig+0x1a2>
 800633e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006342:	d817      	bhi.n	8006374 <UART_SetConfig+0x1b4>
 8006344:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006348:	d011      	beq.n	800636e <UART_SetConfig+0x1ae>
 800634a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800634e:	d811      	bhi.n	8006374 <UART_SetConfig+0x1b4>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <UART_SetConfig+0x19c>
 8006354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006358:	d006      	beq.n	8006368 <UART_SetConfig+0x1a8>
 800635a:	e00b      	b.n	8006374 <UART_SetConfig+0x1b4>
 800635c:	2300      	movs	r3, #0
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e037      	b.n	80063d2 <UART_SetConfig+0x212>
 8006362:	2302      	movs	r3, #2
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e034      	b.n	80063d2 <UART_SetConfig+0x212>
 8006368:	2304      	movs	r3, #4
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e031      	b.n	80063d2 <UART_SetConfig+0x212>
 800636e:	2308      	movs	r3, #8
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e02e      	b.n	80063d2 <UART_SetConfig+0x212>
 8006374:	2310      	movs	r3, #16
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e02b      	b.n	80063d2 <UART_SetConfig+0x212>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a33      	ldr	r2, [pc, #204]	@ (800644c <UART_SetConfig+0x28c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d124      	bne.n	80063ce <UART_SetConfig+0x20e>
 8006384:	4b2d      	ldr	r3, [pc, #180]	@ (800643c <UART_SetConfig+0x27c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006388:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800638c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006390:	d011      	beq.n	80063b6 <UART_SetConfig+0x1f6>
 8006392:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006396:	d817      	bhi.n	80063c8 <UART_SetConfig+0x208>
 8006398:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800639c:	d011      	beq.n	80063c2 <UART_SetConfig+0x202>
 800639e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063a2:	d811      	bhi.n	80063c8 <UART_SetConfig+0x208>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <UART_SetConfig+0x1f0>
 80063a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ac:	d006      	beq.n	80063bc <UART_SetConfig+0x1fc>
 80063ae:	e00b      	b.n	80063c8 <UART_SetConfig+0x208>
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e00d      	b.n	80063d2 <UART_SetConfig+0x212>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e00a      	b.n	80063d2 <UART_SetConfig+0x212>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e007      	b.n	80063d2 <UART_SetConfig+0x212>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e004      	b.n	80063d2 <UART_SetConfig+0x212>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e001      	b.n	80063d2 <UART_SetConfig+0x212>
 80063ce:	2310      	movs	r3, #16
 80063d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063da:	d16b      	bne.n	80064b4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80063dc:	7ffb      	ldrb	r3, [r7, #31]
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d838      	bhi.n	8006454 <UART_SetConfig+0x294>
 80063e2:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <UART_SetConfig+0x228>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	08006455 	.word	0x08006455
 80063f8:	08006423 	.word	0x08006423
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006455 	.word	0x08006455
 8006404:	08006455 	.word	0x08006455
 8006408:	0800642b 	.word	0x0800642b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fe fdb2 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8006410:	61b8      	str	r0, [r7, #24]
        break;
 8006412:	e024      	b.n	800645e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006414:	f7fe fdd0 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8006418:	61b8      	str	r0, [r7, #24]
        break;
 800641a:	e020      	b.n	800645e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800641c:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <UART_SetConfig+0x290>)
 800641e:	61bb      	str	r3, [r7, #24]
        break;
 8006420:	e01d      	b.n	800645e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006422:	f7fe fd47 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8006426:	61b8      	str	r0, [r7, #24]
        break;
 8006428:	e019      	b.n	800645e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642e:	61bb      	str	r3, [r7, #24]
        break;
 8006430:	e015      	b.n	800645e <UART_SetConfig+0x29e>
 8006432:	bf00      	nop
 8006434:	efff69f3 	.word	0xefff69f3
 8006438:	40013800 	.word	0x40013800
 800643c:	40021000 	.word	0x40021000
 8006440:	40004400 	.word	0x40004400
 8006444:	40004800 	.word	0x40004800
 8006448:	40004c00 	.word	0x40004c00
 800644c:	40005000 	.word	0x40005000
 8006450:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	77bb      	strb	r3, [r7, #30]
        break;
 800645c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d073      	beq.n	800654c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	005a      	lsls	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	441a      	add	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d916      	bls.n	80064ae <UART_SetConfig+0x2ee>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006486:	d212      	bcs.n	80064ae <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f023 030f 	bic.w	r3, r3, #15
 8006490:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	b29a      	uxth	r2, r3
 800649e:	89fb      	ldrh	r3, [r7, #14]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	89fa      	ldrh	r2, [r7, #14]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e04e      	b.n	800654c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	77bb      	strb	r3, [r7, #30]
 80064b2:	e04b      	b.n	800654c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d827      	bhi.n	800650a <UART_SetConfig+0x34a>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <UART_SetConfig+0x300>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	0800650b 	.word	0x0800650b
 80064d0:	080064fb 	.word	0x080064fb
 80064d4:	0800650b 	.word	0x0800650b
 80064d8:	0800650b 	.word	0x0800650b
 80064dc:	0800650b 	.word	0x0800650b
 80064e0:	08006503 	.word	0x08006503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e4:	f7fe fd46 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 80064e8:	61b8      	str	r0, [r7, #24]
        break;
 80064ea:	e013      	b.n	8006514 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fe fd64 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 80064f0:	61b8      	str	r0, [r7, #24]
        break;
 80064f2:	e00f      	b.n	8006514 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006564 <UART_SetConfig+0x3a4>)
 80064f6:	61bb      	str	r3, [r7, #24]
        break;
 80064f8:	e00c      	b.n	8006514 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fa:	f7fe fcdb 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 80064fe:	61b8      	str	r0, [r7, #24]
        break;
 8006500:	e008      	b.n	8006514 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e004      	b.n	8006514 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	77bb      	strb	r3, [r7, #30]
        break;
 8006512:	bf00      	nop
    }

    if (pclk != 0U)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d018      	beq.n	800654c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	085a      	lsrs	r2, r3, #1
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d909      	bls.n	8006548 <UART_SetConfig+0x388>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653a:	d205      	bcs.n	8006548 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	e001      	b.n	800654c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006558:	7fbb      	ldrb	r3, [r7, #30]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	007a1200 	.word	0x007a1200

08006568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01a      	beq.n	800667e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006666:	d10a      	bne.n	800667e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]
  }
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b098      	sub	sp, #96	@ 0x60
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066bc:	f7fb f95a 	bl	8001974 <HAL_GetTick>
 80066c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d12e      	bne.n	800672e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d8:	2200      	movs	r2, #0
 80066da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f88c 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d021      	beq.n	800672e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
 800670a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e062      	b.n	80067f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b04      	cmp	r3, #4
 800673a:	d149      	bne.n	80067d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f856 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d03c      	beq.n	80067d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	623b      	str	r3, [r7, #32]
   return(result);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800676a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30
 8006776:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3308      	adds	r3, #8
 800678e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	60fb      	str	r3, [r7, #12]
   return(result);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067a8:	61fa      	str	r2, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	617b      	str	r3, [r7, #20]
   return(result);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e011      	b.n	80067f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3758      	adds	r7, #88	@ 0x58
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	e04f      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d04b      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fb f8ad 	bl	8001974 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <UART_WaitOnFlagUntilTimeout+0x30>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e04e      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d037      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	d034      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b40      	cmp	r3, #64	@ 0x40
 8006848:	d031      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b08      	cmp	r3, #8
 8006856:	d110      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f85e 	bl	8006922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2208      	movs	r2, #8
 800686a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e029      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006888:	d111      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f844 	bl	8006922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e00f      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d0a0      	beq.n	800680e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b089      	sub	sp, #36	@ 0x24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	613b      	str	r3, [r7, #16]
   return(result);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006916:	bf00      	nop
 8006918:	3724      	adds	r7, #36	@ 0x24
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006922:	b480      	push	{r7}
 8006924:	b095      	sub	sp, #84	@ 0x54
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800693e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006948:	643b      	str	r3, [r7, #64]	@ 0x40
 800694a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800694e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	61fb      	str	r3, [r7, #28]
   return(result);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800697c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800697e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e5      	bne.n	800695c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006994:	2b01      	cmp	r3, #1
 8006996:	d118      	bne.n	80069ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e6      	bne.n	8006998 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069de:	bf00      	nop
 80069e0:	3754      	adds	r7, #84	@ 0x54
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b090      	sub	sp, #64	@ 0x40
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d037      	beq.n	8006a70 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	623b      	str	r3, [r7, #32]
   return(result);
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a28:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	617b      	str	r3, [r7, #20]
   return(result);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e6      	bne.n	8006a3c <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a6e:	e002      	b.n	8006a76 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006a70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a72:	f7fa fa8f 	bl	8000f94 <HAL_UART_TxCpltCallback>
}
 8006a76:	bf00      	nop
 8006a78:	3740      	adds	r7, #64	@ 0x40
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff fb77 	bl	8006180 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac0:	2b80      	cmp	r3, #128	@ 0x80
 8006ac2:	d109      	bne.n	8006ad8 <UART_DMAError+0x3e>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b21      	cmp	r3, #33	@ 0x21
 8006ac8:	d106      	bne.n	8006ad8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006ad2:	6978      	ldr	r0, [r7, #20]
 8006ad4:	f7ff feff 	bl	80068d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d109      	bne.n	8006afa <UART_DMAError+0x60>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b22      	cmp	r3, #34	@ 0x22
 8006aea:	d106      	bne.n	8006afa <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006af4:	6978      	ldr	r0, [r7, #20]
 8006af6:	f7ff ff14 	bl	8006922 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b00:	f043 0210 	orr.w	r2, r3, #16
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0a:	6978      	ldr	r0, [r7, #20]
 8006b0c:	f7ff fb42 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b10:	bf00      	nop
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fb2c 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	613b      	str	r3, [r7, #16]
   return(result);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fa fa02 	bl	8000f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b90:	bf00      	nop
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb2:	f3ef 8305 	mrs	r3, IPSR
 8006bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10f      	bne.n	8006bde <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc2:	607b      	str	r3, [r7, #4]
  return(result);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <osKernelInitialize+0x32>
 8006bca:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <osKernelInitialize+0x64>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d109      	bne.n	8006be6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006bde:	f06f 0305 	mvn.w	r3, #5
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e00c      	b.n	8006c00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006be6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <osKernelInitialize+0x64>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d105      	bne.n	8006bfa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006bee:	4b08      	ldr	r3, [pc, #32]	@ (8006c10 <osKernelInitialize+0x64>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e002      	b.n	8006c00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000400 	.word	0x20000400

08006c14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1a:	f3ef 8305 	mrs	r3, IPSR
 8006c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c26:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2a:	607b      	str	r3, [r7, #4]
  return(result);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <osKernelStart+0x32>
 8006c32:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <osKernelStart+0x64>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d109      	bne.n	8006c4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006c46:	f06f 0305 	mvn.w	r3, #5
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e00e      	b.n	8006c6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <osKernelStart+0x64>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006c56:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <osKernelStart+0x64>)
 8006c58:	2202      	movs	r2, #2
 8006c5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006c5c:	f001 f898 	bl	8007d90 <vTaskStartScheduler>
      stat = osOK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e002      	b.n	8006c6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000400 	.word	0x20000400

08006c7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b092      	sub	sp, #72	@ 0x48
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c8c:	f3ef 8305 	mrs	r3, IPSR
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 8094 	bne.w	8006dc2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9e:	623b      	str	r3, [r7, #32]
  return(result);
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 808d 	bne.w	8006dc2 <osThreadNew+0x146>
 8006ca8:	4b48      	ldr	r3, [pc, #288]	@ (8006dcc <osThreadNew+0x150>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d106      	bne.n	8006cbe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8082 	bne.w	8006dc2 <osThreadNew+0x146>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d07e      	beq.n	8006dc2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006cc4:	2380      	movs	r3, #128	@ 0x80
 8006cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006cc8:	2318      	movs	r3, #24
 8006cca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8006ccc:	2300      	movs	r3, #0
 8006cce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006cd0:	f107 031b 	add.w	r3, r7, #27
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d045      	beq.n	8006d6e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <osThreadNew+0x74>
        name = attr->name;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <osThreadNew+0x9a>
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	2b38      	cmp	r3, #56	@ 0x38
 8006d08:	d805      	bhi.n	8006d16 <osThreadNew+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <osThreadNew+0x9e>
        return (NULL);
 8006d16:	2300      	movs	r3, #0
 8006d18:	e054      	b.n	8006dc4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	089b      	lsrs	r3, r3, #2
 8006d28:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <osThreadNew+0xd4>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2b5b      	cmp	r3, #91	@ 0x5b
 8006d38:	d90a      	bls.n	8006d50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <osThreadNew+0xd4>
        mem = 1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d4e:	e010      	b.n	8006d72 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10c      	bne.n	8006d72 <osThreadNew+0xf6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <osThreadNew+0xf6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <osThreadNew+0xf6>
          mem = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6c:	e001      	b.n	8006d72 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d110      	bne.n	8006d9a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fe2c 	bl	80079ec <xTaskCreateStatic>
 8006d94:	4603      	mov	r3, r0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e013      	b.n	8006dc2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d110      	bne.n	8006dc2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fe79 	bl	8007aaa <xTaskCreate>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <osThreadNew+0x146>
          hTask = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dc2:	697b      	ldr	r3, [r7, #20]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3738      	adds	r7, #56	@ 0x38
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000400 	.word	0x20000400

08006dd0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd8:	f3ef 8305 	mrs	r3, IPSR
 8006ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de4:	f3ef 8310 	mrs	r3, PRIMASK
 8006de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <osDelay+0x34>
 8006df0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <osDelay+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d109      	bne.n	8006e0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006df8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <osDelay+0x3c>
    stat = osErrorISR;
 8006e04:	f06f 0305 	mvn.w	r3, #5
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e007      	b.n	8006e1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 ff84 	bl	8007d24 <vTaskDelay>
    }
  }

  return (stat);
 8006e1c:	697b      	ldr	r3, [r7, #20]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000400 	.word	0x20000400

08006e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a07      	ldr	r2, [pc, #28]	@ (8006e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	4a06      	ldr	r2, [pc, #24]	@ (8006e5c <vApplicationGetIdleTaskMemory+0x30>)
 8006e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2280      	movs	r2, #128	@ 0x80
 8006e48:	601a      	str	r2, [r3, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000404 	.word	0x20000404
 8006e5c:	20000460 	.word	0x20000460

08006e60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a07      	ldr	r2, [pc, #28]	@ (8006e8c <vApplicationGetTimerTaskMemory+0x2c>)
 8006e70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4a06      	ldr	r2, [pc, #24]	@ (8006e90 <vApplicationGetTimerTaskMemory+0x30>)
 8006e76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000660 	.word	0x20000660
 8006e90:	200006bc 	.word	0x200006bc

08006e94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f103 0208 	add.w	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f103 0208 	add.w	r2, r3, #8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f103 0208 	add.w	r2, r3, #8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d103      	bne.n	8006f56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e00c      	b.n	8006f70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e002      	b.n	8006f64 <vListInsert+0x2e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d2f6      	bcs.n	8006f5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6892      	ldr	r2, [r2, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6852      	ldr	r2, [r2, #4]
 8006fc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d103      	bne.n	8006fdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1e5a      	subs	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	e7fd      	b.n	8007024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007028:	f002 f966 	bl	80092f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	3b01      	subs	r3, #1
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	22ff      	movs	r2, #255	@ 0xff
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	22ff      	movs	r2, #255	@ 0xff
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d114      	bne.n	80070a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01a      	beq.n	80070bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3310      	adds	r3, #16
 800708a:	4618      	mov	r0, r3
 800708c:	f001 f914 	bl	80082b8 <xTaskRemoveFromEventList>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d012      	beq.n	80070bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <xQueueGenericReset+0xd0>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	e009      	b.n	80070bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3310      	adds	r3, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fef1 	bl	8006e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3324      	adds	r3, #36	@ 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff feec 	bl	8006e94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070bc:	f002 f94e 	bl	800935c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070c0:	2301      	movs	r3, #1
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	@ 0x38
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <xQueueGenericCreateStatic+0x56>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <xQueueGenericCreateStatic+0x5a>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericCreateStatic+0x5c>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	623b      	str	r3, [r7, #32]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <xQueueGenericCreateStatic+0x84>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <xQueueGenericCreateStatic+0x88>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <xQueueGenericCreateStatic+0x8a>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	61fb      	str	r3, [r7, #28]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007176:	2350      	movs	r3, #80	@ 0x50
 8007178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b50      	cmp	r3, #80	@ 0x50
 800717e:	d00b      	beq.n	8007198 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61bb      	str	r3, [r7, #24]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80071ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f805 	bl	80071c8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80071be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3730      	adds	r7, #48	@ 0x30
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e002      	b.n	80071ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071f6:	2101      	movs	r1, #1
 80071f8:	69b8      	ldr	r0, [r7, #24]
 80071fa:	f7ff feff 	bl	8006ffc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08e      	sub	sp, #56	@ 0x38
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <xQueueGenericSend+0x34>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <xQueueGenericSend+0x42>
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <xQueueGenericSend+0x46>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <xQueueGenericSend+0x48>
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <xQueueGenericSend+0x64>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	e7fd      	b.n	8007270 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d103      	bne.n	8007282 <xQueueGenericSend+0x72>
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <xQueueGenericSend+0x76>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <xQueueGenericSend+0x78>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <xQueueGenericSend+0x94>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	623b      	str	r3, [r7, #32]
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072a4:	f001 f9ce 	bl	8008644 <xTaskGetSchedulerState>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <xQueueGenericSend+0xa4>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <xQueueGenericSend+0xa8>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <xQueueGenericSend+0xaa>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	61fb      	str	r3, [r7, #28]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072d6:	f002 f80f 	bl	80092f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d302      	bcc.n	80072ec <xQueueGenericSend+0xdc>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d129      	bne.n	8007340 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072f2:	f000 fa0d 	bl	8007710 <prvCopyDataToQueue>
 80072f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d010      	beq.n	8007322 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	3324      	adds	r3, #36	@ 0x24
 8007304:	4618      	mov	r0, r3
 8007306:	f000 ffd7 	bl	80082b8 <xTaskRemoveFromEventList>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d013      	beq.n	8007338 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007310:	4b3f      	ldr	r3, [pc, #252]	@ (8007410 <xQueueGenericSend+0x200>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	e00a      	b.n	8007338 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d007      	beq.n	8007338 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007328:	4b39      	ldr	r3, [pc, #228]	@ (8007410 <xQueueGenericSend+0x200>)
 800732a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007338:	f002 f810 	bl	800935c <vPortExitCritical>
				return pdPASS;
 800733c:	2301      	movs	r3, #1
 800733e:	e063      	b.n	8007408 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007346:	f002 f809 	bl	800935c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800734a:	2300      	movs	r3, #0
 800734c:	e05c      	b.n	8007408 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007354:	f107 0314 	add.w	r3, r7, #20
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f811 	bl	8008380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800735e:	2301      	movs	r3, #1
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007362:	f001 fffb 	bl	800935c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007366:	f000 fd7b 	bl	8007e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800736a:	f001 ffc5 	bl	80092f8 <vPortEnterCritical>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007374:	b25b      	sxtb	r3, r3
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d103      	bne.n	8007384 <xQueueGenericSend+0x174>
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800738a:	b25b      	sxtb	r3, r3
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d103      	bne.n	800739a <xQueueGenericSend+0x18a>
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800739a:	f001 ffdf 	bl	800935c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800739e:	1d3a      	adds	r2, r7, #4
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 f800 	bl	80083ac <xTaskCheckForTimeOut>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d124      	bne.n	80073fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073b4:	f000 faa4 	bl	8007900 <prvIsQueueFull>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d018      	beq.n	80073f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	3310      	adds	r3, #16
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 ff24 	bl	8008214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ce:	f000 fa2f 	bl	8007830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073d2:	f000 fd53 	bl	8007e7c <xTaskResumeAll>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f47f af7c 	bne.w	80072d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <xQueueGenericSend+0x200>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	e772      	b.n	80072d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073f2:	f000 fa1d 	bl	8007830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073f6:	f000 fd41 	bl	8007e7c <xTaskResumeAll>
 80073fa:	e76c      	b.n	80072d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073fe:	f000 fa17 	bl	8007830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007402:	f000 fd3b 	bl	8007e7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007406:	2300      	movs	r3, #0
		}
	}
}
 8007408:	4618      	mov	r0, r3
 800740a:	3738      	adds	r7, #56	@ 0x38
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	@ 0x38
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <xQueueGenericSendFromISR+0x3e>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueGenericSendFromISR+0x42>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueGenericSendFromISR+0x44>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	623b      	str	r3, [r7, #32]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d103      	bne.n	8007482 <xQueueGenericSendFromISR+0x6e>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <xQueueGenericSendFromISR+0x72>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <xQueueGenericSendFromISR+0x74>
 8007486:	2300      	movs	r3, #0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10b      	bne.n	80074a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	61fb      	str	r3, [r7, #28]
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	e7fd      	b.n	80074a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a4:	f002 f808 	bl	80094b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074a8:	f3ef 8211 	mrs	r2, BASEPRI
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	61ba      	str	r2, [r7, #24]
 80074be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d302      	bcc.n	80074d6 <xQueueGenericSendFromISR+0xc2>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d12c      	bne.n	8007530 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074e6:	f000 f913 	bl	8007710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d112      	bne.n	800751a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d016      	beq.n	800752a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	3324      	adds	r3, #36	@ 0x24
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fed9 	bl	80082b8 <xTaskRemoveFromEventList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e007      	b.n	800752a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800751a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800751e:	3301      	adds	r3, #1
 8007520:	b2db      	uxtb	r3, r3
 8007522:	b25a      	sxtb	r2, r3
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800752a:	2301      	movs	r3, #1
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800752e:	e001      	b.n	8007534 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007530:	2300      	movs	r3, #0
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
 8007534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007536:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800753e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007542:	4618      	mov	r0, r3
 8007544:	3738      	adds	r7, #56	@ 0x38
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08c      	sub	sp, #48	@ 0x30
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007558:	2300      	movs	r3, #0
 800755a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <xQueueReceive+0x32>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	623b      	str	r3, [r7, #32]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <xQueueReceive+0x40>
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <xQueueReceive+0x44>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <xQueueReceive+0x46>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <xQueueReceive+0x62>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	61fb      	str	r3, [r7, #28]
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	e7fd      	b.n	80075aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ae:	f001 f849 	bl	8008644 <xTaskGetSchedulerState>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <xQueueReceive+0x72>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <xQueueReceive+0x76>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <xQueueReceive+0x78>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueReceive+0x94>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61bb      	str	r3, [r7, #24]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e0:	f001 fe8a 	bl	80092f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01f      	beq.n	8007630 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075f4:	f000 f8f6 	bl	80077e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	1e5a      	subs	r2, r3, #1
 80075fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00f      	beq.n	8007628 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	3310      	adds	r3, #16
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fe53 	bl	80082b8 <xTaskRemoveFromEventList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007618:	4b3c      	ldr	r3, [pc, #240]	@ (800770c <xQueueReceive+0x1c0>)
 800761a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007628:	f001 fe98 	bl	800935c <vPortExitCritical>
				return pdPASS;
 800762c:	2301      	movs	r3, #1
 800762e:	e069      	b.n	8007704 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007636:	f001 fe91 	bl	800935c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800763a:	2300      	movs	r3, #0
 800763c:	e062      	b.n	8007704 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d106      	bne.n	8007652 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fe99 	bl	8008380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800764e:	2301      	movs	r3, #1
 8007650:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007652:	f001 fe83 	bl	800935c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007656:	f000 fc03 	bl	8007e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800765a:	f001 fe4d 	bl	80092f8 <vPortEnterCritical>
 800765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007664:	b25b      	sxtb	r3, r3
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d103      	bne.n	8007674 <xQueueReceive+0x128>
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800767a:	b25b      	sxtb	r3, r3
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d103      	bne.n	800768a <xQueueReceive+0x13e>
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800768a:	f001 fe67 	bl	800935c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800768e:	1d3a      	adds	r2, r7, #4
 8007690:	f107 0310 	add.w	r3, r7, #16
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fe88 	bl	80083ac <xTaskCheckForTimeOut>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d123      	bne.n	80076ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076a4:	f000 f916 	bl	80078d4 <prvIsQueueEmpty>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d017      	beq.n	80076de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b0:	3324      	adds	r3, #36	@ 0x24
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4611      	mov	r1, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fdac 	bl	8008214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076be:	f000 f8b7 	bl	8007830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076c2:	f000 fbdb 	bl	8007e7c <xTaskResumeAll>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d189      	bne.n	80075e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80076cc:	4b0f      	ldr	r3, [pc, #60]	@ (800770c <xQueueReceive+0x1c0>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	e780      	b.n	80075e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076e0:	f000 f8a6 	bl	8007830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076e4:	f000 fbca 	bl	8007e7c <xTaskResumeAll>
 80076e8:	e77a      	b.n	80075e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076ec:	f000 f8a0 	bl	8007830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076f0:	f000 fbc4 	bl	8007e7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076f6:	f000 f8ed 	bl	80078d4 <prvIsQueueEmpty>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f43f af6f 	beq.w	80075e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007702:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007704:	4618      	mov	r0, r3
 8007706:	3730      	adds	r7, #48	@ 0x30
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d14d      	bne.n	80077d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ffa0 	bl	8008680 <xTaskPriorityDisinherit>
 8007740:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]
 8007748:	e043      	b.n	80077d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d119      	bne.n	8007784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6898      	ldr	r0, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	461a      	mov	r2, r3
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	f002 fef1 	bl	800a542 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d32b      	bcc.n	80077d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	609a      	str	r2, [r3, #8]
 8007782:	e026      	b.n	80077d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68d8      	ldr	r0, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	461a      	mov	r2, r3
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	f002 fed7 	bl	800a542 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779c:	425b      	negs	r3, r3
 800779e:	441a      	add	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d207      	bcs.n	80077c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b8:	425b      	negs	r3, r3
 80077ba:	441a      	add	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d105      	bne.n	80077d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80077da:	697b      	ldr	r3, [r7, #20]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d303      	bcc.n	8007818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68d9      	ldr	r1, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007820:	461a      	mov	r2, r3
 8007822:	6838      	ldr	r0, [r7, #0]
 8007824:	f002 fe8d 	bl	800a542 <memcpy>
	}
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007838:	f001 fd5e 	bl	80092f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007844:	e011      	b.n	800786a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d012      	beq.n	8007874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3324      	adds	r3, #36	@ 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fd30 	bl	80082b8 <xTaskRemoveFromEventList>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800785e:	f000 fe09 	bl	8008474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	3b01      	subs	r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800786a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	dce9      	bgt.n	8007846 <prvUnlockQueue+0x16>
 8007872:	e000      	b.n	8007876 <prvUnlockQueue+0x46>
					break;
 8007874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	22ff      	movs	r2, #255	@ 0xff
 800787a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800787e:	f001 fd6d 	bl	800935c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007882:	f001 fd39 	bl	80092f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800788c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800788e:	e011      	b.n	80078b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3310      	adds	r3, #16
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fd0b 	bl	80082b8 <xTaskRemoveFromEventList>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078a8:	f000 fde4 	bl	8008474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dce9      	bgt.n	8007890 <prvUnlockQueue+0x60>
 80078bc:	e000      	b.n	80078c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	22ff      	movs	r2, #255	@ 0xff
 80078c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80078c8:	f001 fd48 	bl	800935c <vPortExitCritical>
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078dc:	f001 fd0c 	bl	80092f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078e8:	2301      	movs	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e001      	b.n	80078f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f2:	f001 fd33 	bl	800935c <vPortExitCritical>

	return xReturn;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007908:	f001 fcf6 	bl	80092f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	429a      	cmp	r2, r3
 8007916:	d102      	bne.n	800791e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e001      	b.n	8007922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007922:	f001 fd1b 	bl	800935c <vPortExitCritical>

	return xReturn;
 8007926:	68fb      	ldr	r3, [r7, #12]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	e014      	b.n	800796a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007940:	4a0f      	ldr	r2, [pc, #60]	@ (8007980 <vQueueAddToRegistry+0x50>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800794c:	490c      	ldr	r1, [pc, #48]	@ (8007980 <vQueueAddToRegistry+0x50>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007956:	4a0a      	ldr	r2, [pc, #40]	@ (8007980 <vQueueAddToRegistry+0x50>)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4413      	add	r3, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007962:	e006      	b.n	8007972 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b07      	cmp	r3, #7
 800796e:	d9e7      	bls.n	8007940 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000abc 	.word	0x20000abc

08007984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007994:	f001 fcb0 	bl	80092f8 <vPortEnterCritical>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <vQueueWaitForMessageRestricted+0x2a>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d103      	bne.n	80079c4 <vQueueWaitForMessageRestricted+0x40>
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079c4:	f001 fcca 	bl	800935c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	3324      	adds	r3, #36	@ 0x24
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fc41 	bl	8008260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7ff ff26 	bl	8007830 <prvUnlockQueue>
	}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	@ 0x38
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	623b      	str	r3, [r7, #32]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	61fb      	str	r3, [r7, #28]
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a36:	235c      	movs	r3, #92	@ 0x5c
 8007a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a3e:	d00b      	beq.n	8007a58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01e      	beq.n	8007a9c <xTaskCreateStatic+0xb0>
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a6c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a76:	2300      	movs	r3, #0
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f850 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a96:	f000 f8d5 	bl	8007c44 <prvAddNewTaskToReadyList>
 8007a9a:	e001      	b.n	8007aa0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007aa0:	697b      	ldr	r3, [r7, #20]
	}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3728      	adds	r7, #40	@ 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08c      	sub	sp, #48	@ 0x30
 8007aae:	af04      	add	r7, sp, #16
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 fd3c 	bl	800953c <pvPortMalloc>
 8007ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007acc:	205c      	movs	r0, #92	@ 0x5c
 8007ace:	f001 fd35 	bl	800953c <pvPortMalloc>
 8007ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ae0:	e005      	b.n	8007aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f001 fdf2 	bl	80096cc <vPortFree>
 8007ae8:	e001      	b.n	8007aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	2300      	movs	r3, #0
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f80e 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b18:	69f8      	ldr	r0, [r7, #28]
 8007b1a:	f000 f893 	bl	8007c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	e002      	b.n	8007b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	21a5      	movs	r1, #165	@ 0xa5
 8007b4e:	f002 fc78 	bl	800a442 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	e012      	b.n	8007bba <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	7819      	ldrb	r1, [r3, #0]
 8007b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	3334      	adds	r3, #52	@ 0x34
 8007ba4:	460a      	mov	r2, r1
 8007ba6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	2b0f      	cmp	r3, #15
 8007bbe:	d9e9      	bls.n	8007b94 <prvInitialiseNewTask+0x60>
 8007bc0:	e000      	b.n	8007bc4 <prvInitialiseNewTask+0x90>
		{
			break;
 8007bc2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bce:	2b37      	cmp	r3, #55	@ 0x37
 8007bd0:	d901      	bls.n	8007bd6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bd2:	2337      	movs	r3, #55	@ 0x37
 8007bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007be0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	2200      	movs	r2, #0
 8007be6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	3304      	adds	r3, #4
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff f971 	bl	8006ed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	3318      	adds	r3, #24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f96c 	bl	8006ed4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	2200      	movs	r2, #0
 8007c16:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	69b8      	ldr	r0, [r7, #24]
 8007c26:	f001 fa35 	bl	8009094 <pxPortInitialiseStack>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c4c:	f001 fb54 	bl	80092f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c50:	4b2d      	ldr	r3, [pc, #180]	@ (8007d08 <prvAddNewTaskToReadyList+0xc4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	4a2c      	ldr	r2, [pc, #176]	@ (8007d08 <prvAddNewTaskToReadyList+0xc4>)
 8007c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c62:	4a2a      	ldr	r2, [pc, #168]	@ (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c68:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <prvAddNewTaskToReadyList+0xc4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d110      	bne.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c70:	f000 fc24 	bl	80084bc <prvInitialiseTaskLists>
 8007c74:	e00d      	b.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c76:	4b26      	ldr	r3, [pc, #152]	@ (8007d10 <prvAddNewTaskToReadyList+0xcc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c7e:	4b23      	ldr	r3, [pc, #140]	@ (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d802      	bhi.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c92:	4b20      	ldr	r3, [pc, #128]	@ (8007d14 <prvAddNewTaskToReadyList+0xd0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	4a1e      	ldr	r2, [pc, #120]	@ (8007d14 <prvAddNewTaskToReadyList+0xd0>)
 8007c9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d14 <prvAddNewTaskToReadyList+0xd0>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d18 <prvAddNewTaskToReadyList+0xd4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d903      	bls.n	8007cb8 <prvAddNewTaskToReadyList+0x74>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	4a18      	ldr	r2, [pc, #96]	@ (8007d18 <prvAddNewTaskToReadyList+0xd4>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4a15      	ldr	r2, [pc, #84]	@ (8007d1c <prvAddNewTaskToReadyList+0xd8>)
 8007cc6:	441a      	add	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7ff f90d 	bl	8006eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cd4:	f001 fb42 	bl	800935c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <prvAddNewTaskToReadyList+0xcc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d207      	bcs.n	8007cfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cee:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <prvAddNewTaskToReadyList+0xdc>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000fd0 	.word	0x20000fd0
 8007d0c:	20000afc 	.word	0x20000afc
 8007d10:	20000fdc 	.word	0x20000fdc
 8007d14:	20000fec 	.word	0x20000fec
 8007d18:	20000fd8 	.word	0x20000fd8
 8007d1c:	20000b00 	.word	0x20000b00
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d018      	beq.n	8007d68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d36:	4b14      	ldr	r3, [pc, #80]	@ (8007d88 <vTaskDelay+0x64>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <vTaskDelay+0x32>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60bb      	str	r3, [r7, #8]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d56:	f000 f883 	bl	8007e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fe25 	bl	80089ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d62:	f000 f88b 	bl	8007e7c <xTaskResumeAll>
 8007d66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d107      	bne.n	8007d7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d6e:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <vTaskDelay+0x68>)
 8007d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000ff8 	.word	0x20000ff8
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	@ 0x28
 8007d94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d9e:	463a      	mov	r2, r7
 8007da0:	1d39      	adds	r1, r7, #4
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff f840 	bl	8006e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	9202      	str	r2, [sp, #8]
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	4922      	ldr	r1, [pc, #136]	@ (8007e48 <vTaskStartScheduler+0xb8>)
 8007dc0:	4822      	ldr	r0, [pc, #136]	@ (8007e4c <vTaskStartScheduler+0xbc>)
 8007dc2:	f7ff fe13 	bl	80079ec <xTaskCreateStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a21      	ldr	r2, [pc, #132]	@ (8007e50 <vTaskStartScheduler+0xc0>)
 8007dca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dcc:	4b20      	ldr	r3, [pc, #128]	@ (8007e50 <vTaskStartScheduler+0xc0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e001      	b.n	8007dde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007de4:	f000 fe36 	bl	8008a54 <xTimerCreateTimerTask>
 8007de8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d116      	bne.n	8007e1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e04:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <vTaskStartScheduler+0xc4>)
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e0c:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <vTaskStartScheduler+0xc8>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007e12:	4b12      	ldr	r3, [pc, #72]	@ (8007e5c <vTaskStartScheduler+0xcc>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e18:	f001 f9ca 	bl	80091b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e1c:	e00f      	b.n	8007e3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d10b      	bne.n	8007e3e <vTaskStartScheduler+0xae>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vTaskStartScheduler+0xaa>
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	0800c614 	.word	0x0800c614
 8007e4c:	0800848d 	.word	0x0800848d
 8007e50:	20000ff4 	.word	0x20000ff4
 8007e54:	20000ff0 	.word	0x20000ff0
 8007e58:	20000fdc 	.word	0x20000fdc
 8007e5c:	20000fd4 	.word	0x20000fd4

08007e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <vTaskSuspendAll+0x18>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	4a03      	ldr	r2, [pc, #12]	@ (8007e78 <vTaskSuspendAll+0x18>)
 8007e6c:	6013      	str	r3, [r2, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000ff8 	.word	0x20000ff8

08007e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e8a:	4b42      	ldr	r3, [pc, #264]	@ (8007f94 <xTaskResumeAll+0x118>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <xTaskResumeAll+0x2e>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	603b      	str	r3, [r7, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007eaa:	f001 fa25 	bl	80092f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007eae:	4b39      	ldr	r3, [pc, #228]	@ (8007f94 <xTaskResumeAll+0x118>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	4a37      	ldr	r2, [pc, #220]	@ (8007f94 <xTaskResumeAll+0x118>)
 8007eb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb8:	4b36      	ldr	r3, [pc, #216]	@ (8007f94 <xTaskResumeAll+0x118>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d162      	bne.n	8007f86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ec0:	4b35      	ldr	r3, [pc, #212]	@ (8007f98 <xTaskResumeAll+0x11c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d05e      	beq.n	8007f86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ec8:	e02f      	b.n	8007f2a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007eca:	4b34      	ldr	r3, [pc, #208]	@ (8007f9c <xTaskResumeAll+0x120>)
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff f866 	bl	8006fa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff f861 	bl	8006fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eea:	4b2d      	ldr	r3, [pc, #180]	@ (8007fa0 <xTaskResumeAll+0x124>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d903      	bls.n	8007efa <xTaskResumeAll+0x7e>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa0 <xTaskResumeAll+0x124>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a27      	ldr	r2, [pc, #156]	@ (8007fa4 <xTaskResumeAll+0x128>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe ffec 	bl	8006eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	4b23      	ldr	r3, [pc, #140]	@ (8007fa8 <xTaskResumeAll+0x12c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007f24:	4b21      	ldr	r3, [pc, #132]	@ (8007fac <xTaskResumeAll+0x130>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <xTaskResumeAll+0x120>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1cb      	bne.n	8007eca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f38:	f000 fb5e 	bl	80085f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb0 <xTaskResumeAll+0x134>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f48:	f000 f846 	bl	8007fd8 <xTaskIncrementTick>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f52:	4b16      	ldr	r3, [pc, #88]	@ (8007fac <xTaskResumeAll+0x130>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1f1      	bne.n	8007f48 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007f64:	4b12      	ldr	r3, [pc, #72]	@ (8007fb0 <xTaskResumeAll+0x134>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f6a:	4b10      	ldr	r3, [pc, #64]	@ (8007fac <xTaskResumeAll+0x130>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f76:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb4 <xTaskResumeAll+0x138>)
 8007f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f86:	f001 f9e9 	bl	800935c <vPortExitCritical>

	return xAlreadyYielded;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000ff8 	.word	0x20000ff8
 8007f98:	20000fd0 	.word	0x20000fd0
 8007f9c:	20000f90 	.word	0x20000f90
 8007fa0:	20000fd8 	.word	0x20000fd8
 8007fa4:	20000b00 	.word	0x20000b00
 8007fa8:	20000afc 	.word	0x20000afc
 8007fac:	20000fe4 	.word	0x20000fe4
 8007fb0:	20000fe0 	.word	0x20000fe0
 8007fb4:	e000ed04 	.word	0xe000ed04

08007fb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fbe:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <xTaskGetTickCount+0x1c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fc4:	687b      	ldr	r3, [r7, #4]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000fd4 	.word	0x20000fd4

08007fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe2:	4b52      	ldr	r3, [pc, #328]	@ (800812c <xTaskIncrementTick+0x154>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f040 808f 	bne.w	800810a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fec:	4b50      	ldr	r3, [pc, #320]	@ (8008130 <xTaskIncrementTick+0x158>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8008130 <xTaskIncrementTick+0x158>)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d121      	bne.n	8008044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008000:	4b4c      	ldr	r3, [pc, #304]	@ (8008134 <xTaskIncrementTick+0x15c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	603b      	str	r3, [r7, #0]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xTaskIncrementTick+0x46>
 8008022:	4b44      	ldr	r3, [pc, #272]	@ (8008134 <xTaskIncrementTick+0x15c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	4b43      	ldr	r3, [pc, #268]	@ (8008138 <xTaskIncrementTick+0x160>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a41      	ldr	r2, [pc, #260]	@ (8008134 <xTaskIncrementTick+0x15c>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	4a41      	ldr	r2, [pc, #260]	@ (8008138 <xTaskIncrementTick+0x160>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	4b41      	ldr	r3, [pc, #260]	@ (800813c <xTaskIncrementTick+0x164>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <xTaskIncrementTick+0x164>)
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	f000 fada 	bl	80085f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008044:	4b3e      	ldr	r3, [pc, #248]	@ (8008140 <xTaskIncrementTick+0x168>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	429a      	cmp	r2, r3
 800804c:	d34e      	bcc.n	80080ec <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800804e:	4b39      	ldr	r3, [pc, #228]	@ (8008134 <xTaskIncrementTick+0x15c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xTaskIncrementTick+0x84>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <xTaskIncrementTick+0x86>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	4b37      	ldr	r3, [pc, #220]	@ (8008140 <xTaskIncrementTick+0x168>)
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	601a      	str	r2, [r3, #0]
					break;
 800806a:	e03f      	b.n	80080ec <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800806c:	4b31      	ldr	r3, [pc, #196]	@ (8008134 <xTaskIncrementTick+0x15c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d203      	bcs.n	800808c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008084:	4a2e      	ldr	r2, [pc, #184]	@ (8008140 <xTaskIncrementTick+0x168>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6013      	str	r3, [r2, #0]
						break;
 800808a:	e02f      	b.n	80080ec <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe ff89 	bl	8006fa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	3318      	adds	r3, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe ff80 	bl	8006fa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4b25      	ldr	r3, [pc, #148]	@ (8008144 <xTaskIncrementTick+0x16c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d903      	bls.n	80080bc <xTaskIncrementTick+0xe4>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a22      	ldr	r2, [pc, #136]	@ (8008144 <xTaskIncrementTick+0x16c>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008148 <xTaskIncrementTick+0x170>)
 80080ca:	441a      	add	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe ff0b 	bl	8006eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080dc:	4b1b      	ldr	r3, [pc, #108]	@ (800814c <xTaskIncrementTick+0x174>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3b3      	bcc.n	800804e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ea:	e7b0      	b.n	800804e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080ec:	4b17      	ldr	r3, [pc, #92]	@ (800814c <xTaskIncrementTick+0x174>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f2:	4915      	ldr	r1, [pc, #84]	@ (8008148 <xTaskIncrementTick+0x170>)
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d907      	bls.n	8008114 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e004      	b.n	8008114 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800810a:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <xTaskIncrementTick+0x178>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3301      	adds	r3, #1
 8008110:	4a0f      	ldr	r2, [pc, #60]	@ (8008150 <xTaskIncrementTick+0x178>)
 8008112:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008114:	4b0f      	ldr	r3, [pc, #60]	@ (8008154 <xTaskIncrementTick+0x17c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008120:	697b      	ldr	r3, [r7, #20]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000ff8 	.word	0x20000ff8
 8008130:	20000fd4 	.word	0x20000fd4
 8008134:	20000f88 	.word	0x20000f88
 8008138:	20000f8c 	.word	0x20000f8c
 800813c:	20000fe8 	.word	0x20000fe8
 8008140:	20000ff0 	.word	0x20000ff0
 8008144:	20000fd8 	.word	0x20000fd8
 8008148:	20000b00 	.word	0x20000b00
 800814c:	20000afc 	.word	0x20000afc
 8008150:	20000fe0 	.word	0x20000fe0
 8008154:	20000fe4 	.word	0x20000fe4

08008158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800815e:	4b28      	ldr	r3, [pc, #160]	@ (8008200 <vTaskSwitchContext+0xa8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008166:	4b27      	ldr	r3, [pc, #156]	@ (8008204 <vTaskSwitchContext+0xac>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800816c:	e042      	b.n	80081f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800816e:	4b25      	ldr	r3, [pc, #148]	@ (8008204 <vTaskSwitchContext+0xac>)
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008174:	4b24      	ldr	r3, [pc, #144]	@ (8008208 <vTaskSwitchContext+0xb0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	e011      	b.n	80081a0 <vTaskSwitchContext+0x48>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <vTaskSwitchContext+0x42>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	607b      	str	r3, [r7, #4]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <vTaskSwitchContext+0x3e>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3b01      	subs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	491a      	ldr	r1, [pc, #104]	@ (800820c <vTaskSwitchContext+0xb4>)
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0e3      	beq.n	800817c <vTaskSwitchContext+0x24>
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4a13      	ldr	r2, [pc, #76]	@ (800820c <vTaskSwitchContext+0xb4>)
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3308      	adds	r3, #8
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d104      	bne.n	80081e4 <vTaskSwitchContext+0x8c>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4a09      	ldr	r2, [pc, #36]	@ (8008210 <vTaskSwitchContext+0xb8>)
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4a06      	ldr	r2, [pc, #24]	@ (8008208 <vTaskSwitchContext+0xb0>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20000ff8 	.word	0x20000ff8
 8008204:	20000fe4 	.word	0x20000fe4
 8008208:	20000fd8 	.word	0x20000fd8
 800820c:	20000b00 	.word	0x20000b00
 8008210:	20000afc 	.word	0x20000afc

08008214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	60fb      	str	r3, [r7, #12]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <vTaskPlaceOnEventList+0x48>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3318      	adds	r3, #24
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7fe fe76 	bl	8006f36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800824a:	2101      	movs	r1, #1
 800824c:	6838      	ldr	r0, [r7, #0]
 800824e:	f000 fbad 	bl	80089ac <prvAddCurrentTaskToDelayedList>
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000afc 	.word	0x20000afc

08008260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	617b      	str	r3, [r7, #20]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800828a:	4b0a      	ldr	r3, [pc, #40]	@ (80082b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3318      	adds	r3, #24
 8008290:	4619      	mov	r1, r3
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7fe fe2b 	bl	8006eee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	68b8      	ldr	r0, [r7, #8]
 80082a8:	f000 fb80 	bl	80089ac <prvAddCurrentTaskToDelayedList>
	}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000afc 	.word	0x20000afc

080082b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10b      	bne.n	80082e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60fb      	str	r3, [r7, #12]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3318      	adds	r3, #24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fe5c 	bl	8006fa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008368 <xTaskRemoveFromEventList+0xb0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11d      	bne.n	8008334 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fe53 	bl	8006fa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	4b19      	ldr	r3, [pc, #100]	@ (800836c <xTaskRemoveFromEventList+0xb4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d903      	bls.n	8008316 <xTaskRemoveFromEventList+0x5e>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008312:	4a16      	ldr	r2, [pc, #88]	@ (800836c <xTaskRemoveFromEventList+0xb4>)
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831a:	4613      	mov	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4a13      	ldr	r2, [pc, #76]	@ (8008370 <xTaskRemoveFromEventList+0xb8>)
 8008324:	441a      	add	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fe fdde 	bl	8006eee <vListInsertEnd>
 8008332:	e005      	b.n	8008340 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	3318      	adds	r3, #24
 8008338:	4619      	mov	r1, r3
 800833a:	480e      	ldr	r0, [pc, #56]	@ (8008374 <xTaskRemoveFromEventList+0xbc>)
 800833c:	f7fe fdd7 	bl	8006eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4b0c      	ldr	r3, [pc, #48]	@ (8008378 <xTaskRemoveFromEventList+0xc0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d905      	bls.n	800835a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <xTaskRemoveFromEventList+0xc4>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e001      	b.n	800835e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800835e:	697b      	ldr	r3, [r7, #20]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20000ff8 	.word	0x20000ff8
 800836c:	20000fd8 	.word	0x20000fd8
 8008370:	20000b00 	.word	0x20000b00
 8008374:	20000f90 	.word	0x20000f90
 8008378:	20000afc 	.word	0x20000afc
 800837c:	20000fe4 	.word	0x20000fe4

08008380 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008388:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <vTaskInternalSetTimeOutState+0x24>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008390:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <vTaskInternalSetTimeOutState+0x28>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	605a      	str	r2, [r3, #4]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000fe8 	.word	0x20000fe8
 80083a8:	20000fd4 	.word	0x20000fd4

080083ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	613b      	str	r3, [r7, #16]
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60fb      	str	r3, [r7, #12]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80083f2:	f000 ff81 	bl	80092f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <xTaskCheckForTimeOut+0xc0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d102      	bne.n	8008416 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008410:	2300      	movs	r3, #0
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	e023      	b.n	800845e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <xTaskCheckForTimeOut+0xc4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d007      	beq.n	8008432 <xTaskCheckForTimeOut+0x86>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	429a      	cmp	r2, r3
 800842a:	d302      	bcc.n	8008432 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800842c:	2301      	movs	r3, #1
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e015      	b.n	800845e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	429a      	cmp	r2, r3
 800843a:	d20b      	bcs.n	8008454 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff ff99 	bl	8008380 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
 8008452:	e004      	b.n	800845e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f000 ff7d 	bl	800935c <vPortExitCritical>

	return xReturn;
 8008462:	69fb      	ldr	r3, [r7, #28]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000fd4 	.word	0x20000fd4
 8008470:	20000fe8 	.word	0x20000fe8

08008474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008478:	4b03      	ldr	r3, [pc, #12]	@ (8008488 <vTaskMissedYield+0x14>)
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]
}
 800847e:	bf00      	nop
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	20000fe4 	.word	0x20000fe4

0800848c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008494:	f000 f852 	bl	800853c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008498:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <prvIdleTask+0x28>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d9f9      	bls.n	8008494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084a0:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <prvIdleTask+0x2c>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084b0:	e7f0      	b.n	8008494 <prvIdleTask+0x8>
 80084b2:	bf00      	nop
 80084b4:	20000b00 	.word	0x20000b00
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
 80084c6:	e00c      	b.n	80084e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4a12      	ldr	r2, [pc, #72]	@ (800851c <prvInitialiseTaskLists+0x60>)
 80084d4:	4413      	add	r3, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fcdc 	bl	8006e94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3301      	adds	r3, #1
 80084e0:	607b      	str	r3, [r7, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b37      	cmp	r3, #55	@ 0x37
 80084e6:	d9ef      	bls.n	80084c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084e8:	480d      	ldr	r0, [pc, #52]	@ (8008520 <prvInitialiseTaskLists+0x64>)
 80084ea:	f7fe fcd3 	bl	8006e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084ee:	480d      	ldr	r0, [pc, #52]	@ (8008524 <prvInitialiseTaskLists+0x68>)
 80084f0:	f7fe fcd0 	bl	8006e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084f4:	480c      	ldr	r0, [pc, #48]	@ (8008528 <prvInitialiseTaskLists+0x6c>)
 80084f6:	f7fe fccd 	bl	8006e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084fa:	480c      	ldr	r0, [pc, #48]	@ (800852c <prvInitialiseTaskLists+0x70>)
 80084fc:	f7fe fcca 	bl	8006e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008500:	480b      	ldr	r0, [pc, #44]	@ (8008530 <prvInitialiseTaskLists+0x74>)
 8008502:	f7fe fcc7 	bl	8006e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008506:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <prvInitialiseTaskLists+0x78>)
 8008508:	4a05      	ldr	r2, [pc, #20]	@ (8008520 <prvInitialiseTaskLists+0x64>)
 800850a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <prvInitialiseTaskLists+0x7c>)
 800850e:	4a05      	ldr	r2, [pc, #20]	@ (8008524 <prvInitialiseTaskLists+0x68>)
 8008510:	601a      	str	r2, [r3, #0]
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000b00 	.word	0x20000b00
 8008520:	20000f60 	.word	0x20000f60
 8008524:	20000f74 	.word	0x20000f74
 8008528:	20000f90 	.word	0x20000f90
 800852c:	20000fa4 	.word	0x20000fa4
 8008530:	20000fbc 	.word	0x20000fbc
 8008534:	20000f88 	.word	0x20000f88
 8008538:	20000f8c 	.word	0x20000f8c

0800853c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008542:	e019      	b.n	8008578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008544:	f000 fed8 	bl	80092f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008548:	4b10      	ldr	r3, [pc, #64]	@ (800858c <prvCheckTasksWaitingTermination+0x50>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe fd27 	bl	8006fa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800855a:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <prvCheckTasksWaitingTermination+0x54>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3b01      	subs	r3, #1
 8008560:	4a0b      	ldr	r2, [pc, #44]	@ (8008590 <prvCheckTasksWaitingTermination+0x54>)
 8008562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <prvCheckTasksWaitingTermination+0x58>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3b01      	subs	r3, #1
 800856a:	4a0a      	ldr	r2, [pc, #40]	@ (8008594 <prvCheckTasksWaitingTermination+0x58>)
 800856c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800856e:	f000 fef5 	bl	800935c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f810 	bl	8008598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008578:	4b06      	ldr	r3, [pc, #24]	@ (8008594 <prvCheckTasksWaitingTermination+0x58>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e1      	bne.n	8008544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000fa4 	.word	0x20000fa4
 8008590:	20000fd0 	.word	0x20000fd0
 8008594:	20000fb8 	.word	0x20000fb8

08008598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 f88c 	bl	80096cc <vPortFree>
				vPortFree( pxTCB );
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f889 	bl	80096cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085ba:	e019      	b.n	80085f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d103      	bne.n	80085ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 f880 	bl	80096cc <vPortFree>
	}
 80085cc:	e010      	b.n	80085f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d00b      	beq.n	80085f0 <prvDeleteTCB+0x58>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	60fb      	str	r3, [r7, #12]
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <prvDeleteTCB+0x54>
	}
 80085f0:	bf00      	nop
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fe:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <prvResetNextTaskUnblockTime+0x44>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <prvResetNextTaskUnblockTime+0x14>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <prvResetNextTaskUnblockTime+0x16>
 800860c:	2300      	movs	r3, #0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008612:	4b0b      	ldr	r3, [pc, #44]	@ (8008640 <prvResetNextTaskUnblockTime+0x48>)
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800861a:	e008      	b.n	800862e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800861c:	4b07      	ldr	r3, [pc, #28]	@ (800863c <prvResetNextTaskUnblockTime+0x44>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	4a05      	ldr	r2, [pc, #20]	@ (8008640 <prvResetNextTaskUnblockTime+0x48>)
 800862c:	6013      	str	r3, [r2, #0]
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000f88 	.word	0x20000f88
 8008640:	20000ff0 	.word	0x20000ff0

08008644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800864a:	4b0b      	ldr	r3, [pc, #44]	@ (8008678 <xTaskGetSchedulerState+0x34>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d102      	bne.n	8008658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008652:	2301      	movs	r3, #1
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	e008      	b.n	800866a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008658:	4b08      	ldr	r3, [pc, #32]	@ (800867c <xTaskGetSchedulerState+0x38>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008660:	2302      	movs	r3, #2
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	e001      	b.n	800866a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800866a:	687b      	ldr	r3, [r7, #4]
	}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	20000fdc 	.word	0x20000fdc
 800867c:	20000ff8 	.word	0x20000ff8

08008680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d058      	beq.n	8008748 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008696:	4b2f      	ldr	r3, [pc, #188]	@ (8008754 <xTaskPriorityDisinherit+0xd4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d00b      	beq.n	80086b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60fb      	str	r3, [r7, #12]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10b      	bne.n	80086d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60bb      	str	r3, [r7, #8]
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	e7fd      	b.n	80086d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086dc:	1e5a      	subs	r2, r3, #1
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d02c      	beq.n	8008748 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d128      	bne.n	8008748 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fc54 	bl	8006fa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008718:	4b0f      	ldr	r3, [pc, #60]	@ (8008758 <xTaskPriorityDisinherit+0xd8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d903      	bls.n	8008728 <xTaskPriorityDisinherit+0xa8>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008724:	4a0c      	ldr	r2, [pc, #48]	@ (8008758 <xTaskPriorityDisinherit+0xd8>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a09      	ldr	r2, [pc, #36]	@ (800875c <xTaskPriorityDisinherit+0xdc>)
 8008736:	441a      	add	r2, r3
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe fbd5 	bl	8006eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008748:	697b      	ldr	r3, [r7, #20]
	}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000afc 	.word	0x20000afc
 8008758:	20000fd8 	.word	0x20000fd8
 800875c:	20000b00 	.word	0x20000b00

08008760 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800876e:	f000 fdc3 	bl	80092f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008772:	4b26      	ldr	r3, [pc, #152]	@ (800880c <xTaskNotifyWait+0xac>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d01a      	beq.n	80087b6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008780:	4b22      	ldr	r3, [pc, #136]	@ (800880c <xTaskNotifyWait+0xac>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	43d2      	mvns	r2, r2
 800878a:	400a      	ands	r2, r1
 800878c:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800878e:	4b1f      	ldr	r3, [pc, #124]	@ (800880c <xTaskNotifyWait+0xac>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800879e:	2101      	movs	r1, #1
 80087a0:	6838      	ldr	r0, [r7, #0]
 80087a2:	f000 f903 	bl	80089ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80087a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008810 <xTaskNotifyWait+0xb0>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80087b6:	f000 fdd1 	bl	800935c <vPortExitCritical>

		taskENTER_CRITICAL();
 80087ba:	f000 fd9d 	bl	80092f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80087c4:	4b11      	ldr	r3, [pc, #68]	@ (800880c <xTaskNotifyWait+0xac>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80087ce:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <xTaskNotifyWait+0xac>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d002      	beq.n	80087e2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	e008      	b.n	80087f4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <xTaskNotifyWait+0xac>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	43d2      	mvns	r2, r2
 80087ec:	400a      	ands	r2, r1
 80087ee:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <xTaskNotifyWait+0xac>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80087fe:	f000 fdad 	bl	800935c <vPortExitCritical>

		return xReturn;
 8008802:	697b      	ldr	r3, [r7, #20]
	}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20000afc 	.word	0x20000afc
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08e      	sub	sp, #56	@ 0x38
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	4613      	mov	r3, r2
 8008822:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008824:	2301      	movs	r3, #1
 8008826:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	e7fd      	b.n	8008842 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008846:	f000 fe37 	bl	80094b8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800884e:	f3ef 8211 	mrs	r2, BASEPRI
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	623a      	str	r2, [r7, #32]
 8008864:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008866:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008868:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800887e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	2202      	movs	r2, #2
 8008886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	2b04      	cmp	r3, #4
 800888e:	d829      	bhi.n	80088e4 <xTaskGenericNotifyFromISR+0xd0>
 8008890:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <xTaskGenericNotifyFromISR+0x84>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088e5 	.word	0x080088e5
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088bb 	.word	0x080088bb
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088cf 	.word	0x080088cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80088b8:	e014      	b.n	80088e4 <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80088c4:	e00e      	b.n	80088e4 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80088cc:	e00a      	b.n	80088e4 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80088ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d003      	beq.n	80088de <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80088dc:	e001      	b.n	80088e2 <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80088e2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80088e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d148      	bne.n	800897e <xTaskGenericNotifyFromISR+0x16a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	61bb      	str	r3, [r7, #24]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890c:	4b21      	ldr	r3, [pc, #132]	@ (8008994 <xTaskGenericNotifyFromISR+0x180>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d11d      	bne.n	8008950 <xTaskGenericNotifyFromISR+0x13c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	3304      	adds	r3, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fb45 	bl	8006fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008922:	4b1d      	ldr	r3, [pc, #116]	@ (8008998 <xTaskGenericNotifyFromISR+0x184>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d903      	bls.n	8008932 <xTaskGenericNotifyFromISR+0x11e>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	4a1a      	ldr	r2, [pc, #104]	@ (8008998 <xTaskGenericNotifyFromISR+0x184>)
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4a17      	ldr	r2, [pc, #92]	@ (800899c <xTaskGenericNotifyFromISR+0x188>)
 8008940:	441a      	add	r2, r3
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	3304      	adds	r3, #4
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f7fe fad0 	bl	8006eee <vListInsertEnd>
 800894e:	e005      	b.n	800895c <xTaskGenericNotifyFromISR+0x148>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	3318      	adds	r3, #24
 8008954:	4619      	mov	r1, r3
 8008956:	4812      	ldr	r0, [pc, #72]	@ (80089a0 <xTaskGenericNotifyFromISR+0x18c>)
 8008958:	f7fe fac9 	bl	8006eee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <xTaskGenericNotifyFromISR+0x190>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	429a      	cmp	r2, r3
 8008968:	d909      	bls.n	800897e <xTaskGenericNotifyFromISR+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800896a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <xTaskGenericNotifyFromISR+0x164>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008972:	2201      	movs	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e002      	b.n	800897e <xTaskGenericNotifyFromISR+0x16a>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008978:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <xTaskGenericNotifyFromISR+0x194>)
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f383 8811 	msr	BASEPRI, r3
}
 8008988:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800898a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800898c:	4618      	mov	r0, r3
 800898e:	3738      	adds	r7, #56	@ 0x38
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000ff8 	.word	0x20000ff8
 8008998:	20000fd8 	.word	0x20000fd8
 800899c:	20000b00 	.word	0x20000b00
 80089a0:	20000f90 	.word	0x20000f90
 80089a4:	20000afc 	.word	0x20000afc
 80089a8:	20000fe4 	.word	0x20000fe4

080089ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089b6:	4b21      	ldr	r3, [pc, #132]	@ (8008a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089bc:	4b20      	ldr	r3, [pc, #128]	@ (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe faf0 	bl	8006fa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ce:	d10a      	bne.n	80089e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4819      	ldr	r0, [pc, #100]	@ (8008a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80089e0:	f7fe fa85 	bl	8006eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089e4:	e026      	b.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4413      	add	r3, r2
 80089ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089ee:	4b14      	ldr	r3, [pc, #80]	@ (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d209      	bcs.n	8008a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089fe:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fa93 	bl	8006f36 <vListInsert>
}
 8008a10:	e010      	b.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a12:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7fe fa89 	bl	8006f36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a24:	4b0a      	ldr	r3, [pc, #40]	@ (8008a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d202      	bcs.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a2e:	4a08      	ldr	r2, [pc, #32]	@ (8008a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6013      	str	r3, [r2, #0]
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000fd4 	.word	0x20000fd4
 8008a40:	20000afc 	.word	0x20000afc
 8008a44:	20000fbc 	.word	0x20000fbc
 8008a48:	20000f8c 	.word	0x20000f8c
 8008a4c:	20000f88 	.word	0x20000f88
 8008a50:	20000ff0 	.word	0x20000ff0

08008a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	@ 0x28
 8008a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a5e:	f000 fad9 	bl	8009014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a62:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad8 <xTimerCreateTimerTask+0x84>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d021      	beq.n	8008aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a72:	1d3a      	adds	r2, r7, #4
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe f9ef 	bl	8006e60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	9202      	str	r2, [sp, #8]
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	2300      	movs	r3, #0
 8008a92:	460a      	mov	r2, r1
 8008a94:	4911      	ldr	r1, [pc, #68]	@ (8008adc <xTimerCreateTimerTask+0x88>)
 8008a96:	4812      	ldr	r0, [pc, #72]	@ (8008ae0 <xTimerCreateTimerTask+0x8c>)
 8008a98:	f7fe ffa8 	bl	80079ec <xTaskCreateStatic>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4a11      	ldr	r2, [pc, #68]	@ (8008ae4 <xTimerCreateTimerTask+0x90>)
 8008aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008aa2:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <xTimerCreateTimerTask+0x90>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10b      	bne.n	8008acc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	613b      	str	r3, [r7, #16]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008acc:	697b      	ldr	r3, [r7, #20]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000102c 	.word	0x2000102c
 8008adc:	0800c61c 	.word	0x0800c61c
 8008ae0:	08008c09 	.word	0x08008c09
 8008ae4:	20001030 	.word	0x20001030

08008ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	@ 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10b      	bne.n	8008b18 <xTimerGenericCommand+0x30>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	623b      	str	r3, [r7, #32]
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	e7fd      	b.n	8008b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b18:	4b19      	ldr	r3, [pc, #100]	@ (8008b80 <xTimerGenericCommand+0x98>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d02a      	beq.n	8008b76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	dc18      	bgt.n	8008b64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b32:	f7ff fd87 	bl	8008644 <xTaskGetSchedulerState>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d109      	bne.n	8008b50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b3c:	4b10      	ldr	r3, [pc, #64]	@ (8008b80 <xTimerGenericCommand+0x98>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	f107 0110 	add.w	r1, r7, #16
 8008b44:	2300      	movs	r3, #0
 8008b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b48:	f7fe fb62 	bl	8007210 <xQueueGenericSend>
 8008b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b4e:	e012      	b.n	8008b76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b50:	4b0b      	ldr	r3, [pc, #44]	@ (8008b80 <xTimerGenericCommand+0x98>)
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	f107 0110 	add.w	r1, r7, #16
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7fe fb58 	bl	8007210 <xQueueGenericSend>
 8008b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8008b62:	e008      	b.n	8008b76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <xTimerGenericCommand+0x98>)
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	f107 0110 	add.w	r1, r7, #16
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	f7fe fc50 	bl	8007414 <xQueueGenericSendFromISR>
 8008b74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	@ 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	2000102c 	.word	0x2000102c

08008b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c04 <prvProcessExpiredTimer+0x80>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fa03 	bl	8006fa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d123      	bne.n	8008bf2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	18d1      	adds	r1, r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f000 f8cc 	bl	8008d54 <prvInsertTimerInActiveList>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d017      	beq.n	8008bf2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f7ff ff8b 	bl	8008ae8 <xTimerGenericCommand>
 8008bd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10b      	bne.n	8008bf2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60fb      	str	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	4798      	blx	r3
}
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20001024 	.word	0x20001024

08008c08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f859 	bl	8008ccc <prvGetNextExpireTime>
 8008c1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f805 	bl	8008c30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c26:	f000 f8d7 	bl	8008dd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c2a:	bf00      	nop
 8008c2c:	e7f0      	b.n	8008c10 <prvTimerTask+0x8>
	...

08008c30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c3a:	f7ff f911 	bl	8007e60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f866 	bl	8008d14 <prvSampleTimeNow>
 8008c48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d130      	bne.n	8008cb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <prvProcessTimerOrBlockTask+0x3c>
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d806      	bhi.n	8008c6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c5e:	f7ff f90d 	bl	8007e7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff ff8d 	bl	8008b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c6a:	e024      	b.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d008      	beq.n	8008c84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c72:	4b13      	ldr	r3, [pc, #76]	@ (8008cc0 <prvProcessTimerOrBlockTask+0x90>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2301      	moveq	r3, #1
 8008c7e:	2300      	movne	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c84:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc4 <prvProcessTimerOrBlockTask+0x94>)
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7fe fe77 	bl	8007984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c96:	f7ff f8f1 	bl	8007e7c <xTaskResumeAll>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ca0:	4b09      	ldr	r3, [pc, #36]	@ (8008cc8 <prvProcessTimerOrBlockTask+0x98>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
}
 8008cb0:	e001      	b.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cb2:	f7ff f8e3 	bl	8007e7c <xTaskResumeAll>
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001028 	.word	0x20001028
 8008cc4:	2000102c 	.word	0x2000102c
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d10 <prvGetNextExpireTime+0x44>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf0c      	ite	eq
 8008cde:	2301      	moveq	r3, #1
 8008ce0:	2300      	movne	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cf2:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <prvGetNextExpireTime+0x44>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	e001      	b.n	8008d02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d02:	68fb      	ldr	r3, [r7, #12]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	20001024 	.word	0x20001024

08008d14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d1c:	f7ff f94c 	bl	8007fb8 <xTaskGetTickCount>
 8008d20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d22:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <prvSampleTimeNow+0x3c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d205      	bcs.n	8008d38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d2c:	f000 f910 	bl	8008f50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	e002      	b.n	8008d3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d3e:	4a04      	ldr	r2, [pc, #16]	@ (8008d50 <prvSampleTimeNow+0x3c>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d44:	68fb      	ldr	r3, [r7, #12]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20001034 	.word	0x20001034

08008d54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d812      	bhi.n	8008da0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d302      	bcc.n	8008d8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e01b      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d8e:	4b10      	ldr	r3, [pc, #64]	@ (8008dd0 <prvInsertTimerInActiveList+0x7c>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	4610      	mov	r0, r2
 8008d9a:	f7fe f8cc 	bl	8006f36 <vListInsert>
 8008d9e:	e012      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d206      	bcs.n	8008db6 <prvInsertTimerInActiveList+0x62>
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e007      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008db6:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <prvInsertTimerInActiveList+0x80>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f7fe f8b8 	bl	8006f36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001028 	.word	0x20001028
 8008dd4:	20001024 	.word	0x20001024

08008dd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	@ 0x38
 8008ddc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dde:	e0a5      	b.n	8008f2c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da19      	bge.n	8008e1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008de6:	1d3b      	adds	r3, r7, #4
 8008de8:	3304      	adds	r3, #4
 8008dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	61fb      	str	r3, [r7, #28]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e10:	6850      	ldr	r0, [r2, #4]
 8008e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e14:	6892      	ldr	r2, [r2, #8]
 8008e16:	4611      	mov	r1, r2
 8008e18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f2c0 8085 	blt.w	8008f2c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe f8b8 	bl	8006fa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e38:	463b      	mov	r3, r7
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff ff6a 	bl	8008d14 <prvSampleTimeNow>
 8008e40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d86c      	bhi.n	8008f22 <prvProcessReceivedCommands+0x14a>
 8008e48:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <prvProcessReceivedCommands+0x78>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008f23 	.word	0x08008f23
 8008e60:	08008ed7 	.word	0x08008ed7
 8008e64:	08008f11 	.word	0x08008f11
 8008e68:	08008e79 	.word	0x08008e79
 8008e6c:	08008e79 	.word	0x08008e79
 8008e70:	08008f23 	.word	0x08008f23
 8008e74:	08008ed7 	.word	0x08008ed7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	18d1      	adds	r1, r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e86:	f7ff ff65 	bl	8008d54 <prvInsertTimerInActiveList>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d04a      	beq.n	8008f26 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d142      	bne.n	8008f26 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	441a      	add	r2, r3
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eb2:	f7ff fe19 	bl	8008ae8 <xTimerGenericCommand>
 8008eb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d133      	bne.n	8008f26 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	61bb      	str	r3, [r7, #24]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10b      	bne.n	8008efc <prvProcessReceivedCommands+0x124>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	617b      	str	r3, [r7, #20]
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	699a      	ldr	r2, [r3, #24]
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	18d1      	adds	r1, r2, r3
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f0a:	f7ff ff23 	bl	8008d54 <prvInsertTimerInActiveList>
					break;
 8008f0e:	e00d      	b.n	8008f2c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8008f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f1c:	f000 fbd6 	bl	80096cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f20:	e003      	b.n	8008f2a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <prvProcessReceivedCommands+0x154>
					break;
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <prvProcessReceivedCommands+0x154>
					break;
 8008f2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f2c:	4b07      	ldr	r3, [pc, #28]	@ (8008f4c <prvProcessReceivedCommands+0x174>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	1d39      	adds	r1, r7, #4
 8008f32:	2200      	movs	r2, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fb09 	bl	800754c <xQueueReceive>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f47f af4f 	bne.w	8008de0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	3730      	adds	r7, #48	@ 0x30
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	2000102c 	.word	0x2000102c

08008f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f56:	e046      	b.n	8008fe6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f58:	4b2c      	ldr	r3, [pc, #176]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f62:	4b2a      	ldr	r3, [pc, #168]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe f819 	bl	8006fa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d12f      	bne.n	8008fe6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d90e      	bls.n	8008fb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fa4:	4b19      	ldr	r3, [pc, #100]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fd ffc1 	bl	8006f36 <vListInsert>
 8008fb4:	e017      	b.n	8008fe6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff fd91 	bl	8008ae8 <xTimerGenericCommand>
 8008fc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10b      	bne.n	8008fe6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	603b      	str	r3, [r7, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fe6:	4b09      	ldr	r3, [pc, #36]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1b3      	bne.n	8008f58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ff0:	4b06      	ldr	r3, [pc, #24]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ff6:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <prvSwitchTimerLists+0xc0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a04      	ldr	r2, [pc, #16]	@ (800900c <prvSwitchTimerLists+0xbc>)
 8008ffc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ffe:	4a04      	ldr	r2, [pc, #16]	@ (8009010 <prvSwitchTimerLists+0xc0>)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20001024 	.word	0x20001024
 8009010:	20001028 	.word	0x20001028

08009014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800901a:	f000 f96d 	bl	80092f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800901e:	4b15      	ldr	r3, [pc, #84]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d120      	bne.n	8009068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009026:	4814      	ldr	r0, [pc, #80]	@ (8009078 <prvCheckForValidListAndQueue+0x64>)
 8009028:	f7fd ff34 	bl	8006e94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800902c:	4813      	ldr	r0, [pc, #76]	@ (800907c <prvCheckForValidListAndQueue+0x68>)
 800902e:	f7fd ff31 	bl	8006e94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009032:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <prvCheckForValidListAndQueue+0x6c>)
 8009034:	4a10      	ldr	r2, [pc, #64]	@ (8009078 <prvCheckForValidListAndQueue+0x64>)
 8009036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009038:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <prvCheckForValidListAndQueue+0x70>)
 800903a:	4a10      	ldr	r2, [pc, #64]	@ (800907c <prvCheckForValidListAndQueue+0x68>)
 800903c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800903e:	2300      	movs	r3, #0
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	4b11      	ldr	r3, [pc, #68]	@ (8009088 <prvCheckForValidListAndQueue+0x74>)
 8009044:	4a11      	ldr	r2, [pc, #68]	@ (800908c <prvCheckForValidListAndQueue+0x78>)
 8009046:	2110      	movs	r1, #16
 8009048:	200a      	movs	r0, #10
 800904a:	f7fe f841 	bl	80070d0 <xQueueGenericCreateStatic>
 800904e:	4603      	mov	r3, r0
 8009050:	4a08      	ldr	r2, [pc, #32]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009054:	4b07      	ldr	r3, [pc, #28]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800905c:	4b05      	ldr	r3, [pc, #20]	@ (8009074 <prvCheckForValidListAndQueue+0x60>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	490b      	ldr	r1, [pc, #44]	@ (8009090 <prvCheckForValidListAndQueue+0x7c>)
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fc64 	bl	8007930 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009068:	f000 f978 	bl	800935c <vPortExitCritical>
}
 800906c:	bf00      	nop
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	2000102c 	.word	0x2000102c
 8009078:	20000ffc 	.word	0x20000ffc
 800907c:	20001010 	.word	0x20001010
 8009080:	20001024 	.word	0x20001024
 8009084:	20001028 	.word	0x20001028
 8009088:	200010d8 	.word	0x200010d8
 800908c:	20001038 	.word	0x20001038
 8009090:	0800c624 	.word	0x0800c624

08009094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3b04      	subs	r3, #4
 80090a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090c4:	4a0c      	ldr	r2, [pc, #48]	@ (80090f8 <pxPortInitialiseStack+0x64>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3b14      	subs	r3, #20
 80090ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f06f 0202 	mvn.w	r2, #2
 80090e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3b20      	subs	r3, #32
 80090e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ea:	68fb      	ldr	r3, [r7, #12]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	080090fd 	.word	0x080090fd

080090fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009106:	4b13      	ldr	r3, [pc, #76]	@ (8009154 <prvTaskExitError+0x58>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d00b      	beq.n	8009128 <prvTaskExitError+0x2c>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <prvTaskExitError+0x28>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60bb      	str	r3, [r7, #8]
}
 800913a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800913c:	bf00      	nop
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0fc      	beq.n	800913e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	2000000c 	.word	0x2000000c
	...

08009160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009160:	4b07      	ldr	r3, [pc, #28]	@ (8009180 <pxCurrentTCBConst2>)
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	6808      	ldr	r0, [r1, #0]
 8009166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	f380 8809 	msr	PSP, r0
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8811 	msr	BASEPRI, r0
 800917a:	4770      	bx	lr
 800917c:	f3af 8000 	nop.w

08009180 <pxCurrentTCBConst2>:
 8009180:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009188:	4808      	ldr	r0, [pc, #32]	@ (80091ac <prvPortStartFirstTask+0x24>)
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f380 8808 	msr	MSP, r0
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8814 	msr	CONTROL, r0
 800919a:	b662      	cpsie	i
 800919c:	b661      	cpsie	f
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	df00      	svc	0
 80091a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091aa:	bf00      	nop
 80091ac:	e000ed08 	.word	0xe000ed08

080091b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091b6:	4b47      	ldr	r3, [pc, #284]	@ (80092d4 <xPortStartScheduler+0x124>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a47      	ldr	r2, [pc, #284]	@ (80092d8 <xPortStartScheduler+0x128>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d10b      	bne.n	80091d8 <xPortStartScheduler+0x28>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091d8:	4b3e      	ldr	r3, [pc, #248]	@ (80092d4 <xPortStartScheduler+0x124>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a3f      	ldr	r2, [pc, #252]	@ (80092dc <xPortStartScheduler+0x12c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d10b      	bne.n	80091fa <xPortStartScheduler+0x4a>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	613b      	str	r3, [r7, #16]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091fa:	4b39      	ldr	r3, [pc, #228]	@ (80092e0 <xPortStartScheduler+0x130>)
 80091fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	22ff      	movs	r2, #255	@ 0xff
 800920a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800921c:	b2da      	uxtb	r2, r3
 800921e:	4b31      	ldr	r3, [pc, #196]	@ (80092e4 <xPortStartScheduler+0x134>)
 8009220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009224:	2207      	movs	r2, #7
 8009226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009228:	e009      	b.n	800923e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800922a:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <xPortStartScheduler+0x138>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3b01      	subs	r3, #1
 8009230:	4a2d      	ldr	r2, [pc, #180]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	b2db      	uxtb	r3, r3
 800923c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	2b80      	cmp	r3, #128	@ 0x80
 8009248:	d0ef      	beq.n	800922a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800924a:	4b27      	ldr	r3, [pc, #156]	@ (80092e8 <xPortStartScheduler+0x138>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1c3 0307 	rsb	r3, r3, #7
 8009252:	2b04      	cmp	r3, #4
 8009254:	d00b      	beq.n	800926e <xPortStartScheduler+0xbe>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60bb      	str	r3, [r7, #8]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800926e:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	4a1c      	ldr	r2, [pc, #112]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009278:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <xPortStartScheduler+0x138>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009280:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <xPortStartScheduler+0x138>)
 8009282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800928c:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <xPortStartScheduler+0x13c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a16      	ldr	r2, [pc, #88]	@ (80092ec <xPortStartScheduler+0x13c>)
 8009292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009298:	4b14      	ldr	r3, [pc, #80]	@ (80092ec <xPortStartScheduler+0x13c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a13      	ldr	r2, [pc, #76]	@ (80092ec <xPortStartScheduler+0x13c>)
 800929e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092a4:	f000 f8da 	bl	800945c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092a8:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <xPortStartScheduler+0x140>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092ae:	f000 f8f9 	bl	80094a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092b2:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <xPortStartScheduler+0x144>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0f      	ldr	r2, [pc, #60]	@ (80092f4 <xPortStartScheduler+0x144>)
 80092b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80092bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092be:	f7ff ff63 	bl	8009188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092c2:	f7fe ff49 	bl	8008158 <vTaskSwitchContext>
	prvTaskExitError();
 80092c6:	f7ff ff19 	bl	80090fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed00 	.word	0xe000ed00
 80092d8:	410fc271 	.word	0x410fc271
 80092dc:	410fc270 	.word	0x410fc270
 80092e0:	e000e400 	.word	0xe000e400
 80092e4:	20001128 	.word	0x20001128
 80092e8:	2000112c 	.word	0x2000112c
 80092ec:	e000ed20 	.word	0xe000ed20
 80092f0:	2000000c 	.word	0x2000000c
 80092f4:	e000ef34 	.word	0xe000ef34

080092f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <vPortEnterCritical+0x5c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3301      	adds	r3, #1
 8009318:	4a0e      	ldr	r2, [pc, #56]	@ (8009354 <vPortEnterCritical+0x5c>)
 800931a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800931c:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <vPortEnterCritical+0x5c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d110      	bne.n	8009346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009324:	4b0c      	ldr	r3, [pc, #48]	@ (8009358 <vPortEnterCritical+0x60>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <vPortEnterCritical+0x4e>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <vPortEnterCritical+0x4a>
	}
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	2000000c 	.word	0x2000000c
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009362:	4b12      	ldr	r3, [pc, #72]	@ (80093ac <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <vPortExitCritical+0x26>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	607b      	str	r3, [r7, #4]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <vPortExitCritical+0x50>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <vPortExitCritical+0x50>)
 800938a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <vPortExitCritical+0x50>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d105      	bne.n	80093a0 <vPortExitCritical+0x44>
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f383 8811 	msr	BASEPRI, r3
}
 800939e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	2000000c 	.word	0x2000000c

080093b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093b0:	f3ef 8009 	mrs	r0, PSP
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <pxCurrentTCBConst>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	f01e 0f10 	tst.w	lr, #16
 80093c0:	bf08      	it	eq
 80093c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093d4:	f380 8811 	msr	BASEPRI, r0
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f7fe feba 	bl	8008158 <vTaskSwitchContext>
 80093e4:	f04f 0000 	mov.w	r0, #0
 80093e8:	f380 8811 	msr	BASEPRI, r0
 80093ec:	bc09      	pop	{r0, r3}
 80093ee:	6819      	ldr	r1, [r3, #0]
 80093f0:	6808      	ldr	r0, [r1, #0]
 80093f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f6:	f01e 0f10 	tst.w	lr, #16
 80093fa:	bf08      	it	eq
 80093fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009400:	f380 8809 	msr	PSP, r0
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	f3af 8000 	nop.w

08009410 <pxCurrentTCBConst>:
 8009410:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop

08009418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	607b      	str	r3, [r7, #4]
}
 8009430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009432:	f7fe fdd1 	bl	8007fd8 <xTaskIncrementTick>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800943c:	4b06      	ldr	r3, [pc, #24]	@ (8009458 <SysTick_Handler+0x40>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f383 8811 	msr	BASEPRI, r3
}
 800944e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009460:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009466:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <vPortSetupTimerInterrupt+0x38>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <vPortSetupTimerInterrupt+0x3c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0a      	ldr	r2, [pc, #40]	@ (800949c <vPortSetupTimerInterrupt+0x40>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	099b      	lsrs	r3, r3, #6
 8009478:	4a09      	ldr	r2, [pc, #36]	@ (80094a0 <vPortSetupTimerInterrupt+0x44>)
 800947a:	3b01      	subs	r3, #1
 800947c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800947e:	4b04      	ldr	r3, [pc, #16]	@ (8009490 <vPortSetupTimerInterrupt+0x34>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	e000e010 	.word	0xe000e010
 8009494:	e000e018 	.word	0xe000e018
 8009498:	20000000 	.word	0x20000000
 800949c:	10624dd3 	.word	0x10624dd3
 80094a0:	e000e014 	.word	0xe000e014

080094a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80094b4 <vPortEnableVFP+0x10>
 80094a8:	6801      	ldr	r1, [r0, #0]
 80094aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80094ae:	6001      	str	r1, [r0, #0]
 80094b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094b2:	bf00      	nop
 80094b4:	e000ed88 	.word	0xe000ed88

080094b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094be:	f3ef 8305 	mrs	r3, IPSR
 80094c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b0f      	cmp	r3, #15
 80094c8:	d915      	bls.n	80094f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ca:	4a18      	ldr	r2, [pc, #96]	@ (800952c <vPortValidateInterruptPriority+0x74>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4413      	add	r3, r2
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094d4:	4b16      	ldr	r3, [pc, #88]	@ (8009530 <vPortValidateInterruptPriority+0x78>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	7afa      	ldrb	r2, [r7, #11]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d20b      	bcs.n	80094f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	607b      	str	r3, [r7, #4]
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	e7fd      	b.n	80094f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <vPortValidateInterruptPriority+0x7c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009538 <vPortValidateInterruptPriority+0x80>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d90b      	bls.n	800951e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	603b      	str	r3, [r7, #0]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <vPortValidateInterruptPriority+0x62>
	}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000e3f0 	.word	0xe000e3f0
 8009530:	20001128 	.word	0x20001128
 8009534:	e000ed0c 	.word	0xe000ed0c
 8009538:	2000112c 	.word	0x2000112c

0800953c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	@ 0x28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009548:	f7fe fc8a 	bl	8007e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800954c:	4b5a      	ldr	r3, [pc, #360]	@ (80096b8 <pvPortMalloc+0x17c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009554:	f000 f916 	bl	8009784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009558:	4b58      	ldr	r3, [pc, #352]	@ (80096bc <pvPortMalloc+0x180>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4013      	ands	r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 8090 	bne.w	8009686 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01e      	beq.n	80095aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800956c:	2208      	movs	r2, #8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d015      	beq.n	80095aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f023 0307 	bic.w	r3, r3, #7
 8009584:	3308      	adds	r3, #8
 8009586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <pvPortMalloc+0x6e>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	617b      	str	r3, [r7, #20]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d06a      	beq.n	8009686 <pvPortMalloc+0x14a>
 80095b0:	4b43      	ldr	r3, [pc, #268]	@ (80096c0 <pvPortMalloc+0x184>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d865      	bhi.n	8009686 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095ba:	4b42      	ldr	r3, [pc, #264]	@ (80096c4 <pvPortMalloc+0x188>)
 80095bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095be:	4b41      	ldr	r3, [pc, #260]	@ (80096c4 <pvPortMalloc+0x188>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095c4:	e004      	b.n	80095d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d903      	bls.n	80095e2 <pvPortMalloc+0xa6>
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f1      	bne.n	80095c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095e2:	4b35      	ldr	r3, [pc, #212]	@ (80096b8 <pvPortMalloc+0x17c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d04c      	beq.n	8009686 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2208      	movs	r2, #8
 80095f2:	4413      	add	r3, r2
 80095f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	1ad2      	subs	r2, r2, r3
 8009606:	2308      	movs	r3, #8
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	429a      	cmp	r2, r3
 800960c:	d920      	bls.n	8009650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800960e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <pvPortMalloc+0xfc>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800964a:	69b8      	ldr	r0, [r7, #24]
 800964c:	f000 f8fc 	bl	8009848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009650:	4b1b      	ldr	r3, [pc, #108]	@ (80096c0 <pvPortMalloc+0x184>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	4a19      	ldr	r2, [pc, #100]	@ (80096c0 <pvPortMalloc+0x184>)
 800965c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800965e:	4b18      	ldr	r3, [pc, #96]	@ (80096c0 <pvPortMalloc+0x184>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4b19      	ldr	r3, [pc, #100]	@ (80096c8 <pvPortMalloc+0x18c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d203      	bcs.n	8009672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800966a:	4b15      	ldr	r3, [pc, #84]	@ (80096c0 <pvPortMalloc+0x184>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a16      	ldr	r2, [pc, #88]	@ (80096c8 <pvPortMalloc+0x18c>)
 8009670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	4b11      	ldr	r3, [pc, #68]	@ (80096bc <pvPortMalloc+0x180>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	431a      	orrs	r2, r3
 800967c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009686:	f7fe fbf9 	bl	8007e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <pvPortMalloc+0x170>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60fb      	str	r3, [r7, #12]
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	e7fd      	b.n	80096a8 <pvPortMalloc+0x16c>
	return pvReturn;
 80096ac:	69fb      	ldr	r3, [r7, #28]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3728      	adds	r7, #40	@ 0x28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20001d38 	.word	0x20001d38
 80096bc:	20001d44 	.word	0x20001d44
 80096c0:	20001d3c 	.word	0x20001d3c
 80096c4:	20001d30 	.word	0x20001d30
 80096c8:	20001d40 	.word	0x20001d40

080096cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d04a      	beq.n	8009774 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096de:	2308      	movs	r3, #8
 80096e0:	425b      	negs	r3, r3
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4413      	add	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4b22      	ldr	r3, [pc, #136]	@ (800977c <vPortFree+0xb0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <vPortFree+0x46>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60fb      	str	r3, [r7, #12]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00b      	beq.n	8009732 <vPortFree+0x66>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	60bb      	str	r3, [r7, #8]
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	e7fd      	b.n	800972e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	4b11      	ldr	r3, [pc, #68]	@ (800977c <vPortFree+0xb0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4013      	ands	r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d019      	beq.n	8009774 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d115      	bne.n	8009774 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	4b0b      	ldr	r3, [pc, #44]	@ (800977c <vPortFree+0xb0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	43db      	mvns	r3, r3
 8009752:	401a      	ands	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009758:	f7fe fb82 	bl	8007e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <vPortFree+0xb4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4413      	add	r3, r2
 8009766:	4a06      	ldr	r2, [pc, #24]	@ (8009780 <vPortFree+0xb4>)
 8009768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800976a:	6938      	ldr	r0, [r7, #16]
 800976c:	f000 f86c 	bl	8009848 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009770:	f7fe fb84 	bl	8007e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20001d44 	.word	0x20001d44
 8009780:	20001d3c 	.word	0x20001d3c

08009784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800978a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800978e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009790:	4b27      	ldr	r3, [pc, #156]	@ (8009830 <prvHeapInit+0xac>)
 8009792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00c      	beq.n	80097b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3307      	adds	r3, #7
 80097a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0307 	bic.w	r3, r3, #7
 80097aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009830 <prvHeapInit+0xac>)
 80097b4:	4413      	add	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <prvHeapInit+0xb0>)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009834 <prvHeapInit+0xb0>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	4413      	add	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097d0:	2208      	movs	r2, #8
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 0307 	bic.w	r3, r3, #7
 80097de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4a15      	ldr	r2, [pc, #84]	@ (8009838 <prvHeapInit+0xb4>)
 80097e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097e6:	4b14      	ldr	r3, [pc, #80]	@ (8009838 <prvHeapInit+0xb4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2200      	movs	r2, #0
 80097ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ee:	4b12      	ldr	r3, [pc, #72]	@ (8009838 <prvHeapInit+0xb4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009804:	4b0c      	ldr	r3, [pc, #48]	@ (8009838 <prvHeapInit+0xb4>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	4a0a      	ldr	r2, [pc, #40]	@ (800983c <prvHeapInit+0xb8>)
 8009812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4a09      	ldr	r2, [pc, #36]	@ (8009840 <prvHeapInit+0xbc>)
 800981a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800981c:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <prvHeapInit+0xc0>)
 800981e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	20001130 	.word	0x20001130
 8009834:	20001d30 	.word	0x20001d30
 8009838:	20001d38 	.word	0x20001d38
 800983c:	20001d40 	.word	0x20001d40
 8009840:	20001d3c 	.word	0x20001d3c
 8009844:	20001d44 	.word	0x20001d44

08009848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009850:	4b28      	ldr	r3, [pc, #160]	@ (80098f4 <prvInsertBlockIntoFreeList+0xac>)
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e002      	b.n	800985c <prvInsertBlockIntoFreeList+0x14>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	429a      	cmp	r2, r3
 8009864:	d8f7      	bhi.n	8009856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	4413      	add	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	429a      	cmp	r2, r3
 8009876:	d108      	bne.n	800988a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	441a      	add	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	441a      	add	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d118      	bne.n	80098d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	4b15      	ldr	r3, [pc, #84]	@ (80098f8 <prvInsertBlockIntoFreeList+0xb0>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d00d      	beq.n	80098c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	441a      	add	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e008      	b.n	80098d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098c6:	4b0c      	ldr	r3, [pc, #48]	@ (80098f8 <prvInsertBlockIntoFreeList+0xb0>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e003      	b.n	80098d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d002      	beq.n	80098e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20001d30 	.word	0x20001d30
 80098f8:	20001d38 	.word	0x20001d38

080098fc <__cvt>:
 80098fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	ec57 6b10 	vmov	r6, r7, d0
 8009904:	2f00      	cmp	r7, #0
 8009906:	460c      	mov	r4, r1
 8009908:	4619      	mov	r1, r3
 800990a:	463b      	mov	r3, r7
 800990c:	bfbb      	ittet	lt
 800990e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009912:	461f      	movlt	r7, r3
 8009914:	2300      	movge	r3, #0
 8009916:	232d      	movlt	r3, #45	@ 0x2d
 8009918:	700b      	strb	r3, [r1, #0]
 800991a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800991c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009920:	4691      	mov	r9, r2
 8009922:	f023 0820 	bic.w	r8, r3, #32
 8009926:	bfbc      	itt	lt
 8009928:	4632      	movlt	r2, r6
 800992a:	4616      	movlt	r6, r2
 800992c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009930:	d005      	beq.n	800993e <__cvt+0x42>
 8009932:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009936:	d100      	bne.n	800993a <__cvt+0x3e>
 8009938:	3401      	adds	r4, #1
 800993a:	2102      	movs	r1, #2
 800993c:	e000      	b.n	8009940 <__cvt+0x44>
 800993e:	2103      	movs	r1, #3
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	ab02      	add	r3, sp, #8
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	ec47 6b10 	vmov	d0, r6, r7
 800994c:	4653      	mov	r3, sl
 800994e:	4622      	mov	r2, r4
 8009950:	f000 fe8e 	bl	800a670 <_dtoa_r>
 8009954:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009958:	4605      	mov	r5, r0
 800995a:	d119      	bne.n	8009990 <__cvt+0x94>
 800995c:	f019 0f01 	tst.w	r9, #1
 8009960:	d00e      	beq.n	8009980 <__cvt+0x84>
 8009962:	eb00 0904 	add.w	r9, r0, r4
 8009966:	2200      	movs	r2, #0
 8009968:	2300      	movs	r3, #0
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f7 f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009972:	b108      	cbz	r0, 8009978 <__cvt+0x7c>
 8009974:	f8cd 900c 	str.w	r9, [sp, #12]
 8009978:	2230      	movs	r2, #48	@ 0x30
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	454b      	cmp	r3, r9
 800997e:	d31e      	bcc.n	80099be <__cvt+0xc2>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009984:	1b5b      	subs	r3, r3, r5
 8009986:	4628      	mov	r0, r5
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	b004      	add	sp, #16
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009994:	eb00 0904 	add.w	r9, r0, r4
 8009998:	d1e5      	bne.n	8009966 <__cvt+0x6a>
 800999a:	7803      	ldrb	r3, [r0, #0]
 800999c:	2b30      	cmp	r3, #48	@ 0x30
 800999e:	d10a      	bne.n	80099b6 <__cvt+0xba>
 80099a0:	2200      	movs	r2, #0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f7 f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ac:	b918      	cbnz	r0, 80099b6 <__cvt+0xba>
 80099ae:	f1c4 0401 	rsb	r4, r4, #1
 80099b2:	f8ca 4000 	str.w	r4, [sl]
 80099b6:	f8da 3000 	ldr.w	r3, [sl]
 80099ba:	4499      	add	r9, r3
 80099bc:	e7d3      	b.n	8009966 <__cvt+0x6a>
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e7d9      	b.n	800997a <__cvt+0x7e>

080099c6 <__exponent>:
 80099c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c8:	2900      	cmp	r1, #0
 80099ca:	bfba      	itte	lt
 80099cc:	4249      	neglt	r1, r1
 80099ce:	232d      	movlt	r3, #45	@ 0x2d
 80099d0:	232b      	movge	r3, #43	@ 0x2b
 80099d2:	2909      	cmp	r1, #9
 80099d4:	7002      	strb	r2, [r0, #0]
 80099d6:	7043      	strb	r3, [r0, #1]
 80099d8:	dd29      	ble.n	8009a2e <__exponent+0x68>
 80099da:	f10d 0307 	add.w	r3, sp, #7
 80099de:	461d      	mov	r5, r3
 80099e0:	270a      	movs	r7, #10
 80099e2:	461a      	mov	r2, r3
 80099e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80099e8:	fb07 1416 	mls	r4, r7, r6, r1
 80099ec:	3430      	adds	r4, #48	@ 0x30
 80099ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099f2:	460c      	mov	r4, r1
 80099f4:	2c63      	cmp	r4, #99	@ 0x63
 80099f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80099fa:	4631      	mov	r1, r6
 80099fc:	dcf1      	bgt.n	80099e2 <__exponent+0x1c>
 80099fe:	3130      	adds	r1, #48	@ 0x30
 8009a00:	1e94      	subs	r4, r2, #2
 8009a02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a06:	1c41      	adds	r1, r0, #1
 8009a08:	4623      	mov	r3, r4
 8009a0a:	42ab      	cmp	r3, r5
 8009a0c:	d30a      	bcc.n	8009a24 <__exponent+0x5e>
 8009a0e:	f10d 0309 	add.w	r3, sp, #9
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	bf88      	it	hi
 8009a18:	2300      	movhi	r3, #0
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	4403      	add	r3, r0
 8009a1e:	1a18      	subs	r0, r3, r0
 8009a20:	b003      	add	sp, #12
 8009a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a2c:	e7ed      	b.n	8009a0a <__exponent+0x44>
 8009a2e:	2330      	movs	r3, #48	@ 0x30
 8009a30:	3130      	adds	r1, #48	@ 0x30
 8009a32:	7083      	strb	r3, [r0, #2]
 8009a34:	70c1      	strb	r1, [r0, #3]
 8009a36:	1d03      	adds	r3, r0, #4
 8009a38:	e7f1      	b.n	8009a1e <__exponent+0x58>
	...

08009a3c <_printf_float>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	b08d      	sub	sp, #52	@ 0x34
 8009a42:	460c      	mov	r4, r1
 8009a44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a48:	4616      	mov	r6, r2
 8009a4a:	461f      	mov	r7, r3
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	f000 fd01 	bl	800a454 <_localeconv_r>
 8009a52:	6803      	ldr	r3, [r0, #0]
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f6 fc12 	bl	8000280 <strlen>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a60:	f8d8 3000 	ldr.w	r3, [r8]
 8009a64:	9005      	str	r0, [sp, #20]
 8009a66:	3307      	adds	r3, #7
 8009a68:	f023 0307 	bic.w	r3, r3, #7
 8009a6c:	f103 0208 	add.w	r2, r3, #8
 8009a70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a74:	f8d4 b000 	ldr.w	fp, [r4]
 8009a78:	f8c8 2000 	str.w	r2, [r8]
 8009a7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a92:	4b9c      	ldr	r3, [pc, #624]	@ (8009d04 <_printf_float+0x2c8>)
 8009a94:	f04f 32ff 	mov.w	r2, #4294967295
 8009a98:	f7f7 f850 	bl	8000b3c <__aeabi_dcmpun>
 8009a9c:	bb70      	cbnz	r0, 8009afc <_printf_float+0xc0>
 8009a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aa2:	4b98      	ldr	r3, [pc, #608]	@ (8009d04 <_printf_float+0x2c8>)
 8009aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa8:	f7f7 f82a 	bl	8000b00 <__aeabi_dcmple>
 8009aac:	bb30      	cbnz	r0, 8009afc <_printf_float+0xc0>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f7 f819 	bl	8000aec <__aeabi_dcmplt>
 8009aba:	b110      	cbz	r0, 8009ac2 <_printf_float+0x86>
 8009abc:	232d      	movs	r3, #45	@ 0x2d
 8009abe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac2:	4a91      	ldr	r2, [pc, #580]	@ (8009d08 <_printf_float+0x2cc>)
 8009ac4:	4b91      	ldr	r3, [pc, #580]	@ (8009d0c <_printf_float+0x2d0>)
 8009ac6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009aca:	bf8c      	ite	hi
 8009acc:	4690      	movhi	r8, r2
 8009ace:	4698      	movls	r8, r3
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	f02b 0304 	bic.w	r3, fp, #4
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	f04f 0900 	mov.w	r9, #0
 8009ade:	9700      	str	r7, [sp, #0]
 8009ae0:	4633      	mov	r3, r6
 8009ae2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 f9d2 	bl	8009e90 <_printf_common>
 8009aec:	3001      	adds	r0, #1
 8009aee:	f040 808d 	bne.w	8009c0c <_printf_float+0x1d0>
 8009af2:	f04f 30ff 	mov.w	r0, #4294967295
 8009af6:	b00d      	add	sp, #52	@ 0x34
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f7 f81a 	bl	8000b3c <__aeabi_dcmpun>
 8009b08:	b140      	cbz	r0, 8009b1c <_printf_float+0xe0>
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bfbc      	itt	lt
 8009b10:	232d      	movlt	r3, #45	@ 0x2d
 8009b12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b16:	4a7e      	ldr	r2, [pc, #504]	@ (8009d10 <_printf_float+0x2d4>)
 8009b18:	4b7e      	ldr	r3, [pc, #504]	@ (8009d14 <_printf_float+0x2d8>)
 8009b1a:	e7d4      	b.n	8009ac6 <_printf_float+0x8a>
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b22:	9206      	str	r2, [sp, #24]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	d13b      	bne.n	8009ba0 <_printf_float+0x164>
 8009b28:	2306      	movs	r3, #6
 8009b2a:	6063      	str	r3, [r4, #4]
 8009b2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b30:	2300      	movs	r3, #0
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b3c:	ab09      	add	r3, sp, #36	@ 0x24
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	6861      	ldr	r1, [r4, #4]
 8009b42:	ec49 8b10 	vmov	d0, r8, r9
 8009b46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f7ff fed6 	bl	80098fc <__cvt>
 8009b50:	9b06      	ldr	r3, [sp, #24]
 8009b52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b54:	2b47      	cmp	r3, #71	@ 0x47
 8009b56:	4680      	mov	r8, r0
 8009b58:	d129      	bne.n	8009bae <_printf_float+0x172>
 8009b5a:	1cc8      	adds	r0, r1, #3
 8009b5c:	db02      	blt.n	8009b64 <_printf_float+0x128>
 8009b5e:	6863      	ldr	r3, [r4, #4]
 8009b60:	4299      	cmp	r1, r3
 8009b62:	dd41      	ble.n	8009be8 <_printf_float+0x1ac>
 8009b64:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b68:	fa5f fa8a 	uxtb.w	sl, sl
 8009b6c:	3901      	subs	r1, #1
 8009b6e:	4652      	mov	r2, sl
 8009b70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b74:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b76:	f7ff ff26 	bl	80099c6 <__exponent>
 8009b7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b7c:	1813      	adds	r3, r2, r0
 8009b7e:	2a01      	cmp	r2, #1
 8009b80:	4681      	mov	r9, r0
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	dc02      	bgt.n	8009b8c <_printf_float+0x150>
 8009b86:	6822      	ldr	r2, [r4, #0]
 8009b88:	07d2      	lsls	r2, r2, #31
 8009b8a:	d501      	bpl.n	8009b90 <_printf_float+0x154>
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	6123      	str	r3, [r4, #16]
 8009b90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0a2      	beq.n	8009ade <_printf_float+0xa2>
 8009b98:	232d      	movs	r3, #45	@ 0x2d
 8009b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9e:	e79e      	b.n	8009ade <_printf_float+0xa2>
 8009ba0:	9a06      	ldr	r2, [sp, #24]
 8009ba2:	2a47      	cmp	r2, #71	@ 0x47
 8009ba4:	d1c2      	bne.n	8009b2c <_printf_float+0xf0>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1c0      	bne.n	8009b2c <_printf_float+0xf0>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e7bd      	b.n	8009b2a <_printf_float+0xee>
 8009bae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bb2:	d9db      	bls.n	8009b6c <_printf_float+0x130>
 8009bb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bb8:	d118      	bne.n	8009bec <_printf_float+0x1b0>
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	6863      	ldr	r3, [r4, #4]
 8009bbe:	dd0b      	ble.n	8009bd8 <_printf_float+0x19c>
 8009bc0:	6121      	str	r1, [r4, #16]
 8009bc2:	b913      	cbnz	r3, 8009bca <_printf_float+0x18e>
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	07d0      	lsls	r0, r2, #31
 8009bc8:	d502      	bpl.n	8009bd0 <_printf_float+0x194>
 8009bca:	3301      	adds	r3, #1
 8009bcc:	440b      	add	r3, r1
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	e7db      	b.n	8009b90 <_printf_float+0x154>
 8009bd8:	b913      	cbnz	r3, 8009be0 <_printf_float+0x1a4>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	07d2      	lsls	r2, r2, #31
 8009bde:	d501      	bpl.n	8009be4 <_printf_float+0x1a8>
 8009be0:	3302      	adds	r3, #2
 8009be2:	e7f4      	b.n	8009bce <_printf_float+0x192>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7f2      	b.n	8009bce <_printf_float+0x192>
 8009be8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	db05      	blt.n	8009bfe <_printf_float+0x1c2>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	6121      	str	r1, [r4, #16]
 8009bf6:	07d8      	lsls	r0, r3, #31
 8009bf8:	d5ea      	bpl.n	8009bd0 <_printf_float+0x194>
 8009bfa:	1c4b      	adds	r3, r1, #1
 8009bfc:	e7e7      	b.n	8009bce <_printf_float+0x192>
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	bfd4      	ite	le
 8009c02:	f1c1 0202 	rsble	r2, r1, #2
 8009c06:	2201      	movgt	r2, #1
 8009c08:	4413      	add	r3, r2
 8009c0a:	e7e0      	b.n	8009bce <_printf_float+0x192>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	055a      	lsls	r2, r3, #21
 8009c10:	d407      	bmi.n	8009c22 <_printf_float+0x1e6>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	4642      	mov	r2, r8
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d12b      	bne.n	8009c78 <_printf_float+0x23c>
 8009c20:	e767      	b.n	8009af2 <_printf_float+0xb6>
 8009c22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c26:	f240 80dd 	bls.w	8009de4 <_printf_float+0x3a8>
 8009c2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	f7f6 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d033      	beq.n	8009ca2 <_printf_float+0x266>
 8009c3a:	4a37      	ldr	r2, [pc, #220]	@ (8009d18 <_printf_float+0x2dc>)
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	f43f af54 	beq.w	8009af2 <_printf_float+0xb6>
 8009c4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c4e:	4543      	cmp	r3, r8
 8009c50:	db02      	blt.n	8009c58 <_printf_float+0x21c>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	07d8      	lsls	r0, r3, #31
 8009c56:	d50f      	bpl.n	8009c78 <_printf_float+0x23c>
 8009c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f af45 	beq.w	8009af2 <_printf_float+0xb6>
 8009c68:	f04f 0900 	mov.w	r9, #0
 8009c6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c70:	f104 0a1a 	add.w	sl, r4, #26
 8009c74:	45c8      	cmp	r8, r9
 8009c76:	dc09      	bgt.n	8009c8c <_printf_float+0x250>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	079b      	lsls	r3, r3, #30
 8009c7c:	f100 8103 	bmi.w	8009e86 <_printf_float+0x44a>
 8009c80:	68e0      	ldr	r0, [r4, #12]
 8009c82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c84:	4298      	cmp	r0, r3
 8009c86:	bfb8      	it	lt
 8009c88:	4618      	movlt	r0, r3
 8009c8a:	e734      	b.n	8009af6 <_printf_float+0xba>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4652      	mov	r2, sl
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f af2b 	beq.w	8009af2 <_printf_float+0xb6>
 8009c9c:	f109 0901 	add.w	r9, r9, #1
 8009ca0:	e7e8      	b.n	8009c74 <_printf_float+0x238>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dc39      	bgt.n	8009d1c <_printf_float+0x2e0>
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d18 <_printf_float+0x2dc>)
 8009caa:	2301      	movs	r3, #1
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f af1d 	beq.w	8009af2 <_printf_float+0xb6>
 8009cb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cbc:	ea59 0303 	orrs.w	r3, r9, r3
 8009cc0:	d102      	bne.n	8009cc8 <_printf_float+0x28c>
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d5d7      	bpl.n	8009c78 <_printf_float+0x23c>
 8009cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f af0d 	beq.w	8009af2 <_printf_float+0xb6>
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	f104 0b1a 	add.w	fp, r4, #26
 8009ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce2:	425b      	negs	r3, r3
 8009ce4:	4553      	cmp	r3, sl
 8009ce6:	dc01      	bgt.n	8009cec <_printf_float+0x2b0>
 8009ce8:	464b      	mov	r3, r9
 8009cea:	e793      	b.n	8009c14 <_printf_float+0x1d8>
 8009cec:	2301      	movs	r3, #1
 8009cee:	465a      	mov	r2, fp
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f aefb 	beq.w	8009af2 <_printf_float+0xb6>
 8009cfc:	f10a 0a01 	add.w	sl, sl, #1
 8009d00:	e7ee      	b.n	8009ce0 <_printf_float+0x2a4>
 8009d02:	bf00      	nop
 8009d04:	7fefffff 	.word	0x7fefffff
 8009d08:	0800c6d4 	.word	0x0800c6d4
 8009d0c:	0800c6d0 	.word	0x0800c6d0
 8009d10:	0800c6dc 	.word	0x0800c6dc
 8009d14:	0800c6d8 	.word	0x0800c6d8
 8009d18:	0800c6e0 	.word	0x0800c6e0
 8009d1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d22:	4553      	cmp	r3, sl
 8009d24:	bfa8      	it	ge
 8009d26:	4653      	movge	r3, sl
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	dc36      	bgt.n	8009d9c <_printf_float+0x360>
 8009d2e:	f04f 0b00 	mov.w	fp, #0
 8009d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d36:	f104 021a 	add.w	r2, r4, #26
 8009d3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	eba3 0309 	sub.w	r3, r3, r9
 8009d42:	455b      	cmp	r3, fp
 8009d44:	dc31      	bgt.n	8009daa <_printf_float+0x36e>
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	459a      	cmp	sl, r3
 8009d4a:	dc3a      	bgt.n	8009dc2 <_printf_float+0x386>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	07da      	lsls	r2, r3, #31
 8009d50:	d437      	bmi.n	8009dc2 <_printf_float+0x386>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	ebaa 0903 	sub.w	r9, sl, r3
 8009d58:	9b06      	ldr	r3, [sp, #24]
 8009d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8009d5e:	4599      	cmp	r9, r3
 8009d60:	bfa8      	it	ge
 8009d62:	4699      	movge	r9, r3
 8009d64:	f1b9 0f00 	cmp.w	r9, #0
 8009d68:	dc33      	bgt.n	8009dd2 <_printf_float+0x396>
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d72:	f104 0b1a 	add.w	fp, r4, #26
 8009d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d78:	ebaa 0303 	sub.w	r3, sl, r3
 8009d7c:	eba3 0309 	sub.w	r3, r3, r9
 8009d80:	4543      	cmp	r3, r8
 8009d82:	f77f af79 	ble.w	8009c78 <_printf_float+0x23c>
 8009d86:	2301      	movs	r3, #1
 8009d88:	465a      	mov	r2, fp
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	f43f aeae 	beq.w	8009af2 <_printf_float+0xb6>
 8009d96:	f108 0801 	add.w	r8, r8, #1
 8009d9a:	e7ec      	b.n	8009d76 <_printf_float+0x33a>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	d1c2      	bne.n	8009d2e <_printf_float+0x2f2>
 8009da8:	e6a3      	b.n	8009af2 <_printf_float+0xb6>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4631      	mov	r1, r6
 8009dae:	4628      	mov	r0, r5
 8009db0:	9206      	str	r2, [sp, #24]
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f ae9c 	beq.w	8009af2 <_printf_float+0xb6>
 8009dba:	9a06      	ldr	r2, [sp, #24]
 8009dbc:	f10b 0b01 	add.w	fp, fp, #1
 8009dc0:	e7bb      	b.n	8009d3a <_printf_float+0x2fe>
 8009dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d1c0      	bne.n	8009d52 <_printf_float+0x316>
 8009dd0:	e68f      	b.n	8009af2 <_printf_float+0xb6>
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	4442      	add	r2, r8
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	d1c3      	bne.n	8009d6a <_printf_float+0x32e>
 8009de2:	e686      	b.n	8009af2 <_printf_float+0xb6>
 8009de4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009de8:	f1ba 0f01 	cmp.w	sl, #1
 8009dec:	dc01      	bgt.n	8009df2 <_printf_float+0x3b6>
 8009dee:	07db      	lsls	r3, r3, #31
 8009df0:	d536      	bpl.n	8009e60 <_printf_float+0x424>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4642      	mov	r2, r8
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b8      	blx	r7
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	f43f ae78 	beq.w	8009af2 <_printf_float+0xb6>
 8009e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f ae70 	beq.w	8009af2 <_printf_float+0xb6>
 8009e12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1e:	f7f6 fe5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e22:	b9c0      	cbnz	r0, 8009e56 <_printf_float+0x41a>
 8009e24:	4653      	mov	r3, sl
 8009e26:	f108 0201 	add.w	r2, r8, #1
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	d10c      	bne.n	8009e4e <_printf_float+0x412>
 8009e34:	e65d      	b.n	8009af2 <_printf_float+0xb6>
 8009e36:	2301      	movs	r3, #1
 8009e38:	465a      	mov	r2, fp
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae56 	beq.w	8009af2 <_printf_float+0xb6>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	45d0      	cmp	r8, sl
 8009e4c:	dbf3      	blt.n	8009e36 <_printf_float+0x3fa>
 8009e4e:	464b      	mov	r3, r9
 8009e50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e54:	e6df      	b.n	8009c16 <_printf_float+0x1da>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	f104 0b1a 	add.w	fp, r4, #26
 8009e5e:	e7f4      	b.n	8009e4a <_printf_float+0x40e>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4642      	mov	r2, r8
 8009e64:	e7e1      	b.n	8009e2a <_printf_float+0x3ee>
 8009e66:	2301      	movs	r3, #1
 8009e68:	464a      	mov	r2, r9
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae3e 	beq.w	8009af2 <_printf_float+0xb6>
 8009e76:	f108 0801 	add.w	r8, r8, #1
 8009e7a:	68e3      	ldr	r3, [r4, #12]
 8009e7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7e:	1a5b      	subs	r3, r3, r1
 8009e80:	4543      	cmp	r3, r8
 8009e82:	dcf0      	bgt.n	8009e66 <_printf_float+0x42a>
 8009e84:	e6fc      	b.n	8009c80 <_printf_float+0x244>
 8009e86:	f04f 0800 	mov.w	r8, #0
 8009e8a:	f104 0919 	add.w	r9, r4, #25
 8009e8e:	e7f4      	b.n	8009e7a <_printf_float+0x43e>

08009e90 <_printf_common>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	4616      	mov	r6, r2
 8009e96:	4698      	mov	r8, r3
 8009e98:	688a      	ldr	r2, [r1, #8]
 8009e9a:	690b      	ldr	r3, [r1, #16]
 8009e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bfb8      	it	lt
 8009ea4:	4613      	movlt	r3, r2
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009eac:	4607      	mov	r7, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_printf_common+0x26>
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	0699      	lsls	r1, r3, #26
 8009eba:	bf42      	ittt	mi
 8009ebc:	6833      	ldrmi	r3, [r6, #0]
 8009ebe:	3302      	addmi	r3, #2
 8009ec0:	6033      	strmi	r3, [r6, #0]
 8009ec2:	6825      	ldr	r5, [r4, #0]
 8009ec4:	f015 0506 	ands.w	r5, r5, #6
 8009ec8:	d106      	bne.n	8009ed8 <_printf_common+0x48>
 8009eca:	f104 0a19 	add.w	sl, r4, #25
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	6832      	ldr	r2, [r6, #0]
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dc26      	bgt.n	8009f26 <_printf_common+0x96>
 8009ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009edc:	6822      	ldr	r2, [r4, #0]
 8009ede:	3b00      	subs	r3, #0
 8009ee0:	bf18      	it	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	0692      	lsls	r2, r2, #26
 8009ee6:	d42b      	bmi.n	8009f40 <_printf_common+0xb0>
 8009ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009eec:	4641      	mov	r1, r8
 8009eee:	4638      	mov	r0, r7
 8009ef0:	47c8      	blx	r9
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d01e      	beq.n	8009f34 <_printf_common+0xa4>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	f003 0306 	and.w	r3, r3, #6
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	bf02      	ittt	eq
 8009f02:	68e5      	ldreq	r5, [r4, #12]
 8009f04:	6833      	ldreq	r3, [r6, #0]
 8009f06:	1aed      	subeq	r5, r5, r3
 8009f08:	68a3      	ldr	r3, [r4, #8]
 8009f0a:	bf0c      	ite	eq
 8009f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f10:	2500      	movne	r5, #0
 8009f12:	4293      	cmp	r3, r2
 8009f14:	bfc4      	itt	gt
 8009f16:	1a9b      	subgt	r3, r3, r2
 8009f18:	18ed      	addgt	r5, r5, r3
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	341a      	adds	r4, #26
 8009f1e:	42b5      	cmp	r5, r6
 8009f20:	d11a      	bne.n	8009f58 <_printf_common+0xc8>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e008      	b.n	8009f38 <_printf_common+0xa8>
 8009f26:	2301      	movs	r3, #1
 8009f28:	4652      	mov	r2, sl
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	47c8      	blx	r9
 8009f30:	3001      	adds	r0, #1
 8009f32:	d103      	bne.n	8009f3c <_printf_common+0xac>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	e7c6      	b.n	8009ece <_printf_common+0x3e>
 8009f40:	18e1      	adds	r1, r4, r3
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	2030      	movs	r0, #48	@ 0x30
 8009f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f4a:	4422      	add	r2, r4
 8009f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f54:	3302      	adds	r3, #2
 8009f56:	e7c7      	b.n	8009ee8 <_printf_common+0x58>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	4638      	mov	r0, r7
 8009f60:	47c8      	blx	r9
 8009f62:	3001      	adds	r0, #1
 8009f64:	d0e6      	beq.n	8009f34 <_printf_common+0xa4>
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7d9      	b.n	8009f1e <_printf_common+0x8e>
	...

08009f6c <_printf_i>:
 8009f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	7e0f      	ldrb	r7, [r1, #24]
 8009f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f74:	2f78      	cmp	r7, #120	@ 0x78
 8009f76:	4691      	mov	r9, r2
 8009f78:	4680      	mov	r8, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	469a      	mov	sl, r3
 8009f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f82:	d807      	bhi.n	8009f94 <_printf_i+0x28>
 8009f84:	2f62      	cmp	r7, #98	@ 0x62
 8009f86:	d80a      	bhi.n	8009f9e <_printf_i+0x32>
 8009f88:	2f00      	cmp	r7, #0
 8009f8a:	f000 80d1 	beq.w	800a130 <_printf_i+0x1c4>
 8009f8e:	2f58      	cmp	r7, #88	@ 0x58
 8009f90:	f000 80b8 	beq.w	800a104 <_printf_i+0x198>
 8009f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f9c:	e03a      	b.n	800a014 <_printf_i+0xa8>
 8009f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fa2:	2b15      	cmp	r3, #21
 8009fa4:	d8f6      	bhi.n	8009f94 <_printf_i+0x28>
 8009fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8009fac <_printf_i+0x40>)
 8009fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fac:	0800a005 	.word	0x0800a005
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	08009f95 	.word	0x08009f95
 8009fb8:	08009f95 	.word	0x08009f95
 8009fbc:	08009f95 	.word	0x08009f95
 8009fc0:	08009f95 	.word	0x08009f95
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	08009f95 	.word	0x08009f95
 8009fcc:	08009f95 	.word	0x08009f95
 8009fd0:	08009f95 	.word	0x08009f95
 8009fd4:	08009f95 	.word	0x08009f95
 8009fd8:	0800a117 	.word	0x0800a117
 8009fdc:	0800a043 	.word	0x0800a043
 8009fe0:	0800a0d1 	.word	0x0800a0d1
 8009fe4:	08009f95 	.word	0x08009f95
 8009fe8:	08009f95 	.word	0x08009f95
 8009fec:	0800a139 	.word	0x0800a139
 8009ff0:	08009f95 	.word	0x08009f95
 8009ff4:	0800a043 	.word	0x0800a043
 8009ff8:	08009f95 	.word	0x08009f95
 8009ffc:	08009f95 	.word	0x08009f95
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6032      	str	r2, [r6, #0]
 800a00c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a014:	2301      	movs	r3, #1
 800a016:	e09c      	b.n	800a152 <_printf_i+0x1e6>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	6820      	ldr	r0, [r4, #0]
 800a01c:	1d19      	adds	r1, r3, #4
 800a01e:	6031      	str	r1, [r6, #0]
 800a020:	0606      	lsls	r6, r0, #24
 800a022:	d501      	bpl.n	800a028 <_printf_i+0xbc>
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	e003      	b.n	800a030 <_printf_i+0xc4>
 800a028:	0645      	lsls	r5, r0, #25
 800a02a:	d5fb      	bpl.n	800a024 <_printf_i+0xb8>
 800a02c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a030:	2d00      	cmp	r5, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xd0>
 800a034:	232d      	movs	r3, #45	@ 0x2d
 800a036:	426d      	negs	r5, r5
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a03c:	4858      	ldr	r0, [pc, #352]	@ (800a1a0 <_printf_i+0x234>)
 800a03e:	230a      	movs	r3, #10
 800a040:	e011      	b.n	800a066 <_printf_i+0xfa>
 800a042:	6821      	ldr	r1, [r4, #0]
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	0608      	lsls	r0, r1, #24
 800a048:	f853 5b04 	ldr.w	r5, [r3], #4
 800a04c:	d402      	bmi.n	800a054 <_printf_i+0xe8>
 800a04e:	0649      	lsls	r1, r1, #25
 800a050:	bf48      	it	mi
 800a052:	b2ad      	uxthmi	r5, r5
 800a054:	2f6f      	cmp	r7, #111	@ 0x6f
 800a056:	4852      	ldr	r0, [pc, #328]	@ (800a1a0 <_printf_i+0x234>)
 800a058:	6033      	str	r3, [r6, #0]
 800a05a:	bf14      	ite	ne
 800a05c:	230a      	movne	r3, #10
 800a05e:	2308      	moveq	r3, #8
 800a060:	2100      	movs	r1, #0
 800a062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a066:	6866      	ldr	r6, [r4, #4]
 800a068:	60a6      	str	r6, [r4, #8]
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	db05      	blt.n	800a07a <_printf_i+0x10e>
 800a06e:	6821      	ldr	r1, [r4, #0]
 800a070:	432e      	orrs	r6, r5
 800a072:	f021 0104 	bic.w	r1, r1, #4
 800a076:	6021      	str	r1, [r4, #0]
 800a078:	d04b      	beq.n	800a112 <_printf_i+0x1a6>
 800a07a:	4616      	mov	r6, r2
 800a07c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a080:	fb03 5711 	mls	r7, r3, r1, r5
 800a084:	5dc7      	ldrb	r7, [r0, r7]
 800a086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a08a:	462f      	mov	r7, r5
 800a08c:	42bb      	cmp	r3, r7
 800a08e:	460d      	mov	r5, r1
 800a090:	d9f4      	bls.n	800a07c <_printf_i+0x110>
 800a092:	2b08      	cmp	r3, #8
 800a094:	d10b      	bne.n	800a0ae <_printf_i+0x142>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	07df      	lsls	r7, r3, #31
 800a09a:	d508      	bpl.n	800a0ae <_printf_i+0x142>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	6861      	ldr	r1, [r4, #4]
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	bfde      	ittt	le
 800a0a4:	2330      	movle	r3, #48	@ 0x30
 800a0a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ae:	1b92      	subs	r2, r2, r6
 800a0b0:	6122      	str	r2, [r4, #16]
 800a0b2:	f8cd a000 	str.w	sl, [sp]
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	aa03      	add	r2, sp, #12
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4640      	mov	r0, r8
 800a0be:	f7ff fee7 	bl	8009e90 <_printf_common>
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d14a      	bne.n	800a15c <_printf_i+0x1f0>
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	b004      	add	sp, #16
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	f043 0320 	orr.w	r3, r3, #32
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	4832      	ldr	r0, [pc, #200]	@ (800a1a4 <_printf_i+0x238>)
 800a0da:	2778      	movs	r7, #120	@ 0x78
 800a0dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	061f      	lsls	r7, r3, #24
 800a0e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0ea:	d402      	bmi.n	800a0f2 <_printf_i+0x186>
 800a0ec:	065f      	lsls	r7, r3, #25
 800a0ee:	bf48      	it	mi
 800a0f0:	b2ad      	uxthmi	r5, r5
 800a0f2:	6031      	str	r1, [r6, #0]
 800a0f4:	07d9      	lsls	r1, r3, #31
 800a0f6:	bf44      	itt	mi
 800a0f8:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fc:	6023      	strmi	r3, [r4, #0]
 800a0fe:	b11d      	cbz	r5, 800a108 <_printf_i+0x19c>
 800a100:	2310      	movs	r3, #16
 800a102:	e7ad      	b.n	800a060 <_printf_i+0xf4>
 800a104:	4826      	ldr	r0, [pc, #152]	@ (800a1a0 <_printf_i+0x234>)
 800a106:	e7e9      	b.n	800a0dc <_printf_i+0x170>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	f023 0320 	bic.w	r3, r3, #32
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	e7f6      	b.n	800a100 <_printf_i+0x194>
 800a112:	4616      	mov	r6, r2
 800a114:	e7bd      	b.n	800a092 <_printf_i+0x126>
 800a116:	6833      	ldr	r3, [r6, #0]
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	6961      	ldr	r1, [r4, #20]
 800a11c:	1d18      	adds	r0, r3, #4
 800a11e:	6030      	str	r0, [r6, #0]
 800a120:	062e      	lsls	r6, r5, #24
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	d501      	bpl.n	800a12a <_printf_i+0x1be>
 800a126:	6019      	str	r1, [r3, #0]
 800a128:	e002      	b.n	800a130 <_printf_i+0x1c4>
 800a12a:	0668      	lsls	r0, r5, #25
 800a12c:	d5fb      	bpl.n	800a126 <_printf_i+0x1ba>
 800a12e:	8019      	strh	r1, [r3, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	4616      	mov	r6, r2
 800a136:	e7bc      	b.n	800a0b2 <_printf_i+0x146>
 800a138:	6833      	ldr	r3, [r6, #0]
 800a13a:	1d1a      	adds	r2, r3, #4
 800a13c:	6032      	str	r2, [r6, #0]
 800a13e:	681e      	ldr	r6, [r3, #0]
 800a140:	6862      	ldr	r2, [r4, #4]
 800a142:	2100      	movs	r1, #0
 800a144:	4630      	mov	r0, r6
 800a146:	f7f6 f84b 	bl	80001e0 <memchr>
 800a14a:	b108      	cbz	r0, 800a150 <_printf_i+0x1e4>
 800a14c:	1b80      	subs	r0, r0, r6
 800a14e:	6060      	str	r0, [r4, #4]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2300      	movs	r3, #0
 800a156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a15a:	e7aa      	b.n	800a0b2 <_printf_i+0x146>
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	4632      	mov	r2, r6
 800a160:	4649      	mov	r1, r9
 800a162:	4640      	mov	r0, r8
 800a164:	47d0      	blx	sl
 800a166:	3001      	adds	r0, #1
 800a168:	d0ad      	beq.n	800a0c6 <_printf_i+0x15a>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	079b      	lsls	r3, r3, #30
 800a16e:	d413      	bmi.n	800a198 <_printf_i+0x22c>
 800a170:	68e0      	ldr	r0, [r4, #12]
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	4298      	cmp	r0, r3
 800a176:	bfb8      	it	lt
 800a178:	4618      	movlt	r0, r3
 800a17a:	e7a6      	b.n	800a0ca <_printf_i+0x15e>
 800a17c:	2301      	movs	r3, #1
 800a17e:	4632      	mov	r2, r6
 800a180:	4649      	mov	r1, r9
 800a182:	4640      	mov	r0, r8
 800a184:	47d0      	blx	sl
 800a186:	3001      	adds	r0, #1
 800a188:	d09d      	beq.n	800a0c6 <_printf_i+0x15a>
 800a18a:	3501      	adds	r5, #1
 800a18c:	68e3      	ldr	r3, [r4, #12]
 800a18e:	9903      	ldr	r1, [sp, #12]
 800a190:	1a5b      	subs	r3, r3, r1
 800a192:	42ab      	cmp	r3, r5
 800a194:	dcf2      	bgt.n	800a17c <_printf_i+0x210>
 800a196:	e7eb      	b.n	800a170 <_printf_i+0x204>
 800a198:	2500      	movs	r5, #0
 800a19a:	f104 0619 	add.w	r6, r4, #25
 800a19e:	e7f5      	b.n	800a18c <_printf_i+0x220>
 800a1a0:	0800c6e2 	.word	0x0800c6e2
 800a1a4:	0800c6f3 	.word	0x0800c6f3

0800a1a8 <std>:
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1b6:	6083      	str	r3, [r0, #8]
 800a1b8:	8181      	strh	r1, [r0, #12]
 800a1ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1bc:	81c2      	strh	r2, [r0, #14]
 800a1be:	6183      	str	r3, [r0, #24]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	305c      	adds	r0, #92	@ 0x5c
 800a1c6:	f000 f93c 	bl	800a442 <memset>
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a200 <std+0x58>)
 800a1cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a204 <std+0x5c>)
 800a1d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a208 <std+0x60>)
 800a1d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a20c <std+0x64>)
 800a1d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1da:	4b0d      	ldr	r3, [pc, #52]	@ (800a210 <std+0x68>)
 800a1dc:	6224      	str	r4, [r4, #32]
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d006      	beq.n	800a1f0 <std+0x48>
 800a1e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1e6:	4294      	cmp	r4, r2
 800a1e8:	d002      	beq.n	800a1f0 <std+0x48>
 800a1ea:	33d0      	adds	r3, #208	@ 0xd0
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d105      	bne.n	800a1fc <std+0x54>
 800a1f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f8:	f000 b9a0 	b.w	800a53c <__retarget_lock_init_recursive>
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	0800a3bd 	.word	0x0800a3bd
 800a204:	0800a3df 	.word	0x0800a3df
 800a208:	0800a417 	.word	0x0800a417
 800a20c:	0800a43b 	.word	0x0800a43b
 800a210:	20001d48 	.word	0x20001d48

0800a214 <stdio_exit_handler>:
 800a214:	4a02      	ldr	r2, [pc, #8]	@ (800a220 <stdio_exit_handler+0xc>)
 800a216:	4903      	ldr	r1, [pc, #12]	@ (800a224 <stdio_exit_handler+0x10>)
 800a218:	4803      	ldr	r0, [pc, #12]	@ (800a228 <stdio_exit_handler+0x14>)
 800a21a:	f000 b869 	b.w	800a2f0 <_fwalk_sglue>
 800a21e:	bf00      	nop
 800a220:	20000010 	.word	0x20000010
 800a224:	0800c141 	.word	0x0800c141
 800a228:	20000020 	.word	0x20000020

0800a22c <cleanup_stdio>:
 800a22c:	6841      	ldr	r1, [r0, #4]
 800a22e:	4b0c      	ldr	r3, [pc, #48]	@ (800a260 <cleanup_stdio+0x34>)
 800a230:	4299      	cmp	r1, r3
 800a232:	b510      	push	{r4, lr}
 800a234:	4604      	mov	r4, r0
 800a236:	d001      	beq.n	800a23c <cleanup_stdio+0x10>
 800a238:	f001 ff82 	bl	800c140 <_fflush_r>
 800a23c:	68a1      	ldr	r1, [r4, #8]
 800a23e:	4b09      	ldr	r3, [pc, #36]	@ (800a264 <cleanup_stdio+0x38>)
 800a240:	4299      	cmp	r1, r3
 800a242:	d002      	beq.n	800a24a <cleanup_stdio+0x1e>
 800a244:	4620      	mov	r0, r4
 800a246:	f001 ff7b 	bl	800c140 <_fflush_r>
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <cleanup_stdio+0x3c>)
 800a24e:	4299      	cmp	r1, r3
 800a250:	d004      	beq.n	800a25c <cleanup_stdio+0x30>
 800a252:	4620      	mov	r0, r4
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	f001 bf72 	b.w	800c140 <_fflush_r>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	20001d48 	.word	0x20001d48
 800a264:	20001db0 	.word	0x20001db0
 800a268:	20001e18 	.word	0x20001e18

0800a26c <global_stdio_init.part.0>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	4b0b      	ldr	r3, [pc, #44]	@ (800a29c <global_stdio_init.part.0+0x30>)
 800a270:	4c0b      	ldr	r4, [pc, #44]	@ (800a2a0 <global_stdio_init.part.0+0x34>)
 800a272:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a4 <global_stdio_init.part.0+0x38>)
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	4620      	mov	r0, r4
 800a278:	2200      	movs	r2, #0
 800a27a:	2104      	movs	r1, #4
 800a27c:	f7ff ff94 	bl	800a1a8 <std>
 800a280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a284:	2201      	movs	r2, #1
 800a286:	2109      	movs	r1, #9
 800a288:	f7ff ff8e 	bl	800a1a8 <std>
 800a28c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a290:	2202      	movs	r2, #2
 800a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a296:	2112      	movs	r1, #18
 800a298:	f7ff bf86 	b.w	800a1a8 <std>
 800a29c:	20001e80 	.word	0x20001e80
 800a2a0:	20001d48 	.word	0x20001d48
 800a2a4:	0800a215 	.word	0x0800a215

0800a2a8 <__sfp_lock_acquire>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	@ (800a2b0 <__sfp_lock_acquire+0x8>)
 800a2aa:	f000 b948 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20001e89 	.word	0x20001e89

0800a2b4 <__sfp_lock_release>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	@ (800a2bc <__sfp_lock_release+0x8>)
 800a2b6:	f000 b943 	b.w	800a540 <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20001e89 	.word	0x20001e89

0800a2c0 <__sinit>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f7ff fff0 	bl	800a2a8 <__sfp_lock_acquire>
 800a2c8:	6a23      	ldr	r3, [r4, #32]
 800a2ca:	b11b      	cbz	r3, 800a2d4 <__sinit+0x14>
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f7ff bff0 	b.w	800a2b4 <__sfp_lock_release>
 800a2d4:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <__sinit+0x28>)
 800a2d6:	6223      	str	r3, [r4, #32]
 800a2d8:	4b04      	ldr	r3, [pc, #16]	@ (800a2ec <__sinit+0x2c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f5      	bne.n	800a2cc <__sinit+0xc>
 800a2e0:	f7ff ffc4 	bl	800a26c <global_stdio_init.part.0>
 800a2e4:	e7f2      	b.n	800a2cc <__sinit+0xc>
 800a2e6:	bf00      	nop
 800a2e8:	0800a22d 	.word	0x0800a22d
 800a2ec:	20001e80 	.word	0x20001e80

0800a2f0 <_fwalk_sglue>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a300:	f1b9 0901 	subs.w	r9, r9, #1
 800a304:	d505      	bpl.n	800a312 <_fwalk_sglue+0x22>
 800a306:	6824      	ldr	r4, [r4, #0]
 800a308:	2c00      	cmp	r4, #0
 800a30a:	d1f7      	bne.n	800a2fc <_fwalk_sglue+0xc>
 800a30c:	4630      	mov	r0, r6
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d907      	bls.n	800a328 <_fwalk_sglue+0x38>
 800a318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31c:	3301      	adds	r3, #1
 800a31e:	d003      	beq.n	800a328 <_fwalk_sglue+0x38>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	47c0      	blx	r8
 800a326:	4306      	orrs	r6, r0
 800a328:	3568      	adds	r5, #104	@ 0x68
 800a32a:	e7e9      	b.n	800a300 <_fwalk_sglue+0x10>

0800a32c <iprintf>:
 800a32c:	b40f      	push	{r0, r1, r2, r3}
 800a32e:	b507      	push	{r0, r1, r2, lr}
 800a330:	4906      	ldr	r1, [pc, #24]	@ (800a34c <iprintf+0x20>)
 800a332:	ab04      	add	r3, sp, #16
 800a334:	6808      	ldr	r0, [r1, #0]
 800a336:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33a:	6881      	ldr	r1, [r0, #8]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f001 fd63 	bl	800be08 <_vfiprintf_r>
 800a342:	b003      	add	sp, #12
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b004      	add	sp, #16
 800a34a:	4770      	bx	lr
 800a34c:	2000001c 	.word	0x2000001c

0800a350 <sniprintf>:
 800a350:	b40c      	push	{r2, r3}
 800a352:	b530      	push	{r4, r5, lr}
 800a354:	4b18      	ldr	r3, [pc, #96]	@ (800a3b8 <sniprintf+0x68>)
 800a356:	1e0c      	subs	r4, r1, #0
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	b09d      	sub	sp, #116	@ 0x74
 800a35c:	da08      	bge.n	800a370 <sniprintf+0x20>
 800a35e:	238b      	movs	r3, #139	@ 0x8b
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	b01d      	add	sp, #116	@ 0x74
 800a368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a36c:	b002      	add	sp, #8
 800a36e:	4770      	bx	lr
 800a370:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a374:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a378:	f04f 0300 	mov.w	r3, #0
 800a37c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a37e:	bf14      	ite	ne
 800a380:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a384:	4623      	moveq	r3, r4
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	9307      	str	r3, [sp, #28]
 800a38a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a38e:	9002      	str	r0, [sp, #8]
 800a390:	9006      	str	r0, [sp, #24]
 800a392:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a396:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a398:	ab21      	add	r3, sp, #132	@ 0x84
 800a39a:	a902      	add	r1, sp, #8
 800a39c:	4628      	mov	r0, r5
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	f001 fc0c 	bl	800bbbc <_svfiprintf_r>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	bfbc      	itt	lt
 800a3a8:	238b      	movlt	r3, #139	@ 0x8b
 800a3aa:	602b      	strlt	r3, [r5, #0]
 800a3ac:	2c00      	cmp	r4, #0
 800a3ae:	d0da      	beq.n	800a366 <sniprintf+0x16>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e7d6      	b.n	800a366 <sniprintf+0x16>
 800a3b8:	2000001c 	.word	0x2000001c

0800a3bc <__sread>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	f000 f86c 	bl	800a4a0 <_read_r>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	bfab      	itete	ge
 800a3cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d0:	181b      	addge	r3, r3, r0
 800a3d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3d6:	bfac      	ite	ge
 800a3d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3da:	81a3      	strhlt	r3, [r4, #12]
 800a3dc:	bd10      	pop	{r4, pc}

0800a3de <__swrite>:
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	898b      	ldrh	r3, [r1, #12]
 800a3e6:	05db      	lsls	r3, r3, #23
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4616      	mov	r6, r2
 800a3ee:	d505      	bpl.n	800a3fc <__swrite+0x1e>
 800a3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f000 f840 	bl	800a47c <_lseek_r>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a406:	81a3      	strh	r3, [r4, #12]
 800a408:	4632      	mov	r2, r6
 800a40a:	463b      	mov	r3, r7
 800a40c:	4628      	mov	r0, r5
 800a40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a412:	f000 b857 	b.w	800a4c4 <_write_r>

0800a416 <__sseek>:
 800a416:	b510      	push	{r4, lr}
 800a418:	460c      	mov	r4, r1
 800a41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41e:	f000 f82d 	bl	800a47c <_lseek_r>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	bf15      	itete	ne
 800a428:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a42a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a42e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a432:	81a3      	strheq	r3, [r4, #12]
 800a434:	bf18      	it	ne
 800a436:	81a3      	strhne	r3, [r4, #12]
 800a438:	bd10      	pop	{r4, pc}

0800a43a <__sclose>:
 800a43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a43e:	f000 b80d 	b.w	800a45c <_close_r>

0800a442 <memset>:
 800a442:	4402      	add	r2, r0
 800a444:	4603      	mov	r3, r0
 800a446:	4293      	cmp	r3, r2
 800a448:	d100      	bne.n	800a44c <memset+0xa>
 800a44a:	4770      	bx	lr
 800a44c:	f803 1b01 	strb.w	r1, [r3], #1
 800a450:	e7f9      	b.n	800a446 <memset+0x4>
	...

0800a454 <_localeconv_r>:
 800a454:	4800      	ldr	r0, [pc, #0]	@ (800a458 <_localeconv_r+0x4>)
 800a456:	4770      	bx	lr
 800a458:	2000015c 	.word	0x2000015c

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	@ (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 f90e 	bl	8001688 <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20001e84 	.word	0x20001e84

0800a47c <_lseek_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	@ (800a49c <_lseek_r+0x20>)
 800a480:	4604      	mov	r4, r0
 800a482:	4608      	mov	r0, r1
 800a484:	4611      	mov	r1, r2
 800a486:	2200      	movs	r2, #0
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f7f7 f923 	bl	80016d6 <_lseek>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_lseek_r+0x1e>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_lseek_r+0x1e>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20001e84 	.word	0x20001e84

0800a4a0 <_read_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	@ (800a4c0 <_read_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 f8b1 	bl	8001616 <_read>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_read_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_read_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20001e84 	.word	0x20001e84

0800a4c4 <_write_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d07      	ldr	r5, [pc, #28]	@ (800a4e4 <_write_r+0x20>)
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	602a      	str	r2, [r5, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f7f7 f8bc 	bl	8001650 <_write>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_write_r+0x1e>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_write_r+0x1e>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	20001e84 	.word	0x20001e84

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	@ (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	2000001c 	.word	0x2000001c

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a52c <__libc_init_array+0x38>)
 800a4f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a530 <__libc_init_array+0x3c>)
 800a4fa:	1b64      	subs	r4, r4, r5
 800a4fc:	10a4      	asrs	r4, r4, #2
 800a4fe:	2600      	movs	r6, #0
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	4d0b      	ldr	r5, [pc, #44]	@ (800a534 <__libc_init_array+0x40>)
 800a506:	4c0c      	ldr	r4, [pc, #48]	@ (800a538 <__libc_init_array+0x44>)
 800a508:	f002 f86a 	bl	800c5e0 <_init>
 800a50c:	1b64      	subs	r4, r4, r5
 800a50e:	10a4      	asrs	r4, r4, #2
 800a510:	2600      	movs	r6, #0
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	0800ca4c 	.word	0x0800ca4c
 800a530:	0800ca4c 	.word	0x0800ca4c
 800a534:	0800ca4c 	.word	0x0800ca4c
 800a538:	0800ca50 	.word	0x0800ca50

0800a53c <__retarget_lock_init_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_acquire_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <__retarget_lock_release_recursive>:
 800a540:	4770      	bx	lr

0800a542 <memcpy>:
 800a542:	440a      	add	r2, r1
 800a544:	4291      	cmp	r1, r2
 800a546:	f100 33ff 	add.w	r3, r0, #4294967295
 800a54a:	d100      	bne.n	800a54e <memcpy+0xc>
 800a54c:	4770      	bx	lr
 800a54e:	b510      	push	{r4, lr}
 800a550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	4291      	cmp	r1, r2
 800a55a:	d1f9      	bne.n	800a550 <memcpy+0xe>
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <quorem>:
 800a55e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a562:	6903      	ldr	r3, [r0, #16]
 800a564:	690c      	ldr	r4, [r1, #16]
 800a566:	42a3      	cmp	r3, r4
 800a568:	4607      	mov	r7, r0
 800a56a:	db7e      	blt.n	800a66a <quorem+0x10c>
 800a56c:	3c01      	subs	r4, #1
 800a56e:	f101 0814 	add.w	r8, r1, #20
 800a572:	00a3      	lsls	r3, r4, #2
 800a574:	f100 0514 	add.w	r5, r0, #20
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a588:	3301      	adds	r3, #1
 800a58a:	429a      	cmp	r2, r3
 800a58c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a590:	fbb2 f6f3 	udiv	r6, r2, r3
 800a594:	d32e      	bcc.n	800a5f4 <quorem+0x96>
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	46c4      	mov	ip, r8
 800a59c:	46ae      	mov	lr, r5
 800a59e:	46d3      	mov	fp, sl
 800a5a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5a4:	b298      	uxth	r0, r3
 800a5a6:	fb06 a000 	mla	r0, r6, r0, sl
 800a5aa:	0c02      	lsrs	r2, r0, #16
 800a5ac:	0c1b      	lsrs	r3, r3, #16
 800a5ae:	fb06 2303 	mla	r3, r6, r3, r2
 800a5b2:	f8de 2000 	ldr.w	r2, [lr]
 800a5b6:	b280      	uxth	r0, r0
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	1a12      	subs	r2, r2, r0
 800a5bc:	445a      	add	r2, fp
 800a5be:	f8de 0000 	ldr.w	r0, [lr]
 800a5c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5d0:	b292      	uxth	r2, r2
 800a5d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5d6:	45e1      	cmp	r9, ip
 800a5d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5e0:	d2de      	bcs.n	800a5a0 <quorem+0x42>
 800a5e2:	9b00      	ldr	r3, [sp, #0]
 800a5e4:	58eb      	ldr	r3, [r5, r3]
 800a5e6:	b92b      	cbnz	r3, 800a5f4 <quorem+0x96>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	3b04      	subs	r3, #4
 800a5ec:	429d      	cmp	r5, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	d32f      	bcc.n	800a652 <quorem+0xf4>
 800a5f2:	613c      	str	r4, [r7, #16]
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f001 f97d 	bl	800b8f4 <__mcmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	db25      	blt.n	800a64a <quorem+0xec>
 800a5fe:	4629      	mov	r1, r5
 800a600:	2000      	movs	r0, #0
 800a602:	f858 2b04 	ldr.w	r2, [r8], #4
 800a606:	f8d1 c000 	ldr.w	ip, [r1]
 800a60a:	fa1f fe82 	uxth.w	lr, r2
 800a60e:	fa1f f38c 	uxth.w	r3, ip
 800a612:	eba3 030e 	sub.w	r3, r3, lr
 800a616:	4403      	add	r3, r0
 800a618:	0c12      	lsrs	r2, r2, #16
 800a61a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a61e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a622:	b29b      	uxth	r3, r3
 800a624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a628:	45c1      	cmp	r9, r8
 800a62a:	f841 3b04 	str.w	r3, [r1], #4
 800a62e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a632:	d2e6      	bcs.n	800a602 <quorem+0xa4>
 800a634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a63c:	b922      	cbnz	r2, 800a648 <quorem+0xea>
 800a63e:	3b04      	subs	r3, #4
 800a640:	429d      	cmp	r5, r3
 800a642:	461a      	mov	r2, r3
 800a644:	d30b      	bcc.n	800a65e <quorem+0x100>
 800a646:	613c      	str	r4, [r7, #16]
 800a648:	3601      	adds	r6, #1
 800a64a:	4630      	mov	r0, r6
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	3b04      	subs	r3, #4
 800a656:	2a00      	cmp	r2, #0
 800a658:	d1cb      	bne.n	800a5f2 <quorem+0x94>
 800a65a:	3c01      	subs	r4, #1
 800a65c:	e7c6      	b.n	800a5ec <quorem+0x8e>
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	3b04      	subs	r3, #4
 800a662:	2a00      	cmp	r2, #0
 800a664:	d1ef      	bne.n	800a646 <quorem+0xe8>
 800a666:	3c01      	subs	r4, #1
 800a668:	e7ea      	b.n	800a640 <quorem+0xe2>
 800a66a:	2000      	movs	r0, #0
 800a66c:	e7ee      	b.n	800a64c <quorem+0xee>
	...

0800a670 <_dtoa_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	69c7      	ldr	r7, [r0, #28]
 800a676:	b097      	sub	sp, #92	@ 0x5c
 800a678:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a67c:	ec55 4b10 	vmov	r4, r5, d0
 800a680:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a682:	9107      	str	r1, [sp, #28]
 800a684:	4681      	mov	r9, r0
 800a686:	920c      	str	r2, [sp, #48]	@ 0x30
 800a688:	9311      	str	r3, [sp, #68]	@ 0x44
 800a68a:	b97f      	cbnz	r7, 800a6ac <_dtoa_r+0x3c>
 800a68c:	2010      	movs	r0, #16
 800a68e:	f000 fe09 	bl	800b2a4 <malloc>
 800a692:	4602      	mov	r2, r0
 800a694:	f8c9 001c 	str.w	r0, [r9, #28]
 800a698:	b920      	cbnz	r0, 800a6a4 <_dtoa_r+0x34>
 800a69a:	4ba9      	ldr	r3, [pc, #676]	@ (800a940 <_dtoa_r+0x2d0>)
 800a69c:	21ef      	movs	r1, #239	@ 0xef
 800a69e:	48a9      	ldr	r0, [pc, #676]	@ (800a944 <_dtoa_r+0x2d4>)
 800a6a0:	f001 fe34 	bl	800c30c <__assert_func>
 800a6a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6a8:	6007      	str	r7, [r0, #0]
 800a6aa:	60c7      	str	r7, [r0, #12]
 800a6ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6b0:	6819      	ldr	r1, [r3, #0]
 800a6b2:	b159      	cbz	r1, 800a6cc <_dtoa_r+0x5c>
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	604a      	str	r2, [r1, #4]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4093      	lsls	r3, r2
 800a6bc:	608b      	str	r3, [r1, #8]
 800a6be:	4648      	mov	r0, r9
 800a6c0:	f000 fee6 	bl	800b490 <_Bfree>
 800a6c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	1e2b      	subs	r3, r5, #0
 800a6ce:	bfb9      	ittee	lt
 800a6d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6d4:	9305      	strlt	r3, [sp, #20]
 800a6d6:	2300      	movge	r3, #0
 800a6d8:	6033      	strge	r3, [r6, #0]
 800a6da:	9f05      	ldr	r7, [sp, #20]
 800a6dc:	4b9a      	ldr	r3, [pc, #616]	@ (800a948 <_dtoa_r+0x2d8>)
 800a6de:	bfbc      	itt	lt
 800a6e0:	2201      	movlt	r2, #1
 800a6e2:	6032      	strlt	r2, [r6, #0]
 800a6e4:	43bb      	bics	r3, r7
 800a6e6:	d112      	bne.n	800a70e <_dtoa_r+0x9e>
 800a6e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6f4:	4323      	orrs	r3, r4
 800a6f6:	f000 855a 	beq.w	800b1ae <_dtoa_r+0xb3e>
 800a6fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a95c <_dtoa_r+0x2ec>
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 855c 	beq.w	800b1be <_dtoa_r+0xb4e>
 800a706:	f10a 0303 	add.w	r3, sl, #3
 800a70a:	f000 bd56 	b.w	800b1ba <_dtoa_r+0xb4a>
 800a70e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a712:	2200      	movs	r2, #0
 800a714:	ec51 0b17 	vmov	r0, r1, d7
 800a718:	2300      	movs	r3, #0
 800a71a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a71e:	f7f6 f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 800a722:	4680      	mov	r8, r0
 800a724:	b158      	cbz	r0, 800a73e <_dtoa_r+0xce>
 800a726:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a728:	2301      	movs	r3, #1
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a72e:	b113      	cbz	r3, 800a736 <_dtoa_r+0xc6>
 800a730:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a732:	4b86      	ldr	r3, [pc, #536]	@ (800a94c <_dtoa_r+0x2dc>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a960 <_dtoa_r+0x2f0>
 800a73a:	f000 bd40 	b.w	800b1be <_dtoa_r+0xb4e>
 800a73e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a742:	aa14      	add	r2, sp, #80	@ 0x50
 800a744:	a915      	add	r1, sp, #84	@ 0x54
 800a746:	4648      	mov	r0, r9
 800a748:	f001 f984 	bl	800ba54 <__d2b>
 800a74c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a750:	9002      	str	r0, [sp, #8]
 800a752:	2e00      	cmp	r6, #0
 800a754:	d078      	beq.n	800a848 <_dtoa_r+0x1d8>
 800a756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a758:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a76c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a770:	4619      	mov	r1, r3
 800a772:	2200      	movs	r2, #0
 800a774:	4b76      	ldr	r3, [pc, #472]	@ (800a950 <_dtoa_r+0x2e0>)
 800a776:	f7f5 fd8f 	bl	8000298 <__aeabi_dsub>
 800a77a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a928 <_dtoa_r+0x2b8>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 ff42 	bl	8000608 <__aeabi_dmul>
 800a784:	a36a      	add	r3, pc, #424	@ (adr r3, 800a930 <_dtoa_r+0x2c0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd87 	bl	800029c <__adddf3>
 800a78e:	4604      	mov	r4, r0
 800a790:	4630      	mov	r0, r6
 800a792:	460d      	mov	r5, r1
 800a794:	f7f5 fece 	bl	8000534 <__aeabi_i2d>
 800a798:	a367      	add	r3, pc, #412	@ (adr r3, 800a938 <_dtoa_r+0x2c8>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f7f5 ff33 	bl	8000608 <__aeabi_dmul>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f5 fd77 	bl	800029c <__adddf3>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	f7f6 f9d9 	bl	8000b68 <__aeabi_d2iz>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f6 f994 	bl	8000aec <__aeabi_dcmplt>
 800a7c4:	b140      	cbz	r0, 800a7d8 <_dtoa_r+0x168>
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f7f5 feb4 	bl	8000534 <__aeabi_i2d>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f6 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7d4:	b900      	cbnz	r0, 800a7d8 <_dtoa_r+0x168>
 800a7d6:	3f01      	subs	r7, #1
 800a7d8:	2f16      	cmp	r7, #22
 800a7da:	d852      	bhi.n	800a882 <_dtoa_r+0x212>
 800a7dc:	4b5d      	ldr	r3, [pc, #372]	@ (800a954 <_dtoa_r+0x2e4>)
 800a7de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7ea:	f7f6 f97f 	bl	8000aec <__aeabi_dcmplt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d049      	beq.n	800a886 <_dtoa_r+0x216>
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7fa:	1b9b      	subs	r3, r3, r6
 800a7fc:	1e5a      	subs	r2, r3, #1
 800a7fe:	bf45      	ittet	mi
 800a800:	f1c3 0301 	rsbmi	r3, r3, #1
 800a804:	9300      	strmi	r3, [sp, #0]
 800a806:	2300      	movpl	r3, #0
 800a808:	2300      	movmi	r3, #0
 800a80a:	9206      	str	r2, [sp, #24]
 800a80c:	bf54      	ite	pl
 800a80e:	9300      	strpl	r3, [sp, #0]
 800a810:	9306      	strmi	r3, [sp, #24]
 800a812:	2f00      	cmp	r7, #0
 800a814:	db39      	blt.n	800a88a <_dtoa_r+0x21a>
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	970d      	str	r7, [sp, #52]	@ 0x34
 800a81a:	443b      	add	r3, r7
 800a81c:	9306      	str	r3, [sp, #24]
 800a81e:	2300      	movs	r3, #0
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b07      	ldr	r3, [sp, #28]
 800a824:	2b09      	cmp	r3, #9
 800a826:	d863      	bhi.n	800a8f0 <_dtoa_r+0x280>
 800a828:	2b05      	cmp	r3, #5
 800a82a:	bfc4      	itt	gt
 800a82c:	3b04      	subgt	r3, #4
 800a82e:	9307      	strgt	r3, [sp, #28]
 800a830:	9b07      	ldr	r3, [sp, #28]
 800a832:	f1a3 0302 	sub.w	r3, r3, #2
 800a836:	bfcc      	ite	gt
 800a838:	2400      	movgt	r4, #0
 800a83a:	2401      	movle	r4, #1
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d863      	bhi.n	800a908 <_dtoa_r+0x298>
 800a840:	e8df f003 	tbb	[pc, r3]
 800a844:	2b375452 	.word	0x2b375452
 800a848:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a84c:	441e      	add	r6, r3
 800a84e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a852:	2b20      	cmp	r3, #32
 800a854:	bfc1      	itttt	gt
 800a856:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a85a:	409f      	lslgt	r7, r3
 800a85c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a860:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a864:	bfd6      	itet	le
 800a866:	f1c3 0320 	rsble	r3, r3, #32
 800a86a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a86e:	fa04 f003 	lslle.w	r0, r4, r3
 800a872:	f7f5 fe4f 	bl	8000514 <__aeabi_ui2d>
 800a876:	2201      	movs	r2, #1
 800a878:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a87c:	3e01      	subs	r6, #1
 800a87e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a880:	e776      	b.n	800a770 <_dtoa_r+0x100>
 800a882:	2301      	movs	r3, #1
 800a884:	e7b7      	b.n	800a7f6 <_dtoa_r+0x186>
 800a886:	9010      	str	r0, [sp, #64]	@ 0x40
 800a888:	e7b6      	b.n	800a7f8 <_dtoa_r+0x188>
 800a88a:	9b00      	ldr	r3, [sp, #0]
 800a88c:	1bdb      	subs	r3, r3, r7
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	427b      	negs	r3, r7
 800a892:	9308      	str	r3, [sp, #32]
 800a894:	2300      	movs	r3, #0
 800a896:	930d      	str	r3, [sp, #52]	@ 0x34
 800a898:	e7c3      	b.n	800a822 <_dtoa_r+0x1b2>
 800a89a:	2301      	movs	r3, #1
 800a89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8a0:	eb07 0b03 	add.w	fp, r7, r3
 800a8a4:	f10b 0301 	add.w	r3, fp, #1
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	9303      	str	r3, [sp, #12]
 800a8ac:	bfb8      	it	lt
 800a8ae:	2301      	movlt	r3, #1
 800a8b0:	e006      	b.n	800a8c0 <_dtoa_r+0x250>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dd28      	ble.n	800a90e <_dtoa_r+0x29e>
 800a8bc:	469b      	mov	fp, r3
 800a8be:	9303      	str	r3, [sp, #12]
 800a8c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	f102 0514 	add.w	r5, r2, #20
 800a8cc:	429d      	cmp	r5, r3
 800a8ce:	d926      	bls.n	800a91e <_dtoa_r+0x2ae>
 800a8d0:	6041      	str	r1, [r0, #4]
 800a8d2:	4648      	mov	r0, r9
 800a8d4:	f000 fd9c 	bl	800b410 <_Balloc>
 800a8d8:	4682      	mov	sl, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d142      	bne.n	800a964 <_dtoa_r+0x2f4>
 800a8de:	4b1e      	ldr	r3, [pc, #120]	@ (800a958 <_dtoa_r+0x2e8>)
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8e6:	e6da      	b.n	800a69e <_dtoa_r+0x2e>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e7e3      	b.n	800a8b4 <_dtoa_r+0x244>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e7d5      	b.n	800a89c <_dtoa_r+0x22c>
 800a8f0:	2401      	movs	r4, #1
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9307      	str	r3, [sp, #28]
 800a8f6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a8f8:	f04f 3bff 	mov.w	fp, #4294967295
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8cd b00c 	str.w	fp, [sp, #12]
 800a902:	2312      	movs	r3, #18
 800a904:	920c      	str	r2, [sp, #48]	@ 0x30
 800a906:	e7db      	b.n	800a8c0 <_dtoa_r+0x250>
 800a908:	2301      	movs	r3, #1
 800a90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a90c:	e7f4      	b.n	800a8f8 <_dtoa_r+0x288>
 800a90e:	f04f 0b01 	mov.w	fp, #1
 800a912:	f8cd b00c 	str.w	fp, [sp, #12]
 800a916:	465b      	mov	r3, fp
 800a918:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a91c:	e7d0      	b.n	800a8c0 <_dtoa_r+0x250>
 800a91e:	3101      	adds	r1, #1
 800a920:	0052      	lsls	r2, r2, #1
 800a922:	e7d1      	b.n	800a8c8 <_dtoa_r+0x258>
 800a924:	f3af 8000 	nop.w
 800a928:	636f4361 	.word	0x636f4361
 800a92c:	3fd287a7 	.word	0x3fd287a7
 800a930:	8b60c8b3 	.word	0x8b60c8b3
 800a934:	3fc68a28 	.word	0x3fc68a28
 800a938:	509f79fb 	.word	0x509f79fb
 800a93c:	3fd34413 	.word	0x3fd34413
 800a940:	0800c711 	.word	0x0800c711
 800a944:	0800c728 	.word	0x0800c728
 800a948:	7ff00000 	.word	0x7ff00000
 800a94c:	0800c6e1 	.word	0x0800c6e1
 800a950:	3ff80000 	.word	0x3ff80000
 800a954:	0800c878 	.word	0x0800c878
 800a958:	0800c780 	.word	0x0800c780
 800a95c:	0800c70d 	.word	0x0800c70d
 800a960:	0800c6e0 	.word	0x0800c6e0
 800a964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a968:	6018      	str	r0, [r3, #0]
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	2b0e      	cmp	r3, #14
 800a96e:	f200 80a1 	bhi.w	800aab4 <_dtoa_r+0x444>
 800a972:	2c00      	cmp	r4, #0
 800a974:	f000 809e 	beq.w	800aab4 <_dtoa_r+0x444>
 800a978:	2f00      	cmp	r7, #0
 800a97a:	dd33      	ble.n	800a9e4 <_dtoa_r+0x374>
 800a97c:	4b9c      	ldr	r3, [pc, #624]	@ (800abf0 <_dtoa_r+0x580>)
 800a97e:	f007 020f 	and.w	r2, r7, #15
 800a982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a986:	ed93 7b00 	vldr	d7, [r3]
 800a98a:	05f8      	lsls	r0, r7, #23
 800a98c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a990:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a994:	d516      	bpl.n	800a9c4 <_dtoa_r+0x354>
 800a996:	4b97      	ldr	r3, [pc, #604]	@ (800abf4 <_dtoa_r+0x584>)
 800a998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a99c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9a0:	f7f5 ff5c 	bl	800085c <__aeabi_ddiv>
 800a9a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9a8:	f004 040f 	and.w	r4, r4, #15
 800a9ac:	2603      	movs	r6, #3
 800a9ae:	4d91      	ldr	r5, [pc, #580]	@ (800abf4 <_dtoa_r+0x584>)
 800a9b0:	b954      	cbnz	r4, 800a9c8 <_dtoa_r+0x358>
 800a9b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ba:	f7f5 ff4f 	bl	800085c <__aeabi_ddiv>
 800a9be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c2:	e028      	b.n	800aa16 <_dtoa_r+0x3a6>
 800a9c4:	2602      	movs	r6, #2
 800a9c6:	e7f2      	b.n	800a9ae <_dtoa_r+0x33e>
 800a9c8:	07e1      	lsls	r1, r4, #31
 800a9ca:	d508      	bpl.n	800a9de <_dtoa_r+0x36e>
 800a9cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a9d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9dc:	3601      	adds	r6, #1
 800a9de:	1064      	asrs	r4, r4, #1
 800a9e0:	3508      	adds	r5, #8
 800a9e2:	e7e5      	b.n	800a9b0 <_dtoa_r+0x340>
 800a9e4:	f000 80af 	beq.w	800ab46 <_dtoa_r+0x4d6>
 800a9e8:	427c      	negs	r4, r7
 800a9ea:	4b81      	ldr	r3, [pc, #516]	@ (800abf0 <_dtoa_r+0x580>)
 800a9ec:	4d81      	ldr	r5, [pc, #516]	@ (800abf4 <_dtoa_r+0x584>)
 800a9ee:	f004 020f 	and.w	r2, r4, #15
 800a9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9fe:	f7f5 fe03 	bl	8000608 <__aeabi_dmul>
 800aa02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa06:	1124      	asrs	r4, r4, #4
 800aa08:	2300      	movs	r3, #0
 800aa0a:	2602      	movs	r6, #2
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	f040 808f 	bne.w	800ab30 <_dtoa_r+0x4c0>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1d3      	bne.n	800a9be <_dtoa_r+0x34e>
 800aa16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8094 	beq.w	800ab4a <_dtoa_r+0x4da>
 800aa22:	4b75      	ldr	r3, [pc, #468]	@ (800abf8 <_dtoa_r+0x588>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f6 f85f 	bl	8000aec <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f000 808b 	beq.w	800ab4a <_dtoa_r+0x4da>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 8087 	beq.w	800ab4a <_dtoa_r+0x4da>
 800aa3c:	f1bb 0f00 	cmp.w	fp, #0
 800aa40:	dd34      	ble.n	800aaac <_dtoa_r+0x43c>
 800aa42:	4620      	mov	r0, r4
 800aa44:	4b6d      	ldr	r3, [pc, #436]	@ (800abfc <_dtoa_r+0x58c>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7f5 fddd 	bl	8000608 <__aeabi_dmul>
 800aa4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa52:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa56:	3601      	adds	r6, #1
 800aa58:	465c      	mov	r4, fp
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7f5 fd6a 	bl	8000534 <__aeabi_i2d>
 800aa60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa64:	f7f5 fdd0 	bl	8000608 <__aeabi_dmul>
 800aa68:	4b65      	ldr	r3, [pc, #404]	@ (800ac00 <_dtoa_r+0x590>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f7f5 fc16 	bl	800029c <__adddf3>
 800aa70:	4605      	mov	r5, r0
 800aa72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa76:	2c00      	cmp	r4, #0
 800aa78:	d16a      	bne.n	800ab50 <_dtoa_r+0x4e0>
 800aa7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa7e:	4b61      	ldr	r3, [pc, #388]	@ (800ac04 <_dtoa_r+0x594>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	f7f5 fc09 	bl	8000298 <__aeabi_dsub>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4633      	mov	r3, r6
 800aa92:	f7f6 f849 	bl	8000b28 <__aeabi_dcmpgt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f040 8298 	bne.w	800afcc <_dtoa_r+0x95c>
 800aa9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aaa6:	f7f6 f821 	bl	8000aec <__aeabi_dcmplt>
 800aaaa:	bb38      	cbnz	r0, 800aafc <_dtoa_r+0x48c>
 800aaac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aab0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aab4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f2c0 8157 	blt.w	800ad6a <_dtoa_r+0x6fa>
 800aabc:	2f0e      	cmp	r7, #14
 800aabe:	f300 8154 	bgt.w	800ad6a <_dtoa_r+0x6fa>
 800aac2:	4b4b      	ldr	r3, [pc, #300]	@ (800abf0 <_dtoa_r+0x580>)
 800aac4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aac8:	ed93 7b00 	vldr	d7, [r3]
 800aacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aace:	2b00      	cmp	r3, #0
 800aad0:	ed8d 7b00 	vstr	d7, [sp]
 800aad4:	f280 80e5 	bge.w	800aca2 <_dtoa_r+0x632>
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f300 80e1 	bgt.w	800aca2 <_dtoa_r+0x632>
 800aae0:	d10c      	bne.n	800aafc <_dtoa_r+0x48c>
 800aae2:	4b48      	ldr	r3, [pc, #288]	@ (800ac04 <_dtoa_r+0x594>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	ec51 0b17 	vmov	r0, r1, d7
 800aaea:	f7f5 fd8d 	bl	8000608 <__aeabi_dmul>
 800aaee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf2:	f7f6 f80f 	bl	8000b14 <__aeabi_dcmpge>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f000 8266 	beq.w	800afc8 <_dtoa_r+0x958>
 800aafc:	2400      	movs	r4, #0
 800aafe:	4625      	mov	r5, r4
 800ab00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab02:	4656      	mov	r6, sl
 800ab04:	ea6f 0803 	mvn.w	r8, r3
 800ab08:	2700      	movs	r7, #0
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4648      	mov	r0, r9
 800ab0e:	f000 fcbf 	bl	800b490 <_Bfree>
 800ab12:	2d00      	cmp	r5, #0
 800ab14:	f000 80bd 	beq.w	800ac92 <_dtoa_r+0x622>
 800ab18:	b12f      	cbz	r7, 800ab26 <_dtoa_r+0x4b6>
 800ab1a:	42af      	cmp	r7, r5
 800ab1c:	d003      	beq.n	800ab26 <_dtoa_r+0x4b6>
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4648      	mov	r0, r9
 800ab22:	f000 fcb5 	bl	800b490 <_Bfree>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4648      	mov	r0, r9
 800ab2a:	f000 fcb1 	bl	800b490 <_Bfree>
 800ab2e:	e0b0      	b.n	800ac92 <_dtoa_r+0x622>
 800ab30:	07e2      	lsls	r2, r4, #31
 800ab32:	d505      	bpl.n	800ab40 <_dtoa_r+0x4d0>
 800ab34:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab38:	f7f5 fd66 	bl	8000608 <__aeabi_dmul>
 800ab3c:	3601      	adds	r6, #1
 800ab3e:	2301      	movs	r3, #1
 800ab40:	1064      	asrs	r4, r4, #1
 800ab42:	3508      	adds	r5, #8
 800ab44:	e762      	b.n	800aa0c <_dtoa_r+0x39c>
 800ab46:	2602      	movs	r6, #2
 800ab48:	e765      	b.n	800aa16 <_dtoa_r+0x3a6>
 800ab4a:	9c03      	ldr	r4, [sp, #12]
 800ab4c:	46b8      	mov	r8, r7
 800ab4e:	e784      	b.n	800aa5a <_dtoa_r+0x3ea>
 800ab50:	4b27      	ldr	r3, [pc, #156]	@ (800abf0 <_dtoa_r+0x580>)
 800ab52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab5c:	4454      	add	r4, sl
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d054      	beq.n	800ac0c <_dtoa_r+0x59c>
 800ab62:	4929      	ldr	r1, [pc, #164]	@ (800ac08 <_dtoa_r+0x598>)
 800ab64:	2000      	movs	r0, #0
 800ab66:	f7f5 fe79 	bl	800085c <__aeabi_ddiv>
 800ab6a:	4633      	mov	r3, r6
 800ab6c:	462a      	mov	r2, r5
 800ab6e:	f7f5 fb93 	bl	8000298 <__aeabi_dsub>
 800ab72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab76:	4656      	mov	r6, sl
 800ab78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab7c:	f7f5 fff4 	bl	8000b68 <__aeabi_d2iz>
 800ab80:	4605      	mov	r5, r0
 800ab82:	f7f5 fcd7 	bl	8000534 <__aeabi_i2d>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab8e:	f7f5 fb83 	bl	8000298 <__aeabi_dsub>
 800ab92:	3530      	adds	r5, #48	@ 0x30
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab9c:	f806 5b01 	strb.w	r5, [r6], #1
 800aba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aba4:	f7f5 ffa2 	bl	8000aec <__aeabi_dcmplt>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d172      	bne.n	800ac92 <_dtoa_r+0x622>
 800abac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb0:	4911      	ldr	r1, [pc, #68]	@ (800abf8 <_dtoa_r+0x588>)
 800abb2:	2000      	movs	r0, #0
 800abb4:	f7f5 fb70 	bl	8000298 <__aeabi_dsub>
 800abb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abbc:	f7f5 ff96 	bl	8000aec <__aeabi_dcmplt>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	f040 80b4 	bne.w	800ad2e <_dtoa_r+0x6be>
 800abc6:	42a6      	cmp	r6, r4
 800abc8:	f43f af70 	beq.w	800aaac <_dtoa_r+0x43c>
 800abcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800abd0:	4b0a      	ldr	r3, [pc, #40]	@ (800abfc <_dtoa_r+0x58c>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	f7f5 fd18 	bl	8000608 <__aeabi_dmul>
 800abd8:	4b08      	ldr	r3, [pc, #32]	@ (800abfc <_dtoa_r+0x58c>)
 800abda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800abde:	2200      	movs	r2, #0
 800abe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abe4:	f7f5 fd10 	bl	8000608 <__aeabi_dmul>
 800abe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abec:	e7c4      	b.n	800ab78 <_dtoa_r+0x508>
 800abee:	bf00      	nop
 800abf0:	0800c878 	.word	0x0800c878
 800abf4:	0800c850 	.word	0x0800c850
 800abf8:	3ff00000 	.word	0x3ff00000
 800abfc:	40240000 	.word	0x40240000
 800ac00:	401c0000 	.word	0x401c0000
 800ac04:	40140000 	.word	0x40140000
 800ac08:	3fe00000 	.word	0x3fe00000
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f7f5 fcfa 	bl	8000608 <__aeabi_dmul>
 800ac14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac18:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac1a:	4656      	mov	r6, sl
 800ac1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac20:	f7f5 ffa2 	bl	8000b68 <__aeabi_d2iz>
 800ac24:	4605      	mov	r5, r0
 800ac26:	f7f5 fc85 	bl	8000534 <__aeabi_i2d>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac32:	f7f5 fb31 	bl	8000298 <__aeabi_dsub>
 800ac36:	3530      	adds	r5, #48	@ 0x30
 800ac38:	f806 5b01 	strb.w	r5, [r6], #1
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	42a6      	cmp	r6, r4
 800ac42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac46:	f04f 0200 	mov.w	r2, #0
 800ac4a:	d124      	bne.n	800ac96 <_dtoa_r+0x626>
 800ac4c:	4baf      	ldr	r3, [pc, #700]	@ (800af0c <_dtoa_r+0x89c>)
 800ac4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac52:	f7f5 fb23 	bl	800029c <__adddf3>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac5e:	f7f5 ff63 	bl	8000b28 <__aeabi_dcmpgt>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d163      	bne.n	800ad2e <_dtoa_r+0x6be>
 800ac66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac6a:	49a8      	ldr	r1, [pc, #672]	@ (800af0c <_dtoa_r+0x89c>)
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	f7f5 fb13 	bl	8000298 <__aeabi_dsub>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac7a:	f7f5 ff37 	bl	8000aec <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f43f af14 	beq.w	800aaac <_dtoa_r+0x43c>
 800ac84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ac86:	1e73      	subs	r3, r6, #1
 800ac88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac8e:	2b30      	cmp	r3, #48	@ 0x30
 800ac90:	d0f8      	beq.n	800ac84 <_dtoa_r+0x614>
 800ac92:	4647      	mov	r7, r8
 800ac94:	e03b      	b.n	800ad0e <_dtoa_r+0x69e>
 800ac96:	4b9e      	ldr	r3, [pc, #632]	@ (800af10 <_dtoa_r+0x8a0>)
 800ac98:	f7f5 fcb6 	bl	8000608 <__aeabi_dmul>
 800ac9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aca0:	e7bc      	b.n	800ac1c <_dtoa_r+0x5ac>
 800aca2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aca6:	4656      	mov	r6, sl
 800aca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 fdd4 	bl	800085c <__aeabi_ddiv>
 800acb4:	f7f5 ff58 	bl	8000b68 <__aeabi_d2iz>
 800acb8:	4680      	mov	r8, r0
 800acba:	f7f5 fc3b 	bl	8000534 <__aeabi_i2d>
 800acbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc2:	f7f5 fca1 	bl	8000608 <__aeabi_dmul>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acd2:	f7f5 fae1 	bl	8000298 <__aeabi_dsub>
 800acd6:	f806 4b01 	strb.w	r4, [r6], #1
 800acda:	9d03      	ldr	r5, [sp, #12]
 800acdc:	eba6 040a 	sub.w	r4, r6, sl
 800ace0:	42a5      	cmp	r5, r4
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	d133      	bne.n	800ad50 <_dtoa_r+0x6e0>
 800ace8:	f7f5 fad8 	bl	800029c <__adddf3>
 800acec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acf0:	4604      	mov	r4, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	f7f5 ff18 	bl	8000b28 <__aeabi_dcmpgt>
 800acf8:	b9c0      	cbnz	r0, 800ad2c <_dtoa_r+0x6bc>
 800acfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad06:	b110      	cbz	r0, 800ad0e <_dtoa_r+0x69e>
 800ad08:	f018 0f01 	tst.w	r8, #1
 800ad0c:	d10e      	bne.n	800ad2c <_dtoa_r+0x6bc>
 800ad0e:	9902      	ldr	r1, [sp, #8]
 800ad10:	4648      	mov	r0, r9
 800ad12:	f000 fbbd 	bl	800b490 <_Bfree>
 800ad16:	2300      	movs	r3, #0
 800ad18:	7033      	strb	r3, [r6, #0]
 800ad1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad1c:	3701      	adds	r7, #1
 800ad1e:	601f      	str	r7, [r3, #0]
 800ad20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 824b 	beq.w	800b1be <_dtoa_r+0xb4e>
 800ad28:	601e      	str	r6, [r3, #0]
 800ad2a:	e248      	b.n	800b1be <_dtoa_r+0xb4e>
 800ad2c:	46b8      	mov	r8, r7
 800ad2e:	4633      	mov	r3, r6
 800ad30:	461e      	mov	r6, r3
 800ad32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad36:	2a39      	cmp	r2, #57	@ 0x39
 800ad38:	d106      	bne.n	800ad48 <_dtoa_r+0x6d8>
 800ad3a:	459a      	cmp	sl, r3
 800ad3c:	d1f8      	bne.n	800ad30 <_dtoa_r+0x6c0>
 800ad3e:	2230      	movs	r2, #48	@ 0x30
 800ad40:	f108 0801 	add.w	r8, r8, #1
 800ad44:	f88a 2000 	strb.w	r2, [sl]
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	3201      	adds	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	e7a0      	b.n	800ac92 <_dtoa_r+0x622>
 800ad50:	4b6f      	ldr	r3, [pc, #444]	@ (800af10 <_dtoa_r+0x8a0>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	f7f5 fc58 	bl	8000608 <__aeabi_dmul>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	460d      	mov	r5, r1
 800ad60:	f7f5 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d09f      	beq.n	800aca8 <_dtoa_r+0x638>
 800ad68:	e7d1      	b.n	800ad0e <_dtoa_r+0x69e>
 800ad6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	f000 80ea 	beq.w	800af46 <_dtoa_r+0x8d6>
 800ad72:	9a07      	ldr	r2, [sp, #28]
 800ad74:	2a01      	cmp	r2, #1
 800ad76:	f300 80cd 	bgt.w	800af14 <_dtoa_r+0x8a4>
 800ad7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	f000 80c1 	beq.w	800af04 <_dtoa_r+0x894>
 800ad82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad86:	9c08      	ldr	r4, [sp, #32]
 800ad88:	9e00      	ldr	r6, [sp, #0]
 800ad8a:	9a00      	ldr	r2, [sp, #0]
 800ad8c:	441a      	add	r2, r3
 800ad8e:	9200      	str	r2, [sp, #0]
 800ad90:	9a06      	ldr	r2, [sp, #24]
 800ad92:	2101      	movs	r1, #1
 800ad94:	441a      	add	r2, r3
 800ad96:	4648      	mov	r0, r9
 800ad98:	9206      	str	r2, [sp, #24]
 800ad9a:	f000 fc2d 	bl	800b5f8 <__i2b>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	b166      	cbz	r6, 800adbc <_dtoa_r+0x74c>
 800ada2:	9b06      	ldr	r3, [sp, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd09      	ble.n	800adbc <_dtoa_r+0x74c>
 800ada8:	42b3      	cmp	r3, r6
 800adaa:	9a00      	ldr	r2, [sp, #0]
 800adac:	bfa8      	it	ge
 800adae:	4633      	movge	r3, r6
 800adb0:	1ad2      	subs	r2, r2, r3
 800adb2:	9200      	str	r2, [sp, #0]
 800adb4:	9a06      	ldr	r2, [sp, #24]
 800adb6:	1af6      	subs	r6, r6, r3
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	9306      	str	r3, [sp, #24]
 800adbc:	9b08      	ldr	r3, [sp, #32]
 800adbe:	b30b      	cbz	r3, 800ae04 <_dtoa_r+0x794>
 800adc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80c6 	beq.w	800af54 <_dtoa_r+0x8e4>
 800adc8:	2c00      	cmp	r4, #0
 800adca:	f000 80c0 	beq.w	800af4e <_dtoa_r+0x8de>
 800adce:	4629      	mov	r1, r5
 800add0:	4622      	mov	r2, r4
 800add2:	4648      	mov	r0, r9
 800add4:	f000 fcc8 	bl	800b768 <__pow5mult>
 800add8:	9a02      	ldr	r2, [sp, #8]
 800adda:	4601      	mov	r1, r0
 800addc:	4605      	mov	r5, r0
 800adde:	4648      	mov	r0, r9
 800ade0:	f000 fc20 	bl	800b624 <__multiply>
 800ade4:	9902      	ldr	r1, [sp, #8]
 800ade6:	4680      	mov	r8, r0
 800ade8:	4648      	mov	r0, r9
 800adea:	f000 fb51 	bl	800b490 <_Bfree>
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	1b1b      	subs	r3, r3, r4
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	f000 80b1 	beq.w	800af5a <_dtoa_r+0x8ea>
 800adf8:	9a08      	ldr	r2, [sp, #32]
 800adfa:	4641      	mov	r1, r8
 800adfc:	4648      	mov	r0, r9
 800adfe:	f000 fcb3 	bl	800b768 <__pow5mult>
 800ae02:	9002      	str	r0, [sp, #8]
 800ae04:	2101      	movs	r1, #1
 800ae06:	4648      	mov	r0, r9
 800ae08:	f000 fbf6 	bl	800b5f8 <__i2b>
 800ae0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae0e:	4604      	mov	r4, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 81d8 	beq.w	800b1c6 <_dtoa_r+0xb56>
 800ae16:	461a      	mov	r2, r3
 800ae18:	4601      	mov	r1, r0
 800ae1a:	4648      	mov	r0, r9
 800ae1c:	f000 fca4 	bl	800b768 <__pow5mult>
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	4604      	mov	r4, r0
 800ae26:	f300 809f 	bgt.w	800af68 <_dtoa_r+0x8f8>
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8097 	bne.w	800af60 <_dtoa_r+0x8f0>
 800ae32:	9b05      	ldr	r3, [sp, #20]
 800ae34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f040 8093 	bne.w	800af64 <_dtoa_r+0x8f4>
 800ae3e:	9b05      	ldr	r3, [sp, #20]
 800ae40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae44:	0d1b      	lsrs	r3, r3, #20
 800ae46:	051b      	lsls	r3, r3, #20
 800ae48:	b133      	cbz	r3, 800ae58 <_dtoa_r+0x7e8>
 800ae4a:	9b00      	ldr	r3, [sp, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	9b06      	ldr	r3, [sp, #24]
 800ae52:	3301      	adds	r3, #1
 800ae54:	9306      	str	r3, [sp, #24]
 800ae56:	2301      	movs	r3, #1
 800ae58:	9308      	str	r3, [sp, #32]
 800ae5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 81b8 	beq.w	800b1d2 <_dtoa_r+0xb62>
 800ae62:	6923      	ldr	r3, [r4, #16]
 800ae64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae68:	6918      	ldr	r0, [r3, #16]
 800ae6a:	f000 fb79 	bl	800b560 <__hi0bits>
 800ae6e:	f1c0 0020 	rsb	r0, r0, #32
 800ae72:	9b06      	ldr	r3, [sp, #24]
 800ae74:	4418      	add	r0, r3
 800ae76:	f010 001f 	ands.w	r0, r0, #31
 800ae7a:	f000 8082 	beq.w	800af82 <_dtoa_r+0x912>
 800ae7e:	f1c0 0320 	rsb	r3, r0, #32
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	dd73      	ble.n	800af6e <_dtoa_r+0x8fe>
 800ae86:	9b00      	ldr	r3, [sp, #0]
 800ae88:	f1c0 001c 	rsb	r0, r0, #28
 800ae8c:	4403      	add	r3, r0
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	9b06      	ldr	r3, [sp, #24]
 800ae92:	4403      	add	r3, r0
 800ae94:	4406      	add	r6, r0
 800ae96:	9306      	str	r3, [sp, #24]
 800ae98:	9b00      	ldr	r3, [sp, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd05      	ble.n	800aeaa <_dtoa_r+0x83a>
 800ae9e:	9902      	ldr	r1, [sp, #8]
 800aea0:	461a      	mov	r2, r3
 800aea2:	4648      	mov	r0, r9
 800aea4:	f000 fcba 	bl	800b81c <__lshift>
 800aea8:	9002      	str	r0, [sp, #8]
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dd05      	ble.n	800aebc <_dtoa_r+0x84c>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	f000 fcb1 	bl	800b81c <__lshift>
 800aeba:	4604      	mov	r4, r0
 800aebc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d061      	beq.n	800af86 <_dtoa_r+0x916>
 800aec2:	9802      	ldr	r0, [sp, #8]
 800aec4:	4621      	mov	r1, r4
 800aec6:	f000 fd15 	bl	800b8f4 <__mcmp>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	da5b      	bge.n	800af86 <_dtoa_r+0x916>
 800aece:	2300      	movs	r3, #0
 800aed0:	9902      	ldr	r1, [sp, #8]
 800aed2:	220a      	movs	r2, #10
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fafd 	bl	800b4d4 <__multadd>
 800aeda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aedc:	9002      	str	r0, [sp, #8]
 800aede:	f107 38ff 	add.w	r8, r7, #4294967295
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 8177 	beq.w	800b1d6 <_dtoa_r+0xb66>
 800aee8:	4629      	mov	r1, r5
 800aeea:	2300      	movs	r3, #0
 800aeec:	220a      	movs	r2, #10
 800aeee:	4648      	mov	r0, r9
 800aef0:	f000 faf0 	bl	800b4d4 <__multadd>
 800aef4:	f1bb 0f00 	cmp.w	fp, #0
 800aef8:	4605      	mov	r5, r0
 800aefa:	dc6f      	bgt.n	800afdc <_dtoa_r+0x96c>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	dc49      	bgt.n	800af96 <_dtoa_r+0x926>
 800af02:	e06b      	b.n	800afdc <_dtoa_r+0x96c>
 800af04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af0a:	e73c      	b.n	800ad86 <_dtoa_r+0x716>
 800af0c:	3fe00000 	.word	0x3fe00000
 800af10:	40240000 	.word	0x40240000
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	1e5c      	subs	r4, r3, #1
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	db09      	blt.n	800af32 <_dtoa_r+0x8c2>
 800af1e:	1b1c      	subs	r4, r3, r4
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f6bf af30 	bge.w	800ad88 <_dtoa_r+0x718>
 800af28:	9b00      	ldr	r3, [sp, #0]
 800af2a:	9a03      	ldr	r2, [sp, #12]
 800af2c:	1a9e      	subs	r6, r3, r2
 800af2e:	2300      	movs	r3, #0
 800af30:	e72b      	b.n	800ad8a <_dtoa_r+0x71a>
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af36:	9408      	str	r4, [sp, #32]
 800af38:	1ae3      	subs	r3, r4, r3
 800af3a:	441a      	add	r2, r3
 800af3c:	9e00      	ldr	r6, [sp, #0]
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	920d      	str	r2, [sp, #52]	@ 0x34
 800af42:	2400      	movs	r4, #0
 800af44:	e721      	b.n	800ad8a <_dtoa_r+0x71a>
 800af46:	9c08      	ldr	r4, [sp, #32]
 800af48:	9e00      	ldr	r6, [sp, #0]
 800af4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800af4c:	e728      	b.n	800ada0 <_dtoa_r+0x730>
 800af4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800af52:	e751      	b.n	800adf8 <_dtoa_r+0x788>
 800af54:	9a08      	ldr	r2, [sp, #32]
 800af56:	9902      	ldr	r1, [sp, #8]
 800af58:	e750      	b.n	800adfc <_dtoa_r+0x78c>
 800af5a:	f8cd 8008 	str.w	r8, [sp, #8]
 800af5e:	e751      	b.n	800ae04 <_dtoa_r+0x794>
 800af60:	2300      	movs	r3, #0
 800af62:	e779      	b.n	800ae58 <_dtoa_r+0x7e8>
 800af64:	9b04      	ldr	r3, [sp, #16]
 800af66:	e777      	b.n	800ae58 <_dtoa_r+0x7e8>
 800af68:	2300      	movs	r3, #0
 800af6a:	9308      	str	r3, [sp, #32]
 800af6c:	e779      	b.n	800ae62 <_dtoa_r+0x7f2>
 800af6e:	d093      	beq.n	800ae98 <_dtoa_r+0x828>
 800af70:	9a00      	ldr	r2, [sp, #0]
 800af72:	331c      	adds	r3, #28
 800af74:	441a      	add	r2, r3
 800af76:	9200      	str	r2, [sp, #0]
 800af78:	9a06      	ldr	r2, [sp, #24]
 800af7a:	441a      	add	r2, r3
 800af7c:	441e      	add	r6, r3
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	e78a      	b.n	800ae98 <_dtoa_r+0x828>
 800af82:	4603      	mov	r3, r0
 800af84:	e7f4      	b.n	800af70 <_dtoa_r+0x900>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	46b8      	mov	r8, r7
 800af8c:	dc20      	bgt.n	800afd0 <_dtoa_r+0x960>
 800af8e:	469b      	mov	fp, r3
 800af90:	9b07      	ldr	r3, [sp, #28]
 800af92:	2b02      	cmp	r3, #2
 800af94:	dd1e      	ble.n	800afd4 <_dtoa_r+0x964>
 800af96:	f1bb 0f00 	cmp.w	fp, #0
 800af9a:	f47f adb1 	bne.w	800ab00 <_dtoa_r+0x490>
 800af9e:	4621      	mov	r1, r4
 800afa0:	465b      	mov	r3, fp
 800afa2:	2205      	movs	r2, #5
 800afa4:	4648      	mov	r0, r9
 800afa6:	f000 fa95 	bl	800b4d4 <__multadd>
 800afaa:	4601      	mov	r1, r0
 800afac:	4604      	mov	r4, r0
 800afae:	9802      	ldr	r0, [sp, #8]
 800afb0:	f000 fca0 	bl	800b8f4 <__mcmp>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f77f ada3 	ble.w	800ab00 <_dtoa_r+0x490>
 800afba:	4656      	mov	r6, sl
 800afbc:	2331      	movs	r3, #49	@ 0x31
 800afbe:	f806 3b01 	strb.w	r3, [r6], #1
 800afc2:	f108 0801 	add.w	r8, r8, #1
 800afc6:	e59f      	b.n	800ab08 <_dtoa_r+0x498>
 800afc8:	9c03      	ldr	r4, [sp, #12]
 800afca:	46b8      	mov	r8, r7
 800afcc:	4625      	mov	r5, r4
 800afce:	e7f4      	b.n	800afba <_dtoa_r+0x94a>
 800afd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 8101 	beq.w	800b1de <_dtoa_r+0xb6e>
 800afdc:	2e00      	cmp	r6, #0
 800afde:	dd05      	ble.n	800afec <_dtoa_r+0x97c>
 800afe0:	4629      	mov	r1, r5
 800afe2:	4632      	mov	r2, r6
 800afe4:	4648      	mov	r0, r9
 800afe6:	f000 fc19 	bl	800b81c <__lshift>
 800afea:	4605      	mov	r5, r0
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d05c      	beq.n	800b0ac <_dtoa_r+0xa3c>
 800aff2:	6869      	ldr	r1, [r5, #4]
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 fa0b 	bl	800b410 <_Balloc>
 800affa:	4606      	mov	r6, r0
 800affc:	b928      	cbnz	r0, 800b00a <_dtoa_r+0x99a>
 800affe:	4b82      	ldr	r3, [pc, #520]	@ (800b208 <_dtoa_r+0xb98>)
 800b000:	4602      	mov	r2, r0
 800b002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b006:	f7ff bb4a 	b.w	800a69e <_dtoa_r+0x2e>
 800b00a:	692a      	ldr	r2, [r5, #16]
 800b00c:	3202      	adds	r2, #2
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	f105 010c 	add.w	r1, r5, #12
 800b014:	300c      	adds	r0, #12
 800b016:	f7ff fa94 	bl	800a542 <memcpy>
 800b01a:	2201      	movs	r2, #1
 800b01c:	4631      	mov	r1, r6
 800b01e:	4648      	mov	r0, r9
 800b020:	f000 fbfc 	bl	800b81c <__lshift>
 800b024:	f10a 0301 	add.w	r3, sl, #1
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	eb0a 030b 	add.w	r3, sl, fp
 800b02e:	9308      	str	r3, [sp, #32]
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	462f      	mov	r7, r5
 800b038:	9306      	str	r3, [sp, #24]
 800b03a:	4605      	mov	r5, r0
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	9802      	ldr	r0, [sp, #8]
 800b040:	4621      	mov	r1, r4
 800b042:	f103 3bff 	add.w	fp, r3, #4294967295
 800b046:	f7ff fa8a 	bl	800a55e <quorem>
 800b04a:	4603      	mov	r3, r0
 800b04c:	3330      	adds	r3, #48	@ 0x30
 800b04e:	9003      	str	r0, [sp, #12]
 800b050:	4639      	mov	r1, r7
 800b052:	9802      	ldr	r0, [sp, #8]
 800b054:	9309      	str	r3, [sp, #36]	@ 0x24
 800b056:	f000 fc4d 	bl	800b8f4 <__mcmp>
 800b05a:	462a      	mov	r2, r5
 800b05c:	9004      	str	r0, [sp, #16]
 800b05e:	4621      	mov	r1, r4
 800b060:	4648      	mov	r0, r9
 800b062:	f000 fc63 	bl	800b92c <__mdiff>
 800b066:	68c2      	ldr	r2, [r0, #12]
 800b068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06a:	4606      	mov	r6, r0
 800b06c:	bb02      	cbnz	r2, 800b0b0 <_dtoa_r+0xa40>
 800b06e:	4601      	mov	r1, r0
 800b070:	9802      	ldr	r0, [sp, #8]
 800b072:	f000 fc3f 	bl	800b8f4 <__mcmp>
 800b076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b078:	4602      	mov	r2, r0
 800b07a:	4631      	mov	r1, r6
 800b07c:	4648      	mov	r0, r9
 800b07e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b080:	9309      	str	r3, [sp, #36]	@ 0x24
 800b082:	f000 fa05 	bl	800b490 <_Bfree>
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b08a:	9e00      	ldr	r6, [sp, #0]
 800b08c:	ea42 0103 	orr.w	r1, r2, r3
 800b090:	9b06      	ldr	r3, [sp, #24]
 800b092:	4319      	orrs	r1, r3
 800b094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b096:	d10d      	bne.n	800b0b4 <_dtoa_r+0xa44>
 800b098:	2b39      	cmp	r3, #57	@ 0x39
 800b09a:	d027      	beq.n	800b0ec <_dtoa_r+0xa7c>
 800b09c:	9a04      	ldr	r2, [sp, #16]
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	dd01      	ble.n	800b0a6 <_dtoa_r+0xa36>
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	3331      	adds	r3, #49	@ 0x31
 800b0a6:	f88b 3000 	strb.w	r3, [fp]
 800b0aa:	e52e      	b.n	800ab0a <_dtoa_r+0x49a>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	e7b9      	b.n	800b024 <_dtoa_r+0x9b4>
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	e7e2      	b.n	800b07a <_dtoa_r+0xa0a>
 800b0b4:	9904      	ldr	r1, [sp, #16]
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	db04      	blt.n	800b0c4 <_dtoa_r+0xa54>
 800b0ba:	9807      	ldr	r0, [sp, #28]
 800b0bc:	4301      	orrs	r1, r0
 800b0be:	9806      	ldr	r0, [sp, #24]
 800b0c0:	4301      	orrs	r1, r0
 800b0c2:	d120      	bne.n	800b106 <_dtoa_r+0xa96>
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	ddee      	ble.n	800b0a6 <_dtoa_r+0xa36>
 800b0c8:	9902      	ldr	r1, [sp, #8]
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	4648      	mov	r0, r9
 800b0d0:	f000 fba4 	bl	800b81c <__lshift>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	9002      	str	r0, [sp, #8]
 800b0d8:	f000 fc0c 	bl	800b8f4 <__mcmp>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	dc02      	bgt.n	800b0e8 <_dtoa_r+0xa78>
 800b0e2:	d1e0      	bne.n	800b0a6 <_dtoa_r+0xa36>
 800b0e4:	07da      	lsls	r2, r3, #31
 800b0e6:	d5de      	bpl.n	800b0a6 <_dtoa_r+0xa36>
 800b0e8:	2b39      	cmp	r3, #57	@ 0x39
 800b0ea:	d1da      	bne.n	800b0a2 <_dtoa_r+0xa32>
 800b0ec:	2339      	movs	r3, #57	@ 0x39
 800b0ee:	f88b 3000 	strb.w	r3, [fp]
 800b0f2:	4633      	mov	r3, r6
 800b0f4:	461e      	mov	r6, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0fc:	2a39      	cmp	r2, #57	@ 0x39
 800b0fe:	d04e      	beq.n	800b19e <_dtoa_r+0xb2e>
 800b100:	3201      	adds	r2, #1
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	e501      	b.n	800ab0a <_dtoa_r+0x49a>
 800b106:	2a00      	cmp	r2, #0
 800b108:	dd03      	ble.n	800b112 <_dtoa_r+0xaa2>
 800b10a:	2b39      	cmp	r3, #57	@ 0x39
 800b10c:	d0ee      	beq.n	800b0ec <_dtoa_r+0xa7c>
 800b10e:	3301      	adds	r3, #1
 800b110:	e7c9      	b.n	800b0a6 <_dtoa_r+0xa36>
 800b112:	9a00      	ldr	r2, [sp, #0]
 800b114:	9908      	ldr	r1, [sp, #32]
 800b116:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b11a:	428a      	cmp	r2, r1
 800b11c:	d028      	beq.n	800b170 <_dtoa_r+0xb00>
 800b11e:	9902      	ldr	r1, [sp, #8]
 800b120:	2300      	movs	r3, #0
 800b122:	220a      	movs	r2, #10
 800b124:	4648      	mov	r0, r9
 800b126:	f000 f9d5 	bl	800b4d4 <__multadd>
 800b12a:	42af      	cmp	r7, r5
 800b12c:	9002      	str	r0, [sp, #8]
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	f04f 020a 	mov.w	r2, #10
 800b136:	4639      	mov	r1, r7
 800b138:	4648      	mov	r0, r9
 800b13a:	d107      	bne.n	800b14c <_dtoa_r+0xadc>
 800b13c:	f000 f9ca 	bl	800b4d4 <__multadd>
 800b140:	4607      	mov	r7, r0
 800b142:	4605      	mov	r5, r0
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	3301      	adds	r3, #1
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	e777      	b.n	800b03c <_dtoa_r+0x9cc>
 800b14c:	f000 f9c2 	bl	800b4d4 <__multadd>
 800b150:	4629      	mov	r1, r5
 800b152:	4607      	mov	r7, r0
 800b154:	2300      	movs	r3, #0
 800b156:	220a      	movs	r2, #10
 800b158:	4648      	mov	r0, r9
 800b15a:	f000 f9bb 	bl	800b4d4 <__multadd>
 800b15e:	4605      	mov	r5, r0
 800b160:	e7f0      	b.n	800b144 <_dtoa_r+0xad4>
 800b162:	f1bb 0f00 	cmp.w	fp, #0
 800b166:	bfcc      	ite	gt
 800b168:	465e      	movgt	r6, fp
 800b16a:	2601      	movle	r6, #1
 800b16c:	4456      	add	r6, sl
 800b16e:	2700      	movs	r7, #0
 800b170:	9902      	ldr	r1, [sp, #8]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2201      	movs	r2, #1
 800b176:	4648      	mov	r0, r9
 800b178:	f000 fb50 	bl	800b81c <__lshift>
 800b17c:	4621      	mov	r1, r4
 800b17e:	9002      	str	r0, [sp, #8]
 800b180:	f000 fbb8 	bl	800b8f4 <__mcmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	dcb4      	bgt.n	800b0f2 <_dtoa_r+0xa82>
 800b188:	d102      	bne.n	800b190 <_dtoa_r+0xb20>
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	07db      	lsls	r3, r3, #31
 800b18e:	d4b0      	bmi.n	800b0f2 <_dtoa_r+0xa82>
 800b190:	4633      	mov	r3, r6
 800b192:	461e      	mov	r6, r3
 800b194:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b198:	2a30      	cmp	r2, #48	@ 0x30
 800b19a:	d0fa      	beq.n	800b192 <_dtoa_r+0xb22>
 800b19c:	e4b5      	b.n	800ab0a <_dtoa_r+0x49a>
 800b19e:	459a      	cmp	sl, r3
 800b1a0:	d1a8      	bne.n	800b0f4 <_dtoa_r+0xa84>
 800b1a2:	2331      	movs	r3, #49	@ 0x31
 800b1a4:	f108 0801 	add.w	r8, r8, #1
 800b1a8:	f88a 3000 	strb.w	r3, [sl]
 800b1ac:	e4ad      	b.n	800ab0a <_dtoa_r+0x49a>
 800b1ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b20c <_dtoa_r+0xb9c>
 800b1b4:	b11b      	cbz	r3, 800b1be <_dtoa_r+0xb4e>
 800b1b6:	f10a 0308 	add.w	r3, sl, #8
 800b1ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4650      	mov	r0, sl
 800b1c0:	b017      	add	sp, #92	@ 0x5c
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	9b07      	ldr	r3, [sp, #28]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	f77f ae2e 	ble.w	800ae2a <_dtoa_r+0x7ba>
 800b1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1d0:	9308      	str	r3, [sp, #32]
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	e64d      	b.n	800ae72 <_dtoa_r+0x802>
 800b1d6:	f1bb 0f00 	cmp.w	fp, #0
 800b1da:	f77f aed9 	ble.w	800af90 <_dtoa_r+0x920>
 800b1de:	4656      	mov	r6, sl
 800b1e0:	9802      	ldr	r0, [sp, #8]
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	f7ff f9bb 	bl	800a55e <quorem>
 800b1e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b1ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b1f0:	eba6 020a 	sub.w	r2, r6, sl
 800b1f4:	4593      	cmp	fp, r2
 800b1f6:	ddb4      	ble.n	800b162 <_dtoa_r+0xaf2>
 800b1f8:	9902      	ldr	r1, [sp, #8]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	4648      	mov	r0, r9
 800b200:	f000 f968 	bl	800b4d4 <__multadd>
 800b204:	9002      	str	r0, [sp, #8]
 800b206:	e7eb      	b.n	800b1e0 <_dtoa_r+0xb70>
 800b208:	0800c780 	.word	0x0800c780
 800b20c:	0800c704 	.word	0x0800c704

0800b210 <_free_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4605      	mov	r5, r0
 800b214:	2900      	cmp	r1, #0
 800b216:	d041      	beq.n	800b29c <_free_r+0x8c>
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f0c      	subs	r4, r1, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb8      	it	lt
 800b222:	18e4      	addlt	r4, r4, r3
 800b224:	f000 f8e8 	bl	800b3f8 <__malloc_lock>
 800b228:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a0 <_free_r+0x90>)
 800b22a:	6813      	ldr	r3, [r2, #0]
 800b22c:	b933      	cbnz	r3, 800b23c <_free_r+0x2c>
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	6014      	str	r4, [r2, #0]
 800b232:	4628      	mov	r0, r5
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b238:	f000 b8e4 	b.w	800b404 <__malloc_unlock>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d908      	bls.n	800b252 <_free_r+0x42>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	1821      	adds	r1, r4, r0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf01      	itttt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	1809      	addeq	r1, r1, r0
 800b24e:	6021      	streq	r1, [r4, #0]
 800b250:	e7ed      	b.n	800b22e <_free_r+0x1e>
 800b252:	461a      	mov	r2, r3
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	b10b      	cbz	r3, 800b25c <_free_r+0x4c>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d9fa      	bls.n	800b252 <_free_r+0x42>
 800b25c:	6811      	ldr	r1, [r2, #0]
 800b25e:	1850      	adds	r0, r2, r1
 800b260:	42a0      	cmp	r0, r4
 800b262:	d10b      	bne.n	800b27c <_free_r+0x6c>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	4401      	add	r1, r0
 800b268:	1850      	adds	r0, r2, r1
 800b26a:	4283      	cmp	r3, r0
 800b26c:	6011      	str	r1, [r2, #0]
 800b26e:	d1e0      	bne.n	800b232 <_free_r+0x22>
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	6053      	str	r3, [r2, #4]
 800b276:	4408      	add	r0, r1
 800b278:	6010      	str	r0, [r2, #0]
 800b27a:	e7da      	b.n	800b232 <_free_r+0x22>
 800b27c:	d902      	bls.n	800b284 <_free_r+0x74>
 800b27e:	230c      	movs	r3, #12
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	e7d6      	b.n	800b232 <_free_r+0x22>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	1821      	adds	r1, r4, r0
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf04      	itt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	bf04      	itt	eq
 800b294:	1809      	addeq	r1, r1, r0
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	6054      	str	r4, [r2, #4]
 800b29a:	e7ca      	b.n	800b232 <_free_r+0x22>
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	20001e90 	.word	0x20001e90

0800b2a4 <malloc>:
 800b2a4:	4b02      	ldr	r3, [pc, #8]	@ (800b2b0 <malloc+0xc>)
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	f000 b825 	b.w	800b2f8 <_malloc_r>
 800b2ae:	bf00      	nop
 800b2b0:	2000001c 	.word	0x2000001c

0800b2b4 <sbrk_aligned>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	4e0f      	ldr	r6, [pc, #60]	@ (800b2f4 <sbrk_aligned+0x40>)
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	6831      	ldr	r1, [r6, #0]
 800b2bc:	4605      	mov	r5, r0
 800b2be:	b911      	cbnz	r1, 800b2c6 <sbrk_aligned+0x12>
 800b2c0:	f001 f814 	bl	800c2ec <_sbrk_r>
 800b2c4:	6030      	str	r0, [r6, #0]
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f001 f80f 	bl	800c2ec <_sbrk_r>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d103      	bne.n	800b2da <sbrk_aligned+0x26>
 800b2d2:	f04f 34ff 	mov.w	r4, #4294967295
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	bd70      	pop	{r4, r5, r6, pc}
 800b2da:	1cc4      	adds	r4, r0, #3
 800b2dc:	f024 0403 	bic.w	r4, r4, #3
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d0f8      	beq.n	800b2d6 <sbrk_aligned+0x22>
 800b2e4:	1a21      	subs	r1, r4, r0
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f001 f800 	bl	800c2ec <_sbrk_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d1f2      	bne.n	800b2d6 <sbrk_aligned+0x22>
 800b2f0:	e7ef      	b.n	800b2d2 <sbrk_aligned+0x1e>
 800b2f2:	bf00      	nop
 800b2f4:	20001e8c 	.word	0x20001e8c

0800b2f8 <_malloc_r>:
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	1ccd      	adds	r5, r1, #3
 800b2fe:	f025 0503 	bic.w	r5, r5, #3
 800b302:	3508      	adds	r5, #8
 800b304:	2d0c      	cmp	r5, #12
 800b306:	bf38      	it	cc
 800b308:	250c      	movcc	r5, #12
 800b30a:	2d00      	cmp	r5, #0
 800b30c:	4606      	mov	r6, r0
 800b30e:	db01      	blt.n	800b314 <_malloc_r+0x1c>
 800b310:	42a9      	cmp	r1, r5
 800b312:	d904      	bls.n	800b31e <_malloc_r+0x26>
 800b314:	230c      	movs	r3, #12
 800b316:	6033      	str	r3, [r6, #0]
 800b318:	2000      	movs	r0, #0
 800b31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3f4 <_malloc_r+0xfc>
 800b322:	f000 f869 	bl	800b3f8 <__malloc_lock>
 800b326:	f8d8 3000 	ldr.w	r3, [r8]
 800b32a:	461c      	mov	r4, r3
 800b32c:	bb44      	cbnz	r4, 800b380 <_malloc_r+0x88>
 800b32e:	4629      	mov	r1, r5
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ffbf 	bl	800b2b4 <sbrk_aligned>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	4604      	mov	r4, r0
 800b33a:	d158      	bne.n	800b3ee <_malloc_r+0xf6>
 800b33c:	f8d8 4000 	ldr.w	r4, [r8]
 800b340:	4627      	mov	r7, r4
 800b342:	2f00      	cmp	r7, #0
 800b344:	d143      	bne.n	800b3ce <_malloc_r+0xd6>
 800b346:	2c00      	cmp	r4, #0
 800b348:	d04b      	beq.n	800b3e2 <_malloc_r+0xea>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	4639      	mov	r1, r7
 800b34e:	4630      	mov	r0, r6
 800b350:	eb04 0903 	add.w	r9, r4, r3
 800b354:	f000 ffca 	bl	800c2ec <_sbrk_r>
 800b358:	4581      	cmp	r9, r0
 800b35a:	d142      	bne.n	800b3e2 <_malloc_r+0xea>
 800b35c:	6821      	ldr	r1, [r4, #0]
 800b35e:	1a6d      	subs	r5, r5, r1
 800b360:	4629      	mov	r1, r5
 800b362:	4630      	mov	r0, r6
 800b364:	f7ff ffa6 	bl	800b2b4 <sbrk_aligned>
 800b368:	3001      	adds	r0, #1
 800b36a:	d03a      	beq.n	800b3e2 <_malloc_r+0xea>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	442b      	add	r3, r5
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	f8d8 3000 	ldr.w	r3, [r8]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	bb62      	cbnz	r2, 800b3d4 <_malloc_r+0xdc>
 800b37a:	f8c8 7000 	str.w	r7, [r8]
 800b37e:	e00f      	b.n	800b3a0 <_malloc_r+0xa8>
 800b380:	6822      	ldr	r2, [r4, #0]
 800b382:	1b52      	subs	r2, r2, r5
 800b384:	d420      	bmi.n	800b3c8 <_malloc_r+0xd0>
 800b386:	2a0b      	cmp	r2, #11
 800b388:	d917      	bls.n	800b3ba <_malloc_r+0xc2>
 800b38a:	1961      	adds	r1, r4, r5
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	6025      	str	r5, [r4, #0]
 800b390:	bf18      	it	ne
 800b392:	6059      	strne	r1, [r3, #4]
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	bf08      	it	eq
 800b398:	f8c8 1000 	streq.w	r1, [r8]
 800b39c:	5162      	str	r2, [r4, r5]
 800b39e:	604b      	str	r3, [r1, #4]
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 f82f 	bl	800b404 <__malloc_unlock>
 800b3a6:	f104 000b 	add.w	r0, r4, #11
 800b3aa:	1d23      	adds	r3, r4, #4
 800b3ac:	f020 0007 	bic.w	r0, r0, #7
 800b3b0:	1ac2      	subs	r2, r0, r3
 800b3b2:	bf1c      	itt	ne
 800b3b4:	1a1b      	subne	r3, r3, r0
 800b3b6:	50a3      	strne	r3, [r4, r2]
 800b3b8:	e7af      	b.n	800b31a <_malloc_r+0x22>
 800b3ba:	6862      	ldr	r2, [r4, #4]
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	bf0c      	ite	eq
 800b3c0:	f8c8 2000 	streq.w	r2, [r8]
 800b3c4:	605a      	strne	r2, [r3, #4]
 800b3c6:	e7eb      	b.n	800b3a0 <_malloc_r+0xa8>
 800b3c8:	4623      	mov	r3, r4
 800b3ca:	6864      	ldr	r4, [r4, #4]
 800b3cc:	e7ae      	b.n	800b32c <_malloc_r+0x34>
 800b3ce:	463c      	mov	r4, r7
 800b3d0:	687f      	ldr	r7, [r7, #4]
 800b3d2:	e7b6      	b.n	800b342 <_malloc_r+0x4a>
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d1fb      	bne.n	800b3d4 <_malloc_r+0xdc>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6053      	str	r3, [r2, #4]
 800b3e0:	e7de      	b.n	800b3a0 <_malloc_r+0xa8>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f000 f80c 	bl	800b404 <__malloc_unlock>
 800b3ec:	e794      	b.n	800b318 <_malloc_r+0x20>
 800b3ee:	6005      	str	r5, [r0, #0]
 800b3f0:	e7d6      	b.n	800b3a0 <_malloc_r+0xa8>
 800b3f2:	bf00      	nop
 800b3f4:	20001e90 	.word	0x20001e90

0800b3f8 <__malloc_lock>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	@ (800b400 <__malloc_lock+0x8>)
 800b3fa:	f7ff b8a0 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800b3fe:	bf00      	nop
 800b400:	20001e88 	.word	0x20001e88

0800b404 <__malloc_unlock>:
 800b404:	4801      	ldr	r0, [pc, #4]	@ (800b40c <__malloc_unlock+0x8>)
 800b406:	f7ff b89b 	b.w	800a540 <__retarget_lock_release_recursive>
 800b40a:	bf00      	nop
 800b40c:	20001e88 	.word	0x20001e88

0800b410 <_Balloc>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	69c6      	ldr	r6, [r0, #28]
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	b976      	cbnz	r6, 800b438 <_Balloc+0x28>
 800b41a:	2010      	movs	r0, #16
 800b41c:	f7ff ff42 	bl	800b2a4 <malloc>
 800b420:	4602      	mov	r2, r0
 800b422:	61e0      	str	r0, [r4, #28]
 800b424:	b920      	cbnz	r0, 800b430 <_Balloc+0x20>
 800b426:	4b18      	ldr	r3, [pc, #96]	@ (800b488 <_Balloc+0x78>)
 800b428:	4818      	ldr	r0, [pc, #96]	@ (800b48c <_Balloc+0x7c>)
 800b42a:	216b      	movs	r1, #107	@ 0x6b
 800b42c:	f000 ff6e 	bl	800c30c <__assert_func>
 800b430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b434:	6006      	str	r6, [r0, #0]
 800b436:	60c6      	str	r6, [r0, #12]
 800b438:	69e6      	ldr	r6, [r4, #28]
 800b43a:	68f3      	ldr	r3, [r6, #12]
 800b43c:	b183      	cbz	r3, 800b460 <_Balloc+0x50>
 800b43e:	69e3      	ldr	r3, [r4, #28]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b446:	b9b8      	cbnz	r0, 800b478 <_Balloc+0x68>
 800b448:	2101      	movs	r1, #1
 800b44a:	fa01 f605 	lsl.w	r6, r1, r5
 800b44e:	1d72      	adds	r2, r6, #5
 800b450:	0092      	lsls	r2, r2, #2
 800b452:	4620      	mov	r0, r4
 800b454:	f000 ff78 	bl	800c348 <_calloc_r>
 800b458:	b160      	cbz	r0, 800b474 <_Balloc+0x64>
 800b45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b45e:	e00e      	b.n	800b47e <_Balloc+0x6e>
 800b460:	2221      	movs	r2, #33	@ 0x21
 800b462:	2104      	movs	r1, #4
 800b464:	4620      	mov	r0, r4
 800b466:	f000 ff6f 	bl	800c348 <_calloc_r>
 800b46a:	69e3      	ldr	r3, [r4, #28]
 800b46c:	60f0      	str	r0, [r6, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e4      	bne.n	800b43e <_Balloc+0x2e>
 800b474:	2000      	movs	r0, #0
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	6802      	ldr	r2, [r0, #0]
 800b47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b47e:	2300      	movs	r3, #0
 800b480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b484:	e7f7      	b.n	800b476 <_Balloc+0x66>
 800b486:	bf00      	nop
 800b488:	0800c711 	.word	0x0800c711
 800b48c:	0800c791 	.word	0x0800c791

0800b490 <_Bfree>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	69c6      	ldr	r6, [r0, #28]
 800b494:	4605      	mov	r5, r0
 800b496:	460c      	mov	r4, r1
 800b498:	b976      	cbnz	r6, 800b4b8 <_Bfree+0x28>
 800b49a:	2010      	movs	r0, #16
 800b49c:	f7ff ff02 	bl	800b2a4 <malloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	61e8      	str	r0, [r5, #28]
 800b4a4:	b920      	cbnz	r0, 800b4b0 <_Bfree+0x20>
 800b4a6:	4b09      	ldr	r3, [pc, #36]	@ (800b4cc <_Bfree+0x3c>)
 800b4a8:	4809      	ldr	r0, [pc, #36]	@ (800b4d0 <_Bfree+0x40>)
 800b4aa:	218f      	movs	r1, #143	@ 0x8f
 800b4ac:	f000 ff2e 	bl	800c30c <__assert_func>
 800b4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b4:	6006      	str	r6, [r0, #0]
 800b4b6:	60c6      	str	r6, [r0, #12]
 800b4b8:	b13c      	cbz	r4, 800b4ca <_Bfree+0x3a>
 800b4ba:	69eb      	ldr	r3, [r5, #28]
 800b4bc:	6862      	ldr	r2, [r4, #4]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4c4:	6021      	str	r1, [r4, #0]
 800b4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	0800c711 	.word	0x0800c711
 800b4d0:	0800c791 	.word	0x0800c791

0800b4d4 <__multadd>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	690d      	ldr	r5, [r1, #16]
 800b4da:	4607      	mov	r7, r0
 800b4dc:	460c      	mov	r4, r1
 800b4de:	461e      	mov	r6, r3
 800b4e0:	f101 0c14 	add.w	ip, r1, #20
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b4ea:	b299      	uxth	r1, r3
 800b4ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b4f0:	0c1e      	lsrs	r6, r3, #16
 800b4f2:	0c0b      	lsrs	r3, r1, #16
 800b4f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b4f8:	b289      	uxth	r1, r1
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b500:	4285      	cmp	r5, r0
 800b502:	f84c 1b04 	str.w	r1, [ip], #4
 800b506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b50a:	dcec      	bgt.n	800b4e6 <__multadd+0x12>
 800b50c:	b30e      	cbz	r6, 800b552 <__multadd+0x7e>
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	42ab      	cmp	r3, r5
 800b512:	dc19      	bgt.n	800b548 <__multadd+0x74>
 800b514:	6861      	ldr	r1, [r4, #4]
 800b516:	4638      	mov	r0, r7
 800b518:	3101      	adds	r1, #1
 800b51a:	f7ff ff79 	bl	800b410 <_Balloc>
 800b51e:	4680      	mov	r8, r0
 800b520:	b928      	cbnz	r0, 800b52e <__multadd+0x5a>
 800b522:	4602      	mov	r2, r0
 800b524:	4b0c      	ldr	r3, [pc, #48]	@ (800b558 <__multadd+0x84>)
 800b526:	480d      	ldr	r0, [pc, #52]	@ (800b55c <__multadd+0x88>)
 800b528:	21ba      	movs	r1, #186	@ 0xba
 800b52a:	f000 feef 	bl	800c30c <__assert_func>
 800b52e:	6922      	ldr	r2, [r4, #16]
 800b530:	3202      	adds	r2, #2
 800b532:	f104 010c 	add.w	r1, r4, #12
 800b536:	0092      	lsls	r2, r2, #2
 800b538:	300c      	adds	r0, #12
 800b53a:	f7ff f802 	bl	800a542 <memcpy>
 800b53e:	4621      	mov	r1, r4
 800b540:	4638      	mov	r0, r7
 800b542:	f7ff ffa5 	bl	800b490 <_Bfree>
 800b546:	4644      	mov	r4, r8
 800b548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b54c:	3501      	adds	r5, #1
 800b54e:	615e      	str	r6, [r3, #20]
 800b550:	6125      	str	r5, [r4, #16]
 800b552:	4620      	mov	r0, r4
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	0800c780 	.word	0x0800c780
 800b55c:	0800c791 	.word	0x0800c791

0800b560 <__hi0bits>:
 800b560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b564:	4603      	mov	r3, r0
 800b566:	bf36      	itet	cc
 800b568:	0403      	lslcc	r3, r0, #16
 800b56a:	2000      	movcs	r0, #0
 800b56c:	2010      	movcc	r0, #16
 800b56e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b572:	bf3c      	itt	cc
 800b574:	021b      	lslcc	r3, r3, #8
 800b576:	3008      	addcc	r0, #8
 800b578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b57c:	bf3c      	itt	cc
 800b57e:	011b      	lslcc	r3, r3, #4
 800b580:	3004      	addcc	r0, #4
 800b582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b586:	bf3c      	itt	cc
 800b588:	009b      	lslcc	r3, r3, #2
 800b58a:	3002      	addcc	r0, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	db05      	blt.n	800b59c <__hi0bits+0x3c>
 800b590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b594:	f100 0001 	add.w	r0, r0, #1
 800b598:	bf08      	it	eq
 800b59a:	2020      	moveq	r0, #32
 800b59c:	4770      	bx	lr

0800b59e <__lo0bits>:
 800b59e:	6803      	ldr	r3, [r0, #0]
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	f013 0007 	ands.w	r0, r3, #7
 800b5a6:	d00b      	beq.n	800b5c0 <__lo0bits+0x22>
 800b5a8:	07d9      	lsls	r1, r3, #31
 800b5aa:	d421      	bmi.n	800b5f0 <__lo0bits+0x52>
 800b5ac:	0798      	lsls	r0, r3, #30
 800b5ae:	bf49      	itett	mi
 800b5b0:	085b      	lsrmi	r3, r3, #1
 800b5b2:	089b      	lsrpl	r3, r3, #2
 800b5b4:	2001      	movmi	r0, #1
 800b5b6:	6013      	strmi	r3, [r2, #0]
 800b5b8:	bf5c      	itt	pl
 800b5ba:	6013      	strpl	r3, [r2, #0]
 800b5bc:	2002      	movpl	r0, #2
 800b5be:	4770      	bx	lr
 800b5c0:	b299      	uxth	r1, r3
 800b5c2:	b909      	cbnz	r1, 800b5c8 <__lo0bits+0x2a>
 800b5c4:	0c1b      	lsrs	r3, r3, #16
 800b5c6:	2010      	movs	r0, #16
 800b5c8:	b2d9      	uxtb	r1, r3
 800b5ca:	b909      	cbnz	r1, 800b5d0 <__lo0bits+0x32>
 800b5cc:	3008      	adds	r0, #8
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	0719      	lsls	r1, r3, #28
 800b5d2:	bf04      	itt	eq
 800b5d4:	091b      	lsreq	r3, r3, #4
 800b5d6:	3004      	addeq	r0, #4
 800b5d8:	0799      	lsls	r1, r3, #30
 800b5da:	bf04      	itt	eq
 800b5dc:	089b      	lsreq	r3, r3, #2
 800b5de:	3002      	addeq	r0, #2
 800b5e0:	07d9      	lsls	r1, r3, #31
 800b5e2:	d403      	bmi.n	800b5ec <__lo0bits+0x4e>
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	f100 0001 	add.w	r0, r0, #1
 800b5ea:	d003      	beq.n	800b5f4 <__lo0bits+0x56>
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	4770      	bx	lr
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	4770      	bx	lr
 800b5f4:	2020      	movs	r0, #32
 800b5f6:	4770      	bx	lr

0800b5f8 <__i2b>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	f7ff ff07 	bl	800b410 <_Balloc>
 800b602:	4602      	mov	r2, r0
 800b604:	b928      	cbnz	r0, 800b612 <__i2b+0x1a>
 800b606:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <__i2b+0x24>)
 800b608:	4805      	ldr	r0, [pc, #20]	@ (800b620 <__i2b+0x28>)
 800b60a:	f240 1145 	movw	r1, #325	@ 0x145
 800b60e:	f000 fe7d 	bl	800c30c <__assert_func>
 800b612:	2301      	movs	r3, #1
 800b614:	6144      	str	r4, [r0, #20]
 800b616:	6103      	str	r3, [r0, #16]
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	0800c780 	.word	0x0800c780
 800b620:	0800c791 	.word	0x0800c791

0800b624 <__multiply>:
 800b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	4617      	mov	r7, r2
 800b62a:	690a      	ldr	r2, [r1, #16]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	429a      	cmp	r2, r3
 800b630:	bfa8      	it	ge
 800b632:	463b      	movge	r3, r7
 800b634:	4689      	mov	r9, r1
 800b636:	bfa4      	itt	ge
 800b638:	460f      	movge	r7, r1
 800b63a:	4699      	movge	r9, r3
 800b63c:	693d      	ldr	r5, [r7, #16]
 800b63e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	eb05 060a 	add.w	r6, r5, sl
 800b64a:	42b3      	cmp	r3, r6
 800b64c:	b085      	sub	sp, #20
 800b64e:	bfb8      	it	lt
 800b650:	3101      	addlt	r1, #1
 800b652:	f7ff fedd 	bl	800b410 <_Balloc>
 800b656:	b930      	cbnz	r0, 800b666 <__multiply+0x42>
 800b658:	4602      	mov	r2, r0
 800b65a:	4b41      	ldr	r3, [pc, #260]	@ (800b760 <__multiply+0x13c>)
 800b65c:	4841      	ldr	r0, [pc, #260]	@ (800b764 <__multiply+0x140>)
 800b65e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b662:	f000 fe53 	bl	800c30c <__assert_func>
 800b666:	f100 0414 	add.w	r4, r0, #20
 800b66a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b66e:	4623      	mov	r3, r4
 800b670:	2200      	movs	r2, #0
 800b672:	4573      	cmp	r3, lr
 800b674:	d320      	bcc.n	800b6b8 <__multiply+0x94>
 800b676:	f107 0814 	add.w	r8, r7, #20
 800b67a:	f109 0114 	add.w	r1, r9, #20
 800b67e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b682:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b686:	9302      	str	r3, [sp, #8]
 800b688:	1beb      	subs	r3, r5, r7
 800b68a:	3b15      	subs	r3, #21
 800b68c:	f023 0303 	bic.w	r3, r3, #3
 800b690:	3304      	adds	r3, #4
 800b692:	3715      	adds	r7, #21
 800b694:	42bd      	cmp	r5, r7
 800b696:	bf38      	it	cc
 800b698:	2304      	movcc	r3, #4
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	9b02      	ldr	r3, [sp, #8]
 800b69e:	9103      	str	r1, [sp, #12]
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	d80c      	bhi.n	800b6be <__multiply+0x9a>
 800b6a4:	2e00      	cmp	r6, #0
 800b6a6:	dd03      	ble.n	800b6b0 <__multiply+0x8c>
 800b6a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d055      	beq.n	800b75c <__multiply+0x138>
 800b6b0:	6106      	str	r6, [r0, #16]
 800b6b2:	b005      	add	sp, #20
 800b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b8:	f843 2b04 	str.w	r2, [r3], #4
 800b6bc:	e7d9      	b.n	800b672 <__multiply+0x4e>
 800b6be:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	d01f      	beq.n	800b708 <__multiply+0xe4>
 800b6c8:	46c4      	mov	ip, r8
 800b6ca:	46a1      	mov	r9, r4
 800b6cc:	2700      	movs	r7, #0
 800b6ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6d2:	f8d9 3000 	ldr.w	r3, [r9]
 800b6d6:	fa1f fb82 	uxth.w	fp, r2
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6e0:	443b      	add	r3, r7
 800b6e2:	f8d9 7000 	ldr.w	r7, [r9]
 800b6e6:	0c12      	lsrs	r2, r2, #16
 800b6e8:	0c3f      	lsrs	r7, r7, #16
 800b6ea:	fb0a 7202 	mla	r2, sl, r2, r7
 800b6ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6f8:	4565      	cmp	r5, ip
 800b6fa:	f849 3b04 	str.w	r3, [r9], #4
 800b6fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b702:	d8e4      	bhi.n	800b6ce <__multiply+0xaa>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	50e7      	str	r7, [r4, r3]
 800b708:	9b03      	ldr	r3, [sp, #12]
 800b70a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b70e:	3104      	adds	r1, #4
 800b710:	f1b9 0f00 	cmp.w	r9, #0
 800b714:	d020      	beq.n	800b758 <__multiply+0x134>
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	4647      	mov	r7, r8
 800b71a:	46a4      	mov	ip, r4
 800b71c:	f04f 0a00 	mov.w	sl, #0
 800b720:	f8b7 b000 	ldrh.w	fp, [r7]
 800b724:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b728:	fb09 220b 	mla	r2, r9, fp, r2
 800b72c:	4452      	add	r2, sl
 800b72e:	b29b      	uxth	r3, r3
 800b730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b734:	f84c 3b04 	str.w	r3, [ip], #4
 800b738:	f857 3b04 	ldr.w	r3, [r7], #4
 800b73c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b740:	f8bc 3000 	ldrh.w	r3, [ip]
 800b744:	fb09 330a 	mla	r3, r9, sl, r3
 800b748:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b74c:	42bd      	cmp	r5, r7
 800b74e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b752:	d8e5      	bhi.n	800b720 <__multiply+0xfc>
 800b754:	9a01      	ldr	r2, [sp, #4]
 800b756:	50a3      	str	r3, [r4, r2]
 800b758:	3404      	adds	r4, #4
 800b75a:	e79f      	b.n	800b69c <__multiply+0x78>
 800b75c:	3e01      	subs	r6, #1
 800b75e:	e7a1      	b.n	800b6a4 <__multiply+0x80>
 800b760:	0800c780 	.word	0x0800c780
 800b764:	0800c791 	.word	0x0800c791

0800b768 <__pow5mult>:
 800b768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	4615      	mov	r5, r2
 800b76e:	f012 0203 	ands.w	r2, r2, #3
 800b772:	4607      	mov	r7, r0
 800b774:	460e      	mov	r6, r1
 800b776:	d007      	beq.n	800b788 <__pow5mult+0x20>
 800b778:	4c25      	ldr	r4, [pc, #148]	@ (800b810 <__pow5mult+0xa8>)
 800b77a:	3a01      	subs	r2, #1
 800b77c:	2300      	movs	r3, #0
 800b77e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b782:	f7ff fea7 	bl	800b4d4 <__multadd>
 800b786:	4606      	mov	r6, r0
 800b788:	10ad      	asrs	r5, r5, #2
 800b78a:	d03d      	beq.n	800b808 <__pow5mult+0xa0>
 800b78c:	69fc      	ldr	r4, [r7, #28]
 800b78e:	b97c      	cbnz	r4, 800b7b0 <__pow5mult+0x48>
 800b790:	2010      	movs	r0, #16
 800b792:	f7ff fd87 	bl	800b2a4 <malloc>
 800b796:	4602      	mov	r2, r0
 800b798:	61f8      	str	r0, [r7, #28]
 800b79a:	b928      	cbnz	r0, 800b7a8 <__pow5mult+0x40>
 800b79c:	4b1d      	ldr	r3, [pc, #116]	@ (800b814 <__pow5mult+0xac>)
 800b79e:	481e      	ldr	r0, [pc, #120]	@ (800b818 <__pow5mult+0xb0>)
 800b7a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7a4:	f000 fdb2 	bl	800c30c <__assert_func>
 800b7a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7ac:	6004      	str	r4, [r0, #0]
 800b7ae:	60c4      	str	r4, [r0, #12]
 800b7b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7b8:	b94c      	cbnz	r4, 800b7ce <__pow5mult+0x66>
 800b7ba:	f240 2171 	movw	r1, #625	@ 0x271
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f7ff ff1a 	bl	800b5f8 <__i2b>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	f04f 0900 	mov.w	r9, #0
 800b7d2:	07eb      	lsls	r3, r5, #31
 800b7d4:	d50a      	bpl.n	800b7ec <__pow5mult+0x84>
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4638      	mov	r0, r7
 800b7dc:	f7ff ff22 	bl	800b624 <__multiply>
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4680      	mov	r8, r0
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7ff fe53 	bl	800b490 <_Bfree>
 800b7ea:	4646      	mov	r6, r8
 800b7ec:	106d      	asrs	r5, r5, #1
 800b7ee:	d00b      	beq.n	800b808 <__pow5mult+0xa0>
 800b7f0:	6820      	ldr	r0, [r4, #0]
 800b7f2:	b938      	cbnz	r0, 800b804 <__pow5mult+0x9c>
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f7ff ff13 	bl	800b624 <__multiply>
 800b7fe:	6020      	str	r0, [r4, #0]
 800b800:	f8c0 9000 	str.w	r9, [r0]
 800b804:	4604      	mov	r4, r0
 800b806:	e7e4      	b.n	800b7d2 <__pow5mult+0x6a>
 800b808:	4630      	mov	r0, r6
 800b80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80e:	bf00      	nop
 800b810:	0800c844 	.word	0x0800c844
 800b814:	0800c711 	.word	0x0800c711
 800b818:	0800c791 	.word	0x0800c791

0800b81c <__lshift>:
 800b81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	460c      	mov	r4, r1
 800b822:	6849      	ldr	r1, [r1, #4]
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	4607      	mov	r7, r0
 800b82e:	4691      	mov	r9, r2
 800b830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b834:	f108 0601 	add.w	r6, r8, #1
 800b838:	42b3      	cmp	r3, r6
 800b83a:	db0b      	blt.n	800b854 <__lshift+0x38>
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff fde7 	bl	800b410 <_Balloc>
 800b842:	4605      	mov	r5, r0
 800b844:	b948      	cbnz	r0, 800b85a <__lshift+0x3e>
 800b846:	4602      	mov	r2, r0
 800b848:	4b28      	ldr	r3, [pc, #160]	@ (800b8ec <__lshift+0xd0>)
 800b84a:	4829      	ldr	r0, [pc, #164]	@ (800b8f0 <__lshift+0xd4>)
 800b84c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b850:	f000 fd5c 	bl	800c30c <__assert_func>
 800b854:	3101      	adds	r1, #1
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	e7ee      	b.n	800b838 <__lshift+0x1c>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f100 0114 	add.w	r1, r0, #20
 800b860:	f100 0210 	add.w	r2, r0, #16
 800b864:	4618      	mov	r0, r3
 800b866:	4553      	cmp	r3, sl
 800b868:	db33      	blt.n	800b8d2 <__lshift+0xb6>
 800b86a:	6920      	ldr	r0, [r4, #16]
 800b86c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b870:	f104 0314 	add.w	r3, r4, #20
 800b874:	f019 091f 	ands.w	r9, r9, #31
 800b878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b87c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b880:	d02b      	beq.n	800b8da <__lshift+0xbe>
 800b882:	f1c9 0e20 	rsb	lr, r9, #32
 800b886:	468a      	mov	sl, r1
 800b888:	2200      	movs	r2, #0
 800b88a:	6818      	ldr	r0, [r3, #0]
 800b88c:	fa00 f009 	lsl.w	r0, r0, r9
 800b890:	4310      	orrs	r0, r2
 800b892:	f84a 0b04 	str.w	r0, [sl], #4
 800b896:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89a:	459c      	cmp	ip, r3
 800b89c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a0:	d8f3      	bhi.n	800b88a <__lshift+0x6e>
 800b8a2:	ebac 0304 	sub.w	r3, ip, r4
 800b8a6:	3b15      	subs	r3, #21
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	f104 0015 	add.w	r0, r4, #21
 800b8b2:	4560      	cmp	r0, ip
 800b8b4:	bf88      	it	hi
 800b8b6:	2304      	movhi	r3, #4
 800b8b8:	50ca      	str	r2, [r1, r3]
 800b8ba:	b10a      	cbz	r2, 800b8c0 <__lshift+0xa4>
 800b8bc:	f108 0602 	add.w	r6, r8, #2
 800b8c0:	3e01      	subs	r6, #1
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	612e      	str	r6, [r5, #16]
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	f7ff fde2 	bl	800b490 <_Bfree>
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	e7c5      	b.n	800b866 <__lshift+0x4a>
 800b8da:	3904      	subs	r1, #4
 800b8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8e4:	459c      	cmp	ip, r3
 800b8e6:	d8f9      	bhi.n	800b8dc <__lshift+0xc0>
 800b8e8:	e7ea      	b.n	800b8c0 <__lshift+0xa4>
 800b8ea:	bf00      	nop
 800b8ec:	0800c780 	.word	0x0800c780
 800b8f0:	0800c791 	.word	0x0800c791

0800b8f4 <__mcmp>:
 800b8f4:	690a      	ldr	r2, [r1, #16]
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	6900      	ldr	r0, [r0, #16]
 800b8fa:	1a80      	subs	r0, r0, r2
 800b8fc:	b530      	push	{r4, r5, lr}
 800b8fe:	d10e      	bne.n	800b91e <__mcmp+0x2a>
 800b900:	3314      	adds	r3, #20
 800b902:	3114      	adds	r1, #20
 800b904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b90c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b914:	4295      	cmp	r5, r2
 800b916:	d003      	beq.n	800b920 <__mcmp+0x2c>
 800b918:	d205      	bcs.n	800b926 <__mcmp+0x32>
 800b91a:	f04f 30ff 	mov.w	r0, #4294967295
 800b91e:	bd30      	pop	{r4, r5, pc}
 800b920:	42a3      	cmp	r3, r4
 800b922:	d3f3      	bcc.n	800b90c <__mcmp+0x18>
 800b924:	e7fb      	b.n	800b91e <__mcmp+0x2a>
 800b926:	2001      	movs	r0, #1
 800b928:	e7f9      	b.n	800b91e <__mcmp+0x2a>
	...

0800b92c <__mdiff>:
 800b92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	4689      	mov	r9, r1
 800b932:	4606      	mov	r6, r0
 800b934:	4611      	mov	r1, r2
 800b936:	4648      	mov	r0, r9
 800b938:	4614      	mov	r4, r2
 800b93a:	f7ff ffdb 	bl	800b8f4 <__mcmp>
 800b93e:	1e05      	subs	r5, r0, #0
 800b940:	d112      	bne.n	800b968 <__mdiff+0x3c>
 800b942:	4629      	mov	r1, r5
 800b944:	4630      	mov	r0, r6
 800b946:	f7ff fd63 	bl	800b410 <_Balloc>
 800b94a:	4602      	mov	r2, r0
 800b94c:	b928      	cbnz	r0, 800b95a <__mdiff+0x2e>
 800b94e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba4c <__mdiff+0x120>)
 800b950:	f240 2137 	movw	r1, #567	@ 0x237
 800b954:	483e      	ldr	r0, [pc, #248]	@ (800ba50 <__mdiff+0x124>)
 800b956:	f000 fcd9 	bl	800c30c <__assert_func>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b960:	4610      	mov	r0, r2
 800b962:	b003      	add	sp, #12
 800b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	bfbc      	itt	lt
 800b96a:	464b      	movlt	r3, r9
 800b96c:	46a1      	movlt	r9, r4
 800b96e:	4630      	mov	r0, r6
 800b970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b974:	bfba      	itte	lt
 800b976:	461c      	movlt	r4, r3
 800b978:	2501      	movlt	r5, #1
 800b97a:	2500      	movge	r5, #0
 800b97c:	f7ff fd48 	bl	800b410 <_Balloc>
 800b980:	4602      	mov	r2, r0
 800b982:	b918      	cbnz	r0, 800b98c <__mdiff+0x60>
 800b984:	4b31      	ldr	r3, [pc, #196]	@ (800ba4c <__mdiff+0x120>)
 800b986:	f240 2145 	movw	r1, #581	@ 0x245
 800b98a:	e7e3      	b.n	800b954 <__mdiff+0x28>
 800b98c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b990:	6926      	ldr	r6, [r4, #16]
 800b992:	60c5      	str	r5, [r0, #12]
 800b994:	f109 0310 	add.w	r3, r9, #16
 800b998:	f109 0514 	add.w	r5, r9, #20
 800b99c:	f104 0e14 	add.w	lr, r4, #20
 800b9a0:	f100 0b14 	add.w	fp, r0, #20
 800b9a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	46d9      	mov	r9, fp
 800b9b0:	f04f 0c00 	mov.w	ip, #0
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	fa1f f38a 	uxth.w	r3, sl
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	b283      	uxth	r3, r0
 800b9c8:	1acb      	subs	r3, r1, r3
 800b9ca:	0c00      	lsrs	r0, r0, #16
 800b9cc:	4463      	add	r3, ip
 800b9ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9dc:	4576      	cmp	r6, lr
 800b9de:	f849 3b04 	str.w	r3, [r9], #4
 800b9e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9e6:	d8e5      	bhi.n	800b9b4 <__mdiff+0x88>
 800b9e8:	1b33      	subs	r3, r6, r4
 800b9ea:	3b15      	subs	r3, #21
 800b9ec:	f023 0303 	bic.w	r3, r3, #3
 800b9f0:	3415      	adds	r4, #21
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	42a6      	cmp	r6, r4
 800b9f6:	bf38      	it	cc
 800b9f8:	2304      	movcc	r3, #4
 800b9fa:	441d      	add	r5, r3
 800b9fc:	445b      	add	r3, fp
 800b9fe:	461e      	mov	r6, r3
 800ba00:	462c      	mov	r4, r5
 800ba02:	4544      	cmp	r4, r8
 800ba04:	d30e      	bcc.n	800ba24 <__mdiff+0xf8>
 800ba06:	f108 0103 	add.w	r1, r8, #3
 800ba0a:	1b49      	subs	r1, r1, r5
 800ba0c:	f021 0103 	bic.w	r1, r1, #3
 800ba10:	3d03      	subs	r5, #3
 800ba12:	45a8      	cmp	r8, r5
 800ba14:	bf38      	it	cc
 800ba16:	2100      	movcc	r1, #0
 800ba18:	440b      	add	r3, r1
 800ba1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba1e:	b191      	cbz	r1, 800ba46 <__mdiff+0x11a>
 800ba20:	6117      	str	r7, [r2, #16]
 800ba22:	e79d      	b.n	800b960 <__mdiff+0x34>
 800ba24:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba28:	46e6      	mov	lr, ip
 800ba2a:	0c08      	lsrs	r0, r1, #16
 800ba2c:	fa1c fc81 	uxtah	ip, ip, r1
 800ba30:	4471      	add	r1, lr
 800ba32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba36:	b289      	uxth	r1, r1
 800ba38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba3c:	f846 1b04 	str.w	r1, [r6], #4
 800ba40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba44:	e7dd      	b.n	800ba02 <__mdiff+0xd6>
 800ba46:	3f01      	subs	r7, #1
 800ba48:	e7e7      	b.n	800ba1a <__mdiff+0xee>
 800ba4a:	bf00      	nop
 800ba4c:	0800c780 	.word	0x0800c780
 800ba50:	0800c791 	.word	0x0800c791

0800ba54 <__d2b>:
 800ba54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	460f      	mov	r7, r1
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	ec59 8b10 	vmov	r8, r9, d0
 800ba60:	4616      	mov	r6, r2
 800ba62:	f7ff fcd5 	bl	800b410 <_Balloc>
 800ba66:	4604      	mov	r4, r0
 800ba68:	b930      	cbnz	r0, 800ba78 <__d2b+0x24>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b23      	ldr	r3, [pc, #140]	@ (800bafc <__d2b+0xa8>)
 800ba6e:	4824      	ldr	r0, [pc, #144]	@ (800bb00 <__d2b+0xac>)
 800ba70:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba74:	f000 fc4a 	bl	800c30c <__assert_func>
 800ba78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba80:	b10d      	cbz	r5, 800ba86 <__d2b+0x32>
 800ba82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	f1b8 0300 	subs.w	r3, r8, #0
 800ba8c:	d023      	beq.n	800bad6 <__d2b+0x82>
 800ba8e:	4668      	mov	r0, sp
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	f7ff fd84 	bl	800b59e <__lo0bits>
 800ba96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba9a:	b1d0      	cbz	r0, 800bad2 <__d2b+0x7e>
 800ba9c:	f1c0 0320 	rsb	r3, r0, #32
 800baa0:	fa02 f303 	lsl.w	r3, r2, r3
 800baa4:	430b      	orrs	r3, r1
 800baa6:	40c2      	lsrs	r2, r0
 800baa8:	6163      	str	r3, [r4, #20]
 800baaa:	9201      	str	r2, [sp, #4]
 800baac:	9b01      	ldr	r3, [sp, #4]
 800baae:	61a3      	str	r3, [r4, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bf0c      	ite	eq
 800bab4:	2201      	moveq	r2, #1
 800bab6:	2202      	movne	r2, #2
 800bab8:	6122      	str	r2, [r4, #16]
 800baba:	b1a5      	cbz	r5, 800bae6 <__d2b+0x92>
 800babc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bac0:	4405      	add	r5, r0
 800bac2:	603d      	str	r5, [r7, #0]
 800bac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bac8:	6030      	str	r0, [r6, #0]
 800baca:	4620      	mov	r0, r4
 800bacc:	b003      	add	sp, #12
 800bace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad2:	6161      	str	r1, [r4, #20]
 800bad4:	e7ea      	b.n	800baac <__d2b+0x58>
 800bad6:	a801      	add	r0, sp, #4
 800bad8:	f7ff fd61 	bl	800b59e <__lo0bits>
 800badc:	9b01      	ldr	r3, [sp, #4]
 800bade:	6163      	str	r3, [r4, #20]
 800bae0:	3020      	adds	r0, #32
 800bae2:	2201      	movs	r2, #1
 800bae4:	e7e8      	b.n	800bab8 <__d2b+0x64>
 800bae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800baea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800baee:	6038      	str	r0, [r7, #0]
 800baf0:	6918      	ldr	r0, [r3, #16]
 800baf2:	f7ff fd35 	bl	800b560 <__hi0bits>
 800baf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bafa:	e7e5      	b.n	800bac8 <__d2b+0x74>
 800bafc:	0800c780 	.word	0x0800c780
 800bb00:	0800c791 	.word	0x0800c791

0800bb04 <__ssputs_r>:
 800bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb08:	688e      	ldr	r6, [r1, #8]
 800bb0a:	461f      	mov	r7, r3
 800bb0c:	42be      	cmp	r6, r7
 800bb0e:	680b      	ldr	r3, [r1, #0]
 800bb10:	4682      	mov	sl, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	4690      	mov	r8, r2
 800bb16:	d82d      	bhi.n	800bb74 <__ssputs_r+0x70>
 800bb18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb20:	d026      	beq.n	800bb70 <__ssputs_r+0x6c>
 800bb22:	6965      	ldr	r5, [r4, #20]
 800bb24:	6909      	ldr	r1, [r1, #16]
 800bb26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb2a:	eba3 0901 	sub.w	r9, r3, r1
 800bb2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb32:	1c7b      	adds	r3, r7, #1
 800bb34:	444b      	add	r3, r9
 800bb36:	106d      	asrs	r5, r5, #1
 800bb38:	429d      	cmp	r5, r3
 800bb3a:	bf38      	it	cc
 800bb3c:	461d      	movcc	r5, r3
 800bb3e:	0553      	lsls	r3, r2, #21
 800bb40:	d527      	bpl.n	800bb92 <__ssputs_r+0x8e>
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7ff fbd8 	bl	800b2f8 <_malloc_r>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	b360      	cbz	r0, 800bba6 <__ssputs_r+0xa2>
 800bb4c:	6921      	ldr	r1, [r4, #16]
 800bb4e:	464a      	mov	r2, r9
 800bb50:	f7fe fcf7 	bl	800a542 <memcpy>
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	6126      	str	r6, [r4, #16]
 800bb62:	6165      	str	r5, [r4, #20]
 800bb64:	444e      	add	r6, r9
 800bb66:	eba5 0509 	sub.w	r5, r5, r9
 800bb6a:	6026      	str	r6, [r4, #0]
 800bb6c:	60a5      	str	r5, [r4, #8]
 800bb6e:	463e      	mov	r6, r7
 800bb70:	42be      	cmp	r6, r7
 800bb72:	d900      	bls.n	800bb76 <__ssputs_r+0x72>
 800bb74:	463e      	mov	r6, r7
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	f000 fb9c 	bl	800c2b8 <memmove>
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	1b9b      	subs	r3, r3, r6
 800bb84:	60a3      	str	r3, [r4, #8]
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	4433      	add	r3, r6
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb92:	462a      	mov	r2, r5
 800bb94:	f000 fbfe 	bl	800c394 <_realloc_r>
 800bb98:	4606      	mov	r6, r0
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d1e0      	bne.n	800bb60 <__ssputs_r+0x5c>
 800bb9e:	6921      	ldr	r1, [r4, #16]
 800bba0:	4650      	mov	r0, sl
 800bba2:	f7ff fb35 	bl	800b210 <_free_r>
 800bba6:	230c      	movs	r3, #12
 800bba8:	f8ca 3000 	str.w	r3, [sl]
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb2:	81a3      	strh	r3, [r4, #12]
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	e7e9      	b.n	800bb8e <__ssputs_r+0x8a>
	...

0800bbbc <_svfiprintf_r>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	4698      	mov	r8, r3
 800bbc2:	898b      	ldrh	r3, [r1, #12]
 800bbc4:	061b      	lsls	r3, r3, #24
 800bbc6:	b09d      	sub	sp, #116	@ 0x74
 800bbc8:	4607      	mov	r7, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	4614      	mov	r4, r2
 800bbce:	d510      	bpl.n	800bbf2 <_svfiprintf_r+0x36>
 800bbd0:	690b      	ldr	r3, [r1, #16]
 800bbd2:	b973      	cbnz	r3, 800bbf2 <_svfiprintf_r+0x36>
 800bbd4:	2140      	movs	r1, #64	@ 0x40
 800bbd6:	f7ff fb8f 	bl	800b2f8 <_malloc_r>
 800bbda:	6028      	str	r0, [r5, #0]
 800bbdc:	6128      	str	r0, [r5, #16]
 800bbde:	b930      	cbnz	r0, 800bbee <_svfiprintf_r+0x32>
 800bbe0:	230c      	movs	r3, #12
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	b01d      	add	sp, #116	@ 0x74
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	2340      	movs	r3, #64	@ 0x40
 800bbf0:	616b      	str	r3, [r5, #20]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf6:	2320      	movs	r3, #32
 800bbf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc00:	2330      	movs	r3, #48	@ 0x30
 800bc02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bda0 <_svfiprintf_r+0x1e4>
 800bc06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc0a:	f04f 0901 	mov.w	r9, #1
 800bc0e:	4623      	mov	r3, r4
 800bc10:	469a      	mov	sl, r3
 800bc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc16:	b10a      	cbz	r2, 800bc1c <_svfiprintf_r+0x60>
 800bc18:	2a25      	cmp	r2, #37	@ 0x25
 800bc1a:	d1f9      	bne.n	800bc10 <_svfiprintf_r+0x54>
 800bc1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc20:	d00b      	beq.n	800bc3a <_svfiprintf_r+0x7e>
 800bc22:	465b      	mov	r3, fp
 800bc24:	4622      	mov	r2, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f7ff ff6b 	bl	800bb04 <__ssputs_r>
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f000 80a7 	beq.w	800bd82 <_svfiprintf_r+0x1c6>
 800bc34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc36:	445a      	add	r2, fp
 800bc38:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 809f 	beq.w	800bd82 <_svfiprintf_r+0x1c6>
 800bc44:	2300      	movs	r3, #0
 800bc46:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc4e:	f10a 0a01 	add.w	sl, sl, #1
 800bc52:	9304      	str	r3, [sp, #16]
 800bc54:	9307      	str	r3, [sp, #28]
 800bc56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc5c:	4654      	mov	r4, sl
 800bc5e:	2205      	movs	r2, #5
 800bc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc64:	484e      	ldr	r0, [pc, #312]	@ (800bda0 <_svfiprintf_r+0x1e4>)
 800bc66:	f7f4 fabb 	bl	80001e0 <memchr>
 800bc6a:	9a04      	ldr	r2, [sp, #16]
 800bc6c:	b9d8      	cbnz	r0, 800bca6 <_svfiprintf_r+0xea>
 800bc6e:	06d0      	lsls	r0, r2, #27
 800bc70:	bf44      	itt	mi
 800bc72:	2320      	movmi	r3, #32
 800bc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc78:	0711      	lsls	r1, r2, #28
 800bc7a:	bf44      	itt	mi
 800bc7c:	232b      	movmi	r3, #43	@ 0x2b
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc82:	f89a 3000 	ldrb.w	r3, [sl]
 800bc86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc88:	d015      	beq.n	800bcb6 <_svfiprintf_r+0xfa>
 800bc8a:	9a07      	ldr	r2, [sp, #28]
 800bc8c:	4654      	mov	r4, sl
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f04f 0c0a 	mov.w	ip, #10
 800bc94:	4621      	mov	r1, r4
 800bc96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc9a:	3b30      	subs	r3, #48	@ 0x30
 800bc9c:	2b09      	cmp	r3, #9
 800bc9e:	d94b      	bls.n	800bd38 <_svfiprintf_r+0x17c>
 800bca0:	b1b0      	cbz	r0, 800bcd0 <_svfiprintf_r+0x114>
 800bca2:	9207      	str	r2, [sp, #28]
 800bca4:	e014      	b.n	800bcd0 <_svfiprintf_r+0x114>
 800bca6:	eba0 0308 	sub.w	r3, r0, r8
 800bcaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	46a2      	mov	sl, r4
 800bcb4:	e7d2      	b.n	800bc5c <_svfiprintf_r+0xa0>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	1d19      	adds	r1, r3, #4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	9103      	str	r1, [sp, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bfbb      	ittet	lt
 800bcc2:	425b      	neglt	r3, r3
 800bcc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bcc8:	9307      	strge	r3, [sp, #28]
 800bcca:	9307      	strlt	r3, [sp, #28]
 800bccc:	bfb8      	it	lt
 800bcce:	9204      	strlt	r2, [sp, #16]
 800bcd0:	7823      	ldrb	r3, [r4, #0]
 800bcd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcd4:	d10a      	bne.n	800bcec <_svfiprintf_r+0x130>
 800bcd6:	7863      	ldrb	r3, [r4, #1]
 800bcd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcda:	d132      	bne.n	800bd42 <_svfiprintf_r+0x186>
 800bcdc:	9b03      	ldr	r3, [sp, #12]
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	9203      	str	r2, [sp, #12]
 800bce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bce8:	3402      	adds	r4, #2
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdb0 <_svfiprintf_r+0x1f4>
 800bcf0:	7821      	ldrb	r1, [r4, #0]
 800bcf2:	2203      	movs	r2, #3
 800bcf4:	4650      	mov	r0, sl
 800bcf6:	f7f4 fa73 	bl	80001e0 <memchr>
 800bcfa:	b138      	cbz	r0, 800bd0c <_svfiprintf_r+0x150>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	eba0 000a 	sub.w	r0, r0, sl
 800bd02:	2240      	movs	r2, #64	@ 0x40
 800bd04:	4082      	lsls	r2, r0
 800bd06:	4313      	orrs	r3, r2
 800bd08:	3401      	adds	r4, #1
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd10:	4824      	ldr	r0, [pc, #144]	@ (800bda4 <_svfiprintf_r+0x1e8>)
 800bd12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd16:	2206      	movs	r2, #6
 800bd18:	f7f4 fa62 	bl	80001e0 <memchr>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d036      	beq.n	800bd8e <_svfiprintf_r+0x1d2>
 800bd20:	4b21      	ldr	r3, [pc, #132]	@ (800bda8 <_svfiprintf_r+0x1ec>)
 800bd22:	bb1b      	cbnz	r3, 800bd6c <_svfiprintf_r+0x1b0>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	3307      	adds	r3, #7
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd32:	4433      	add	r3, r6
 800bd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd36:	e76a      	b.n	800bc0e <_svfiprintf_r+0x52>
 800bd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7a8      	b.n	800bc94 <_svfiprintf_r+0xd8>
 800bd42:	2300      	movs	r3, #0
 800bd44:	3401      	adds	r4, #1
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd54:	3a30      	subs	r2, #48	@ 0x30
 800bd56:	2a09      	cmp	r2, #9
 800bd58:	d903      	bls.n	800bd62 <_svfiprintf_r+0x1a6>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0c6      	beq.n	800bcec <_svfiprintf_r+0x130>
 800bd5e:	9105      	str	r1, [sp, #20]
 800bd60:	e7c4      	b.n	800bcec <_svfiprintf_r+0x130>
 800bd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd66:	4604      	mov	r4, r0
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e7f0      	b.n	800bd4e <_svfiprintf_r+0x192>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b0e      	ldr	r3, [pc, #56]	@ (800bdac <_svfiprintf_r+0x1f0>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7fd fe60 	bl	8009a3c <_printf_float>
 800bd7c:	1c42      	adds	r2, r0, #1
 800bd7e:	4606      	mov	r6, r0
 800bd80:	d1d6      	bne.n	800bd30 <_svfiprintf_r+0x174>
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	065b      	lsls	r3, r3, #25
 800bd86:	f53f af2d 	bmi.w	800bbe4 <_svfiprintf_r+0x28>
 800bd8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd8c:	e72c      	b.n	800bbe8 <_svfiprintf_r+0x2c>
 800bd8e:	ab03      	add	r3, sp, #12
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	462a      	mov	r2, r5
 800bd94:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <_svfiprintf_r+0x1f0>)
 800bd96:	a904      	add	r1, sp, #16
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7fe f8e7 	bl	8009f6c <_printf_i>
 800bd9e:	e7ed      	b.n	800bd7c <_svfiprintf_r+0x1c0>
 800bda0:	0800c7ea 	.word	0x0800c7ea
 800bda4:	0800c7f4 	.word	0x0800c7f4
 800bda8:	08009a3d 	.word	0x08009a3d
 800bdac:	0800bb05 	.word	0x0800bb05
 800bdb0:	0800c7f0 	.word	0x0800c7f0

0800bdb4 <__sfputc_r>:
 800bdb4:	6893      	ldr	r3, [r2, #8]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	b410      	push	{r4}
 800bdbc:	6093      	str	r3, [r2, #8]
 800bdbe:	da08      	bge.n	800bdd2 <__sfputc_r+0x1e>
 800bdc0:	6994      	ldr	r4, [r2, #24]
 800bdc2:	42a3      	cmp	r3, r4
 800bdc4:	db01      	blt.n	800bdca <__sfputc_r+0x16>
 800bdc6:	290a      	cmp	r1, #10
 800bdc8:	d103      	bne.n	800bdd2 <__sfputc_r+0x1e>
 800bdca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdce:	f000 b9df 	b.w	800c190 <__swbuf_r>
 800bdd2:	6813      	ldr	r3, [r2, #0]
 800bdd4:	1c58      	adds	r0, r3, #1
 800bdd6:	6010      	str	r0, [r2, #0]
 800bdd8:	7019      	strb	r1, [r3, #0]
 800bdda:	4608      	mov	r0, r1
 800bddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <__sfputs_r>:
 800bde2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde4:	4606      	mov	r6, r0
 800bde6:	460f      	mov	r7, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	18d5      	adds	r5, r2, r3
 800bdec:	42ac      	cmp	r4, r5
 800bdee:	d101      	bne.n	800bdf4 <__sfputs_r+0x12>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e007      	b.n	800be04 <__sfputs_r+0x22>
 800bdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf8:	463a      	mov	r2, r7
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ffda 	bl	800bdb4 <__sfputc_r>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d1f3      	bne.n	800bdec <__sfputs_r+0xa>
 800be04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be08 <_vfiprintf_r>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	460d      	mov	r5, r1
 800be0e:	b09d      	sub	sp, #116	@ 0x74
 800be10:	4614      	mov	r4, r2
 800be12:	4698      	mov	r8, r3
 800be14:	4606      	mov	r6, r0
 800be16:	b118      	cbz	r0, 800be20 <_vfiprintf_r+0x18>
 800be18:	6a03      	ldr	r3, [r0, #32]
 800be1a:	b90b      	cbnz	r3, 800be20 <_vfiprintf_r+0x18>
 800be1c:	f7fe fa50 	bl	800a2c0 <__sinit>
 800be20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be22:	07d9      	lsls	r1, r3, #31
 800be24:	d405      	bmi.n	800be32 <_vfiprintf_r+0x2a>
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	059a      	lsls	r2, r3, #22
 800be2a:	d402      	bmi.n	800be32 <_vfiprintf_r+0x2a>
 800be2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be2e:	f7fe fb86 	bl	800a53e <__retarget_lock_acquire_recursive>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	071b      	lsls	r3, r3, #28
 800be36:	d501      	bpl.n	800be3c <_vfiprintf_r+0x34>
 800be38:	692b      	ldr	r3, [r5, #16]
 800be3a:	b99b      	cbnz	r3, 800be64 <_vfiprintf_r+0x5c>
 800be3c:	4629      	mov	r1, r5
 800be3e:	4630      	mov	r0, r6
 800be40:	f000 f9e4 	bl	800c20c <__swsetup_r>
 800be44:	b170      	cbz	r0, 800be64 <_vfiprintf_r+0x5c>
 800be46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be48:	07dc      	lsls	r4, r3, #31
 800be4a:	d504      	bpl.n	800be56 <_vfiprintf_r+0x4e>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	b01d      	add	sp, #116	@ 0x74
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	89ab      	ldrh	r3, [r5, #12]
 800be58:	0598      	lsls	r0, r3, #22
 800be5a:	d4f7      	bmi.n	800be4c <_vfiprintf_r+0x44>
 800be5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be5e:	f7fe fb6f 	bl	800a540 <__retarget_lock_release_recursive>
 800be62:	e7f3      	b.n	800be4c <_vfiprintf_r+0x44>
 800be64:	2300      	movs	r3, #0
 800be66:	9309      	str	r3, [sp, #36]	@ 0x24
 800be68:	2320      	movs	r3, #32
 800be6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800be72:	2330      	movs	r3, #48	@ 0x30
 800be74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c024 <_vfiprintf_r+0x21c>
 800be78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be7c:	f04f 0901 	mov.w	r9, #1
 800be80:	4623      	mov	r3, r4
 800be82:	469a      	mov	sl, r3
 800be84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be88:	b10a      	cbz	r2, 800be8e <_vfiprintf_r+0x86>
 800be8a:	2a25      	cmp	r2, #37	@ 0x25
 800be8c:	d1f9      	bne.n	800be82 <_vfiprintf_r+0x7a>
 800be8e:	ebba 0b04 	subs.w	fp, sl, r4
 800be92:	d00b      	beq.n	800beac <_vfiprintf_r+0xa4>
 800be94:	465b      	mov	r3, fp
 800be96:	4622      	mov	r2, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7ff ffa1 	bl	800bde2 <__sfputs_r>
 800bea0:	3001      	adds	r0, #1
 800bea2:	f000 80a7 	beq.w	800bff4 <_vfiprintf_r+0x1ec>
 800bea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bea8:	445a      	add	r2, fp
 800beaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800beac:	f89a 3000 	ldrb.w	r3, [sl]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 809f 	beq.w	800bff4 <_vfiprintf_r+0x1ec>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bec0:	f10a 0a01 	add.w	sl, sl, #1
 800bec4:	9304      	str	r3, [sp, #16]
 800bec6:	9307      	str	r3, [sp, #28]
 800bec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800becc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bece:	4654      	mov	r4, sl
 800bed0:	2205      	movs	r2, #5
 800bed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed6:	4853      	ldr	r0, [pc, #332]	@ (800c024 <_vfiprintf_r+0x21c>)
 800bed8:	f7f4 f982 	bl	80001e0 <memchr>
 800bedc:	9a04      	ldr	r2, [sp, #16]
 800bede:	b9d8      	cbnz	r0, 800bf18 <_vfiprintf_r+0x110>
 800bee0:	06d1      	lsls	r1, r2, #27
 800bee2:	bf44      	itt	mi
 800bee4:	2320      	movmi	r3, #32
 800bee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beea:	0713      	lsls	r3, r2, #28
 800beec:	bf44      	itt	mi
 800beee:	232b      	movmi	r3, #43	@ 0x2b
 800bef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bef4:	f89a 3000 	ldrb.w	r3, [sl]
 800bef8:	2b2a      	cmp	r3, #42	@ 0x2a
 800befa:	d015      	beq.n	800bf28 <_vfiprintf_r+0x120>
 800befc:	9a07      	ldr	r2, [sp, #28]
 800befe:	4654      	mov	r4, sl
 800bf00:	2000      	movs	r0, #0
 800bf02:	f04f 0c0a 	mov.w	ip, #10
 800bf06:	4621      	mov	r1, r4
 800bf08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf0c:	3b30      	subs	r3, #48	@ 0x30
 800bf0e:	2b09      	cmp	r3, #9
 800bf10:	d94b      	bls.n	800bfaa <_vfiprintf_r+0x1a2>
 800bf12:	b1b0      	cbz	r0, 800bf42 <_vfiprintf_r+0x13a>
 800bf14:	9207      	str	r2, [sp, #28]
 800bf16:	e014      	b.n	800bf42 <_vfiprintf_r+0x13a>
 800bf18:	eba0 0308 	sub.w	r3, r0, r8
 800bf1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf20:	4313      	orrs	r3, r2
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	46a2      	mov	sl, r4
 800bf26:	e7d2      	b.n	800bece <_vfiprintf_r+0xc6>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	1d19      	adds	r1, r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	9103      	str	r1, [sp, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bfbb      	ittet	lt
 800bf34:	425b      	neglt	r3, r3
 800bf36:	f042 0202 	orrlt.w	r2, r2, #2
 800bf3a:	9307      	strge	r3, [sp, #28]
 800bf3c:	9307      	strlt	r3, [sp, #28]
 800bf3e:	bfb8      	it	lt
 800bf40:	9204      	strlt	r2, [sp, #16]
 800bf42:	7823      	ldrb	r3, [r4, #0]
 800bf44:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf46:	d10a      	bne.n	800bf5e <_vfiprintf_r+0x156>
 800bf48:	7863      	ldrb	r3, [r4, #1]
 800bf4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4c:	d132      	bne.n	800bfb4 <_vfiprintf_r+0x1ac>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	1d1a      	adds	r2, r3, #4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	9203      	str	r2, [sp, #12]
 800bf56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf5a:	3402      	adds	r4, #2
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c034 <_vfiprintf_r+0x22c>
 800bf62:	7821      	ldrb	r1, [r4, #0]
 800bf64:	2203      	movs	r2, #3
 800bf66:	4650      	mov	r0, sl
 800bf68:	f7f4 f93a 	bl	80001e0 <memchr>
 800bf6c:	b138      	cbz	r0, 800bf7e <_vfiprintf_r+0x176>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	eba0 000a 	sub.w	r0, r0, sl
 800bf74:	2240      	movs	r2, #64	@ 0x40
 800bf76:	4082      	lsls	r2, r0
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	3401      	adds	r4, #1
 800bf7c:	9304      	str	r3, [sp, #16]
 800bf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf82:	4829      	ldr	r0, [pc, #164]	@ (800c028 <_vfiprintf_r+0x220>)
 800bf84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf88:	2206      	movs	r2, #6
 800bf8a:	f7f4 f929 	bl	80001e0 <memchr>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d03f      	beq.n	800c012 <_vfiprintf_r+0x20a>
 800bf92:	4b26      	ldr	r3, [pc, #152]	@ (800c02c <_vfiprintf_r+0x224>)
 800bf94:	bb1b      	cbnz	r3, 800bfde <_vfiprintf_r+0x1d6>
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	3307      	adds	r3, #7
 800bf9a:	f023 0307 	bic.w	r3, r3, #7
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa4:	443b      	add	r3, r7
 800bfa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfa8:	e76a      	b.n	800be80 <_vfiprintf_r+0x78>
 800bfaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfae:	460c      	mov	r4, r1
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	e7a8      	b.n	800bf06 <_vfiprintf_r+0xfe>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f04f 0c0a 	mov.w	ip, #10
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc6:	3a30      	subs	r2, #48	@ 0x30
 800bfc8:	2a09      	cmp	r2, #9
 800bfca:	d903      	bls.n	800bfd4 <_vfiprintf_r+0x1cc>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0c6      	beq.n	800bf5e <_vfiprintf_r+0x156>
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	e7c4      	b.n	800bf5e <_vfiprintf_r+0x156>
 800bfd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd8:	4604      	mov	r4, r0
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e7f0      	b.n	800bfc0 <_vfiprintf_r+0x1b8>
 800bfde:	ab03      	add	r3, sp, #12
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4b12      	ldr	r3, [pc, #72]	@ (800c030 <_vfiprintf_r+0x228>)
 800bfe6:	a904      	add	r1, sp, #16
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7fd fd27 	bl	8009a3c <_printf_float>
 800bfee:	4607      	mov	r7, r0
 800bff0:	1c78      	adds	r0, r7, #1
 800bff2:	d1d6      	bne.n	800bfa2 <_vfiprintf_r+0x19a>
 800bff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bff6:	07d9      	lsls	r1, r3, #31
 800bff8:	d405      	bmi.n	800c006 <_vfiprintf_r+0x1fe>
 800bffa:	89ab      	ldrh	r3, [r5, #12]
 800bffc:	059a      	lsls	r2, r3, #22
 800bffe:	d402      	bmi.n	800c006 <_vfiprintf_r+0x1fe>
 800c000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c002:	f7fe fa9d 	bl	800a540 <__retarget_lock_release_recursive>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	065b      	lsls	r3, r3, #25
 800c00a:	f53f af1f 	bmi.w	800be4c <_vfiprintf_r+0x44>
 800c00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c010:	e71e      	b.n	800be50 <_vfiprintf_r+0x48>
 800c012:	ab03      	add	r3, sp, #12
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	462a      	mov	r2, r5
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <_vfiprintf_r+0x228>)
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7fd ffa5 	bl	8009f6c <_printf_i>
 800c022:	e7e4      	b.n	800bfee <_vfiprintf_r+0x1e6>
 800c024:	0800c7ea 	.word	0x0800c7ea
 800c028:	0800c7f4 	.word	0x0800c7f4
 800c02c:	08009a3d 	.word	0x08009a3d
 800c030:	0800bde3 	.word	0x0800bde3
 800c034:	0800c7f0 	.word	0x0800c7f0

0800c038 <__sflush_r>:
 800c038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c040:	0716      	lsls	r6, r2, #28
 800c042:	4605      	mov	r5, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d454      	bmi.n	800c0f2 <__sflush_r+0xba>
 800c048:	684b      	ldr	r3, [r1, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dc02      	bgt.n	800c054 <__sflush_r+0x1c>
 800c04e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	dd48      	ble.n	800c0e6 <__sflush_r+0xae>
 800c054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c056:	2e00      	cmp	r6, #0
 800c058:	d045      	beq.n	800c0e6 <__sflush_r+0xae>
 800c05a:	2300      	movs	r3, #0
 800c05c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c060:	682f      	ldr	r7, [r5, #0]
 800c062:	6a21      	ldr	r1, [r4, #32]
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	d030      	beq.n	800c0ca <__sflush_r+0x92>
 800c068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	0759      	lsls	r1, r3, #29
 800c06e:	d505      	bpl.n	800c07c <__sflush_r+0x44>
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c076:	b10b      	cbz	r3, 800c07c <__sflush_r+0x44>
 800c078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c07a:	1ad2      	subs	r2, r2, r3
 800c07c:	2300      	movs	r3, #0
 800c07e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c080:	6a21      	ldr	r1, [r4, #32]
 800c082:	4628      	mov	r0, r5
 800c084:	47b0      	blx	r6
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	d106      	bne.n	800c09a <__sflush_r+0x62>
 800c08c:	6829      	ldr	r1, [r5, #0]
 800c08e:	291d      	cmp	r1, #29
 800c090:	d82b      	bhi.n	800c0ea <__sflush_r+0xb2>
 800c092:	4a2a      	ldr	r2, [pc, #168]	@ (800c13c <__sflush_r+0x104>)
 800c094:	40ca      	lsrs	r2, r1
 800c096:	07d6      	lsls	r6, r2, #31
 800c098:	d527      	bpl.n	800c0ea <__sflush_r+0xb2>
 800c09a:	2200      	movs	r2, #0
 800c09c:	6062      	str	r2, [r4, #4]
 800c09e:	04d9      	lsls	r1, r3, #19
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	6022      	str	r2, [r4, #0]
 800c0a4:	d504      	bpl.n	800c0b0 <__sflush_r+0x78>
 800c0a6:	1c42      	adds	r2, r0, #1
 800c0a8:	d101      	bne.n	800c0ae <__sflush_r+0x76>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b903      	cbnz	r3, 800c0b0 <__sflush_r+0x78>
 800c0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0b2:	602f      	str	r7, [r5, #0]
 800c0b4:	b1b9      	cbz	r1, 800c0e6 <__sflush_r+0xae>
 800c0b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ba:	4299      	cmp	r1, r3
 800c0bc:	d002      	beq.n	800c0c4 <__sflush_r+0x8c>
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f7ff f8a6 	bl	800b210 <_free_r>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c8:	e00d      	b.n	800c0e6 <__sflush_r+0xae>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b0      	blx	r6
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	1c50      	adds	r0, r2, #1
 800c0d4:	d1c9      	bne.n	800c06a <__sflush_r+0x32>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0c6      	beq.n	800c06a <__sflush_r+0x32>
 800c0dc:	2b1d      	cmp	r3, #29
 800c0de:	d001      	beq.n	800c0e4 <__sflush_r+0xac>
 800c0e0:	2b16      	cmp	r3, #22
 800c0e2:	d11e      	bne.n	800c122 <__sflush_r+0xea>
 800c0e4:	602f      	str	r7, [r5, #0]
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e022      	b.n	800c130 <__sflush_r+0xf8>
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ee:	b21b      	sxth	r3, r3
 800c0f0:	e01b      	b.n	800c12a <__sflush_r+0xf2>
 800c0f2:	690f      	ldr	r7, [r1, #16]
 800c0f4:	2f00      	cmp	r7, #0
 800c0f6:	d0f6      	beq.n	800c0e6 <__sflush_r+0xae>
 800c0f8:	0793      	lsls	r3, r2, #30
 800c0fa:	680e      	ldr	r6, [r1, #0]
 800c0fc:	bf08      	it	eq
 800c0fe:	694b      	ldreq	r3, [r1, #20]
 800c100:	600f      	str	r7, [r1, #0]
 800c102:	bf18      	it	ne
 800c104:	2300      	movne	r3, #0
 800c106:	eba6 0807 	sub.w	r8, r6, r7
 800c10a:	608b      	str	r3, [r1, #8]
 800c10c:	f1b8 0f00 	cmp.w	r8, #0
 800c110:	dde9      	ble.n	800c0e6 <__sflush_r+0xae>
 800c112:	6a21      	ldr	r1, [r4, #32]
 800c114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c116:	4643      	mov	r3, r8
 800c118:	463a      	mov	r2, r7
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b0      	blx	r6
 800c11e:	2800      	cmp	r0, #0
 800c120:	dc08      	bgt.n	800c134 <__sflush_r+0xfc>
 800c122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c134:	4407      	add	r7, r0
 800c136:	eba8 0800 	sub.w	r8, r8, r0
 800c13a:	e7e7      	b.n	800c10c <__sflush_r+0xd4>
 800c13c:	20400001 	.word	0x20400001

0800c140 <_fflush_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	690b      	ldr	r3, [r1, #16]
 800c144:	4605      	mov	r5, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b913      	cbnz	r3, 800c150 <_fflush_r+0x10>
 800c14a:	2500      	movs	r5, #0
 800c14c:	4628      	mov	r0, r5
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	b118      	cbz	r0, 800c15a <_fflush_r+0x1a>
 800c152:	6a03      	ldr	r3, [r0, #32]
 800c154:	b90b      	cbnz	r3, 800c15a <_fflush_r+0x1a>
 800c156:	f7fe f8b3 	bl	800a2c0 <__sinit>
 800c15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0f3      	beq.n	800c14a <_fflush_r+0xa>
 800c162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c164:	07d0      	lsls	r0, r2, #31
 800c166:	d404      	bmi.n	800c172 <_fflush_r+0x32>
 800c168:	0599      	lsls	r1, r3, #22
 800c16a:	d402      	bmi.n	800c172 <_fflush_r+0x32>
 800c16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c16e:	f7fe f9e6 	bl	800a53e <__retarget_lock_acquire_recursive>
 800c172:	4628      	mov	r0, r5
 800c174:	4621      	mov	r1, r4
 800c176:	f7ff ff5f 	bl	800c038 <__sflush_r>
 800c17a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c17c:	07da      	lsls	r2, r3, #31
 800c17e:	4605      	mov	r5, r0
 800c180:	d4e4      	bmi.n	800c14c <_fflush_r+0xc>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	059b      	lsls	r3, r3, #22
 800c186:	d4e1      	bmi.n	800c14c <_fflush_r+0xc>
 800c188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c18a:	f7fe f9d9 	bl	800a540 <__retarget_lock_release_recursive>
 800c18e:	e7dd      	b.n	800c14c <_fflush_r+0xc>

0800c190 <__swbuf_r>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	460e      	mov	r6, r1
 800c194:	4614      	mov	r4, r2
 800c196:	4605      	mov	r5, r0
 800c198:	b118      	cbz	r0, 800c1a2 <__swbuf_r+0x12>
 800c19a:	6a03      	ldr	r3, [r0, #32]
 800c19c:	b90b      	cbnz	r3, 800c1a2 <__swbuf_r+0x12>
 800c19e:	f7fe f88f 	bl	800a2c0 <__sinit>
 800c1a2:	69a3      	ldr	r3, [r4, #24]
 800c1a4:	60a3      	str	r3, [r4, #8]
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	071a      	lsls	r2, r3, #28
 800c1aa:	d501      	bpl.n	800c1b0 <__swbuf_r+0x20>
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	b943      	cbnz	r3, 800c1c2 <__swbuf_r+0x32>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 f82a 	bl	800c20c <__swsetup_r>
 800c1b8:	b118      	cbz	r0, 800c1c2 <__swbuf_r+0x32>
 800c1ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c1be:	4638      	mov	r0, r7
 800c1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	1a98      	subs	r0, r3, r2
 800c1c8:	6963      	ldr	r3, [r4, #20]
 800c1ca:	b2f6      	uxtb	r6, r6
 800c1cc:	4283      	cmp	r3, r0
 800c1ce:	4637      	mov	r7, r6
 800c1d0:	dc05      	bgt.n	800c1de <__swbuf_r+0x4e>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f7ff ffb3 	bl	800c140 <_fflush_r>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d1ed      	bne.n	800c1ba <__swbuf_r+0x2a>
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	60a3      	str	r3, [r4, #8]
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	6022      	str	r2, [r4, #0]
 800c1ea:	701e      	strb	r6, [r3, #0]
 800c1ec:	6962      	ldr	r2, [r4, #20]
 800c1ee:	1c43      	adds	r3, r0, #1
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d004      	beq.n	800c1fe <__swbuf_r+0x6e>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	07db      	lsls	r3, r3, #31
 800c1f8:	d5e1      	bpl.n	800c1be <__swbuf_r+0x2e>
 800c1fa:	2e0a      	cmp	r6, #10
 800c1fc:	d1df      	bne.n	800c1be <__swbuf_r+0x2e>
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f7ff ff9d 	bl	800c140 <_fflush_r>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0d9      	beq.n	800c1be <__swbuf_r+0x2e>
 800c20a:	e7d6      	b.n	800c1ba <__swbuf_r+0x2a>

0800c20c <__swsetup_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4b29      	ldr	r3, [pc, #164]	@ (800c2b4 <__swsetup_r+0xa8>)
 800c210:	4605      	mov	r5, r0
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	460c      	mov	r4, r1
 800c216:	b118      	cbz	r0, 800c220 <__swsetup_r+0x14>
 800c218:	6a03      	ldr	r3, [r0, #32]
 800c21a:	b90b      	cbnz	r3, 800c220 <__swsetup_r+0x14>
 800c21c:	f7fe f850 	bl	800a2c0 <__sinit>
 800c220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c224:	0719      	lsls	r1, r3, #28
 800c226:	d422      	bmi.n	800c26e <__swsetup_r+0x62>
 800c228:	06da      	lsls	r2, r3, #27
 800c22a:	d407      	bmi.n	800c23c <__swsetup_r+0x30>
 800c22c:	2209      	movs	r2, #9
 800c22e:	602a      	str	r2, [r5, #0]
 800c230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	f04f 30ff 	mov.w	r0, #4294967295
 800c23a:	e033      	b.n	800c2a4 <__swsetup_r+0x98>
 800c23c:	0758      	lsls	r0, r3, #29
 800c23e:	d512      	bpl.n	800c266 <__swsetup_r+0x5a>
 800c240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c242:	b141      	cbz	r1, 800c256 <__swsetup_r+0x4a>
 800c244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c248:	4299      	cmp	r1, r3
 800c24a:	d002      	beq.n	800c252 <__swsetup_r+0x46>
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7fe ffdf 	bl	800b210 <_free_r>
 800c252:	2300      	movs	r3, #0
 800c254:	6363      	str	r3, [r4, #52]	@ 0x34
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c25c:	81a3      	strh	r3, [r4, #12]
 800c25e:	2300      	movs	r3, #0
 800c260:	6063      	str	r3, [r4, #4]
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	f043 0308 	orr.w	r3, r3, #8
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	6923      	ldr	r3, [r4, #16]
 800c270:	b94b      	cbnz	r3, 800c286 <__swsetup_r+0x7a>
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c27c:	d003      	beq.n	800c286 <__swsetup_r+0x7a>
 800c27e:	4621      	mov	r1, r4
 800c280:	4628      	mov	r0, r5
 800c282:	f000 f8fb 	bl	800c47c <__smakebuf_r>
 800c286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28a:	f013 0201 	ands.w	r2, r3, #1
 800c28e:	d00a      	beq.n	800c2a6 <__swsetup_r+0x9a>
 800c290:	2200      	movs	r2, #0
 800c292:	60a2      	str	r2, [r4, #8]
 800c294:	6962      	ldr	r2, [r4, #20]
 800c296:	4252      	negs	r2, r2
 800c298:	61a2      	str	r2, [r4, #24]
 800c29a:	6922      	ldr	r2, [r4, #16]
 800c29c:	b942      	cbnz	r2, 800c2b0 <__swsetup_r+0xa4>
 800c29e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2a2:	d1c5      	bne.n	800c230 <__swsetup_r+0x24>
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	0799      	lsls	r1, r3, #30
 800c2a8:	bf58      	it	pl
 800c2aa:	6962      	ldrpl	r2, [r4, #20]
 800c2ac:	60a2      	str	r2, [r4, #8]
 800c2ae:	e7f4      	b.n	800c29a <__swsetup_r+0x8e>
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e7f7      	b.n	800c2a4 <__swsetup_r+0x98>
 800c2b4:	2000001c 	.word	0x2000001c

0800c2b8 <memmove>:
 800c2b8:	4288      	cmp	r0, r1
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	eb01 0402 	add.w	r4, r1, r2
 800c2c0:	d902      	bls.n	800c2c8 <memmove+0x10>
 800c2c2:	4284      	cmp	r4, r0
 800c2c4:	4623      	mov	r3, r4
 800c2c6:	d807      	bhi.n	800c2d8 <memmove+0x20>
 800c2c8:	1e43      	subs	r3, r0, #1
 800c2ca:	42a1      	cmp	r1, r4
 800c2cc:	d008      	beq.n	800c2e0 <memmove+0x28>
 800c2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2d6:	e7f8      	b.n	800c2ca <memmove+0x12>
 800c2d8:	4402      	add	r2, r0
 800c2da:	4601      	mov	r1, r0
 800c2dc:	428a      	cmp	r2, r1
 800c2de:	d100      	bne.n	800c2e2 <memmove+0x2a>
 800c2e0:	bd10      	pop	{r4, pc}
 800c2e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2ea:	e7f7      	b.n	800c2dc <memmove+0x24>

0800c2ec <_sbrk_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d06      	ldr	r5, [pc, #24]	@ (800c308 <_sbrk_r+0x1c>)
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	602b      	str	r3, [r5, #0]
 800c2f8:	f7f5 f9fa 	bl	80016f0 <_sbrk>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_sbrk_r+0x1a>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_sbrk_r+0x1a>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	20001e84 	.word	0x20001e84

0800c30c <__assert_func>:
 800c30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c30e:	4614      	mov	r4, r2
 800c310:	461a      	mov	r2, r3
 800c312:	4b09      	ldr	r3, [pc, #36]	@ (800c338 <__assert_func+0x2c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4605      	mov	r5, r0
 800c318:	68d8      	ldr	r0, [r3, #12]
 800c31a:	b14c      	cbz	r4, 800c330 <__assert_func+0x24>
 800c31c:	4b07      	ldr	r3, [pc, #28]	@ (800c33c <__assert_func+0x30>)
 800c31e:	9100      	str	r1, [sp, #0]
 800c320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c324:	4906      	ldr	r1, [pc, #24]	@ (800c340 <__assert_func+0x34>)
 800c326:	462b      	mov	r3, r5
 800c328:	f000 f870 	bl	800c40c <fiprintf>
 800c32c:	f000 f904 	bl	800c538 <abort>
 800c330:	4b04      	ldr	r3, [pc, #16]	@ (800c344 <__assert_func+0x38>)
 800c332:	461c      	mov	r4, r3
 800c334:	e7f3      	b.n	800c31e <__assert_func+0x12>
 800c336:	bf00      	nop
 800c338:	2000001c 	.word	0x2000001c
 800c33c:	0800c805 	.word	0x0800c805
 800c340:	0800c812 	.word	0x0800c812
 800c344:	0800c840 	.word	0x0800c840

0800c348 <_calloc_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	fba1 5402 	umull	r5, r4, r1, r2
 800c34e:	b934      	cbnz	r4, 800c35e <_calloc_r+0x16>
 800c350:	4629      	mov	r1, r5
 800c352:	f7fe ffd1 	bl	800b2f8 <_malloc_r>
 800c356:	4606      	mov	r6, r0
 800c358:	b928      	cbnz	r0, 800c366 <_calloc_r+0x1e>
 800c35a:	4630      	mov	r0, r6
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	220c      	movs	r2, #12
 800c360:	6002      	str	r2, [r0, #0]
 800c362:	2600      	movs	r6, #0
 800c364:	e7f9      	b.n	800c35a <_calloc_r+0x12>
 800c366:	462a      	mov	r2, r5
 800c368:	4621      	mov	r1, r4
 800c36a:	f7fe f86a 	bl	800a442 <memset>
 800c36e:	e7f4      	b.n	800c35a <_calloc_r+0x12>

0800c370 <__ascii_mbtowc>:
 800c370:	b082      	sub	sp, #8
 800c372:	b901      	cbnz	r1, 800c376 <__ascii_mbtowc+0x6>
 800c374:	a901      	add	r1, sp, #4
 800c376:	b142      	cbz	r2, 800c38a <__ascii_mbtowc+0x1a>
 800c378:	b14b      	cbz	r3, 800c38e <__ascii_mbtowc+0x1e>
 800c37a:	7813      	ldrb	r3, [r2, #0]
 800c37c:	600b      	str	r3, [r1, #0]
 800c37e:	7812      	ldrb	r2, [r2, #0]
 800c380:	1e10      	subs	r0, r2, #0
 800c382:	bf18      	it	ne
 800c384:	2001      	movne	r0, #1
 800c386:	b002      	add	sp, #8
 800c388:	4770      	bx	lr
 800c38a:	4610      	mov	r0, r2
 800c38c:	e7fb      	b.n	800c386 <__ascii_mbtowc+0x16>
 800c38e:	f06f 0001 	mvn.w	r0, #1
 800c392:	e7f8      	b.n	800c386 <__ascii_mbtowc+0x16>

0800c394 <_realloc_r>:
 800c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c398:	4607      	mov	r7, r0
 800c39a:	4614      	mov	r4, r2
 800c39c:	460d      	mov	r5, r1
 800c39e:	b921      	cbnz	r1, 800c3aa <_realloc_r+0x16>
 800c3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	f7fe bfa7 	b.w	800b2f8 <_malloc_r>
 800c3aa:	b92a      	cbnz	r2, 800c3b8 <_realloc_r+0x24>
 800c3ac:	f7fe ff30 	bl	800b210 <_free_r>
 800c3b0:	4625      	mov	r5, r4
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b8:	f000 f8c5 	bl	800c546 <_malloc_usable_size_r>
 800c3bc:	4284      	cmp	r4, r0
 800c3be:	4606      	mov	r6, r0
 800c3c0:	d802      	bhi.n	800c3c8 <_realloc_r+0x34>
 800c3c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3c6:	d8f4      	bhi.n	800c3b2 <_realloc_r+0x1e>
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f7fe ff94 	bl	800b2f8 <_malloc_r>
 800c3d0:	4680      	mov	r8, r0
 800c3d2:	b908      	cbnz	r0, 800c3d8 <_realloc_r+0x44>
 800c3d4:	4645      	mov	r5, r8
 800c3d6:	e7ec      	b.n	800c3b2 <_realloc_r+0x1e>
 800c3d8:	42b4      	cmp	r4, r6
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	bf28      	it	cs
 800c3e0:	4632      	movcs	r2, r6
 800c3e2:	f7fe f8ae 	bl	800a542 <memcpy>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7fe ff11 	bl	800b210 <_free_r>
 800c3ee:	e7f1      	b.n	800c3d4 <_realloc_r+0x40>

0800c3f0 <__ascii_wctomb>:
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	b141      	cbz	r1, 800c408 <__ascii_wctomb+0x18>
 800c3f6:	2aff      	cmp	r2, #255	@ 0xff
 800c3f8:	d904      	bls.n	800c404 <__ascii_wctomb+0x14>
 800c3fa:	228a      	movs	r2, #138	@ 0x8a
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c402:	4770      	bx	lr
 800c404:	700a      	strb	r2, [r1, #0]
 800c406:	2001      	movs	r0, #1
 800c408:	4770      	bx	lr
	...

0800c40c <fiprintf>:
 800c40c:	b40e      	push	{r1, r2, r3}
 800c40e:	b503      	push	{r0, r1, lr}
 800c410:	4601      	mov	r1, r0
 800c412:	ab03      	add	r3, sp, #12
 800c414:	4805      	ldr	r0, [pc, #20]	@ (800c42c <fiprintf+0x20>)
 800c416:	f853 2b04 	ldr.w	r2, [r3], #4
 800c41a:	6800      	ldr	r0, [r0, #0]
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	f7ff fcf3 	bl	800be08 <_vfiprintf_r>
 800c422:	b002      	add	sp, #8
 800c424:	f85d eb04 	ldr.w	lr, [sp], #4
 800c428:	b003      	add	sp, #12
 800c42a:	4770      	bx	lr
 800c42c:	2000001c 	.word	0x2000001c

0800c430 <__swhatbuf_r>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	460c      	mov	r4, r1
 800c434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c438:	2900      	cmp	r1, #0
 800c43a:	b096      	sub	sp, #88	@ 0x58
 800c43c:	4615      	mov	r5, r2
 800c43e:	461e      	mov	r6, r3
 800c440:	da0d      	bge.n	800c45e <__swhatbuf_r+0x2e>
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c448:	f04f 0100 	mov.w	r1, #0
 800c44c:	bf14      	ite	ne
 800c44e:	2340      	movne	r3, #64	@ 0x40
 800c450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c454:	2000      	movs	r0, #0
 800c456:	6031      	str	r1, [r6, #0]
 800c458:	602b      	str	r3, [r5, #0]
 800c45a:	b016      	add	sp, #88	@ 0x58
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	466a      	mov	r2, sp
 800c460:	f000 f848 	bl	800c4f4 <_fstat_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	dbec      	blt.n	800c442 <__swhatbuf_r+0x12>
 800c468:	9901      	ldr	r1, [sp, #4]
 800c46a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c46e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c472:	4259      	negs	r1, r3
 800c474:	4159      	adcs	r1, r3
 800c476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c47a:	e7eb      	b.n	800c454 <__swhatbuf_r+0x24>

0800c47c <__smakebuf_r>:
 800c47c:	898b      	ldrh	r3, [r1, #12]
 800c47e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c480:	079d      	lsls	r5, r3, #30
 800c482:	4606      	mov	r6, r0
 800c484:	460c      	mov	r4, r1
 800c486:	d507      	bpl.n	800c498 <__smakebuf_r+0x1c>
 800c488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	2301      	movs	r3, #1
 800c492:	6163      	str	r3, [r4, #20]
 800c494:	b003      	add	sp, #12
 800c496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c498:	ab01      	add	r3, sp, #4
 800c49a:	466a      	mov	r2, sp
 800c49c:	f7ff ffc8 	bl	800c430 <__swhatbuf_r>
 800c4a0:	9f00      	ldr	r7, [sp, #0]
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7fe ff26 	bl	800b2f8 <_malloc_r>
 800c4ac:	b948      	cbnz	r0, 800c4c2 <__smakebuf_r+0x46>
 800c4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b2:	059a      	lsls	r2, r3, #22
 800c4b4:	d4ee      	bmi.n	800c494 <__smakebuf_r+0x18>
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	f043 0302 	orr.w	r3, r3, #2
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	e7e2      	b.n	800c488 <__smakebuf_r+0xc>
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	6020      	str	r0, [r4, #0]
 800c4c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4d2:	b15b      	cbz	r3, 800c4ec <__smakebuf_r+0x70>
 800c4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 f81d 	bl	800c518 <_isatty_r>
 800c4de:	b128      	cbz	r0, 800c4ec <__smakebuf_r+0x70>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	431d      	orrs	r5, r3
 800c4f0:	81a5      	strh	r5, [r4, #12]
 800c4f2:	e7cf      	b.n	800c494 <__smakebuf_r+0x18>

0800c4f4 <_fstat_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	@ (800c514 <_fstat_r+0x20>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f7f5 f8cd 	bl	80016a0 <_fstat>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d102      	bne.n	800c510 <_fstat_r+0x1c>
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	b103      	cbz	r3, 800c510 <_fstat_r+0x1c>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	20001e84 	.word	0x20001e84

0800c518 <_isatty_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d06      	ldr	r5, [pc, #24]	@ (800c534 <_isatty_r+0x1c>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	f7f5 f8cc 	bl	80016c0 <_isatty>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_isatty_r+0x1a>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_isatty_r+0x1a>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20001e84 	.word	0x20001e84

0800c538 <abort>:
 800c538:	b508      	push	{r3, lr}
 800c53a:	2006      	movs	r0, #6
 800c53c:	f000 f834 	bl	800c5a8 <raise>
 800c540:	2001      	movs	r0, #1
 800c542:	f7f5 f85d 	bl	8001600 <_exit>

0800c546 <_malloc_usable_size_r>:
 800c546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54a:	1f18      	subs	r0, r3, #4
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bfbc      	itt	lt
 800c550:	580b      	ldrlt	r3, [r1, r0]
 800c552:	18c0      	addlt	r0, r0, r3
 800c554:	4770      	bx	lr

0800c556 <_raise_r>:
 800c556:	291f      	cmp	r1, #31
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	460c      	mov	r4, r1
 800c55e:	d904      	bls.n	800c56a <_raise_r+0x14>
 800c560:	2316      	movs	r3, #22
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c56c:	b112      	cbz	r2, 800c574 <_raise_r+0x1e>
 800c56e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c572:	b94b      	cbnz	r3, 800c588 <_raise_r+0x32>
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f831 	bl	800c5dc <_getpid_r>
 800c57a:	4622      	mov	r2, r4
 800c57c:	4601      	mov	r1, r0
 800c57e:	4628      	mov	r0, r5
 800c580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c584:	f000 b818 	b.w	800c5b8 <_kill_r>
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d00a      	beq.n	800c5a2 <_raise_r+0x4c>
 800c58c:	1c59      	adds	r1, r3, #1
 800c58e:	d103      	bne.n	800c598 <_raise_r+0x42>
 800c590:	2316      	movs	r3, #22
 800c592:	6003      	str	r3, [r0, #0]
 800c594:	2001      	movs	r0, #1
 800c596:	e7e7      	b.n	800c568 <_raise_r+0x12>
 800c598:	2100      	movs	r1, #0
 800c59a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4798      	blx	r3
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e7e0      	b.n	800c568 <_raise_r+0x12>
	...

0800c5a8 <raise>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	@ (800c5b4 <raise+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f7ff bfd2 	b.w	800c556 <_raise_r>
 800c5b2:	bf00      	nop
 800c5b4:	2000001c 	.word	0x2000001c

0800c5b8 <_kill_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	@ (800c5d8 <_kill_r+0x20>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f7f5 f80b 	bl	80015e0 <_kill>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <_kill_r+0x1c>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	b103      	cbz	r3, 800c5d4 <_kill_r+0x1c>
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001e84 	.word	0x20001e84

0800c5dc <_getpid_r>:
 800c5dc:	f7f4 bff8 	b.w	80015d0 <_getpid>

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
